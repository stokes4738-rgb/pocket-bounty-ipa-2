{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPocket Bounty is a full-stack social bounty platform where users can post and complete tasks for monetary rewards. It features a mobile-first React frontend with Express.js backend, real-time messaging via WebSockets, and comprehensive user management with points/rewards system. The application uses Replit Auth for authentication and includes gamification elements like a Flappy Bird mini-game.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Critical Data Protection\n\n**IMPORTANT**: User game data (points, balance, lifetime earnings) must NEVER be lost during authentication.\n- The `upsertUser` function only updates profile fields (name, email, etc.)\n- Game data fields are preserved during login/logout\n- Backup table `user_data_backups` stores periodic snapshots of critical user data\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client uses React with TypeScript and follows a component-based architecture:\n- **UI Framework**: Built with shadcn/ui components and Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom CSS variables for theme management (dark/light mode)\n- **State Management**: TanStack React Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Mobile-First Design**: PWA-ready with responsive design and mobile navigation patterns\n\n## Backend Architecture\n\nThe server follows Express.js patterns with modular route organization:\n- **API Routes**: RESTful endpoints organized in `/server/routes.ts`\n- **Real-time Communication**: WebSocket server integrated with HTTP server for live messaging\n- **Storage Layer**: Abstracted storage interface in `/server/storage.ts` for data operations\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n## Authentication & Authorization\n\nUses Replit's OpenID Connect (OIDC) authentication system:\n- **Session Management**: PostgreSQL-based session storage with connect-pg-simple\n- **User Management**: Automatic user creation/updates on login\n- **Route Protection**: Middleware-based authentication checks on protected endpoints\n- **Token Handling**: OAuth2 tokens managed server-side with refresh capabilities\n\n## Database Design\n\nPostgreSQL database with Drizzle ORM:\n- **Schema Definition**: Centralized in `/shared/schema.ts` with TypeScript types\n- **Migration Management**: Drizzle Kit for schema migrations\n- **Connection**: Neon serverless PostgreSQL with connection pooling\n- **Data Modeling**: Relational design with proper foreign key constraints\n\nKey entities include:\n- Users (profiles, points, balance tracking)\n- Bounties (tasks with rewards and status management)\n- Messages/Threads (real-time communication)\n- Transactions (payment/reward history)\n- Reviews (user rating system)\n- Friendships (social connections)\n\n## Real-time Features\n\nWebSocket implementation for live updates:\n- **Message Delivery**: Instant messaging between users\n- **Activity Notifications**: Real-time updates for bounty applications, completions\n- **Connection Management**: Automatic reconnection and error handling\n\n## Gamification System\n\nPoints-based reward system with mini-games:\n- **Points Economy**: Users earn points for completing tasks, lose points for posting bounties\n- **Level Progression**: User levels based on activity and performance\n- **Mini-Games**: Flappy Bird game integration for additional point earning\n- **Achievement Tracking**: Reviews, ratings, and lifetime earnings tracking\n\n## PWA Features\n\nProgressive Web App capabilities:\n- **Manifest**: Complete PWA manifest with icons and shortcuts\n- **Service Worker**: Basic caching strategy for offline functionality\n- **Mobile Optimization**: Responsive design with safe area handling for mobile devices\n\n# External Dependencies\n\n## Authentication Service\n- **Replit OIDC**: Primary authentication provider using OpenID Connect\n- **Session Storage**: PostgreSQL-based session management\n\n## Database Service\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: TypeScript-first ORM with schema management\n- **Connection Pooling**: Built-in connection management for serverless environments\n\n## UI Component Libraries\n- **Radix UI**: Unstyled, accessible UI primitives\n- **shadcn/ui**: Pre-styled component library built on Radix UI\n- **Lucide Icons**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **Tailwind CSS**: Utility-first CSS framework with custom theme system\n- **TanStack React Query**: Server state management and caching\n\n## Runtime Dependencies\n- **Express.js**: Node.js web framework for API server\n- **WebSocket (ws)**: Real-time communication library\n- **React Hook Form**: Form validation and management\n- **Zod**: Schema validation for API endpoints and forms","size_bytes":4927},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Pocket Bounty custom colors\n        'pocket-red': {\n          DEFAULT: 'var(--pocket-red)',\n          dark: 'var(--pocket-red-dark)',\n        },\n        'pocket-gold': {\n          DEFAULT: 'var(--pocket-gold)',\n          light: 'var(--pocket-gold-light)',\n        },\n        'dark-bg': 'var(--dark-bg)',\n        'dark-panel': 'var(--dark-panel)',\n        'dark-card': 'var(--dark-card)',\n        'dark-line': 'var(--dark-line)',\n        'dark-ink': 'var(--dark-ink)',\n        'dark-muted': 'var(--dark-muted)',\n        'light-bg': 'var(--light-bg)',\n        'light-panel': 'var(--light-panel)',\n        'light-card': 'var(--light-card)',\n        'light-line': 'var(--light-line)',\n        'light-ink': 'var(--light-ink)',\n        'light-muted': 'var(--light-muted)',\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"-apple-system\", \"Segoe UI\", \"Roboto\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        pulse: {\n          \"0%\": { \n            boxShadow: \"0 0 0 6px rgba(255, 219, 112, 0.28)\" \n          },\n          \"70%\": { \n            boxShadow: \"0 0 0 16px rgba(255, 219, 112, 0)\" \n          },\n          \"100%\": { \n            boxShadow: \"0 0 0 6px rgba(255, 219, 112, 0.28)\" \n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        pulse: \"pulse 1.2s ease-in-out infinite\",\n      },\n      spacing: {\n        'safe-bottom': 'calc(66px + env(safe-area-inset-bottom))',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4053},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nexport const db = drizzle(sql);\n","size_bytes":279},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { apiRateLimiter } from \"./middleware/rateLimiter\";\nimport compression from \"compression\";\nimport helmet from \"helmet\";\n\nconst app = express();\n\n// Security and performance middleware\napp.use(helmet({\n  contentSecurityPolicy: false, // Disabled for development\n  crossOriginEmbedderPolicy: false\n}));\napp.use(compression());\n\n// Request parsing with size limits\napp.use(express.json({ limit: \"10mb\" }));\napp.use(express.urlencoded({ extended: false, limit: \"10mb\" }));\n\n// Apply rate limiting to API routes\napp.use(\"/api\", apiRateLimiter);\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2514},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { insertBountySchema, insertMessageSchema, insertTransactionSchema, insertReviewSchema, insertPaymentMethodSchema, insertPaymentSchema, insertPlatformRevenueSchema } from \"@shared/schema\";\nimport Stripe from \"stripe\";\n\n// Stripe setup with error handling for missing keys\nlet stripe: Stripe | null = null;\nif (process.env.STRIPE_SECRET_KEY) {\n  try {\n    stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2025-07-30.basil\",\n    });\n    console.log(\"Stripe initialized successfully\");\n  } catch (error) {\n    console.warn(\"Stripe initialization error:\", error);\n  }\n} else {\n  console.log(\"Stripe not initialized - running in test mode (no STRIPE_SECRET_KEY)\");\n}\n\n// Process expired bounties (auto-refund after 3 days with 5% fee)\nasync function processExpiredBounties() {\n  try {\n    const threeDaysAgo = new Date();\n    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);\n    \n    const expiredBounties = await storage.getExpiredBounties(threeDaysAgo);\n    \n    for (const bounty of expiredBounties) {\n      const bountyReward = parseFloat(bounty.reward.toString());\n      // Tiered fee structure: 5% for under $250, 3.5% for $250+\n      const feePercentage = bountyReward >= 250 ? 0.035 : 0.05;\n      const platformFee = bountyReward * feePercentage;\n      const refundAmount = bountyReward - platformFee;\n      \n      // Mark bounty as expired\n      await storage.updateBountyStatus(bounty.id, 'expired');\n      \n      // Refund user (minus 5% fee)\n      await storage.updateUserBalance(bounty.authorId, `+${refundAmount.toFixed(2)}`);\n      \n      // Create refund transaction\n      await storage.createTransaction({\n        userId: bounty.authorId,\n        type: \"refund\",\n        amount: refundAmount.toString(),\n        description: `Auto-refund for expired bounty: ${bounty.title} (less ${(feePercentage * 100).toFixed(1)}% platform fee)`,\n        status: \"completed\",\n      });\n      \n      // Record platform revenue from the fee\n      await storage.createPlatformRevenue({\n        bountyId: bounty.id,\n        amount: platformFee.toString(),\n        source: \"expired_bounty_fee\",\n        description: `${(feePercentage * 100).toFixed(1)}% fee from expired bounty: ${bounty.title}`,\n      });\n      \n      // Create activity\n      await storage.createActivity({\n        userId: bounty.authorId,\n        type: \"bounty_expired\",\n        description: `Your bounty \"${bounty.title}\" expired and was refunded (minus ${(feePercentage * 100).toFixed(1)}% fee)`,\n        metadata: { bountyId: bounty.id, refundAmount: refundAmount.toFixed(2), fee: platformFee.toFixed(2) },\n      });\n    }\n  } catch (error) {\n    console.error(\"Error processing expired bounties:\", error);\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  setupAuth(app);\n\n  // Auth routes are now handled in setupAuth() in auth.ts\n\n  // Referral routes\n  app.get(\"/api/referral/code\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      let referralCode = user?.referralCode;\n      if (!referralCode) {\n        // Generate a new referral code\n        referralCode = await storage.generateReferralCode(userId);\n      }\n      \n      res.json({ \n        referralCode,\n        referralCount: user?.referralCount || 0,\n        shareUrl: req.hostname === 'localhost' \n          ? `http://localhost:5000/signup?ref=${referralCode}`\n          : `https://pocketbounty.life/signup?ref=${referralCode}`\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error getting referral code: \" + error.message });\n    }\n  });\n\n  app.get(\"/api/referral/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      const referrals = await storage.getUserReferrals(userId);\n      \n      const referralCount = user?.referralCount || 0;\n      const milestones = [\n        { count: 1, points: 10, reached: referralCount >= 1 },\n        { count: 5, points: 50, reached: referralCount >= 5 },\n        { count: 10, points: 100, reached: referralCount >= 10 },\n        { count: 20, points: 200, reached: referralCount >= 20 }\n      ];\n      \n      res.json({ \n        referralCount,\n        referrals: referrals.map(r => ({\n          id: r.id,\n          firstName: r.firstName,\n          lastName: r.lastName,\n          handle: r.handle,\n          createdAt: r.createdAt\n        })),\n        milestones\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error getting referral stats: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/referral/signup\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { referralCode } = req.body;\n      if (!referralCode) {\n        return res.status(400).json({ message: \"Referral code is required\" });\n      }\n\n      const userId = req.user.id;\n      await storage.processReferralSignup(userId, referralCode);\n      \n      res.json({ message: \"Referral processed successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error processing referral: \" + error.message });\n    }\n  });\n\n\n  // Point purchase routes\n  app.get(\"/api/points/packages\", (req, res) => {\n    const packages = [\n      { id: \"test\", points: 25, price: 0.50, label: \"Test Pack\", popular: false },\n      { id: \"starter\", points: 50, price: 0.99, label: \"Starter Pack\", popular: false },\n      { id: \"basic\", points: 100, price: 1.99, label: \"Basic Pack\", popular: false },\n      { id: \"popular\", points: 250, price: 4.99, label: \"Popular Pack\", popular: true },\n      { id: \"premium\", points: 500, price: 9.99, label: \"Premium Pack\", popular: false },\n      { id: \"mega\", points: 1000, price: 19.99, label: \"Mega Pack\", popular: false },\n      { id: \"ultimate\", points: 2500, price: 49.99, label: \"Ultimate Pack\", popular: false },\n      { id: \"supreme\", points: 5000, price: 99.99, label: \"Supreme Pack\", popular: false },\n    ];\n    res.json(packages);\n  });\n\n  app.post(\"/api/points/purchase\", isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(500).json({ message: \"Payment system not available\" });\n    }\n\n    try {\n      const { packageId } = req.body;\n      const userId = req.user.id;\n\n      // Define point packages\n      const packages: { [key: string]: { points: number; price: number; label: string } } = {\n        test: { points: 25, price: 0.50, label: \"Test Pack\" },\n        starter: { points: 50, price: 0.99, label: \"Starter Pack\" },\n        basic: { points: 100, price: 1.99, label: \"Basic Pack\" },\n        popular: { points: 250, price: 4.99, label: \"Popular Pack\" },\n        premium: { points: 500, price: 9.99, label: \"Premium Pack\" },\n        mega: { points: 1000, price: 19.99, label: \"Mega Pack\" },\n        ultimate: { points: 2500, price: 49.99, label: \"Ultimate Pack\" },\n        supreme: { points: 5000, price: 99.99, label: \"Supreme Pack\" },\n      };\n\n      const selectedPackage = packages[packageId];\n      if (!selectedPackage) {\n        return res.status(400).json({ message: \"Invalid package selected\" });\n      }\n\n      // Create Stripe payment intent\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(selectedPackage.price * 100), // Convert to cents\n        currency: \"usd\",\n        metadata: {\n          userId,\n          packageId,\n          points: selectedPackage.points.toString(),\n          type: \"point_purchase\"\n        },\n        description: `${selectedPackage.label} - ${selectedPackage.points} points`,\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        package: selectedPackage\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: \"Error creating payment: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/points/confirm-purchase\", isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(500).json({ message: \"Payment system not available\" });\n    }\n\n    try {\n      const { paymentIntentId } = req.body;\n      const userId = req.user.id;\n\n      // Retrieve payment intent to verify payment\n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      console.log(`Payment intent status: ${paymentIntent.status}, amount: ${paymentIntent.amount}`);\n      \n      if (paymentIntent.status !== 'succeeded') {\n        console.error(`Payment not completed. Status: ${paymentIntent.status}`);\n        return res.status(400).json({ message: \"Payment not completed\" });\n      }\n\n      if (paymentIntent.metadata.userId !== userId) {\n        console.error(`Payment belongs to different user. Expected: ${userId}, Found: ${paymentIntent.metadata.userId}`);\n        return res.status(403).json({ message: \"Payment belongs to different user\" });\n      }\n\n      if (paymentIntent.metadata.type !== 'point_purchase') {\n        console.error(`Invalid payment type: ${paymentIntent.metadata.type}`);\n        return res.status(400).json({ message: \"Invalid payment type\" });\n      }\n\n      const pointsToAward = parseInt(paymentIntent.metadata.points);\n      const packageLabel = paymentIntent.description;\n      const purchaseAmount = (paymentIntent.amount / 100).toFixed(2);\n\n      console.log(`Awarding ${pointsToAward} points to user ${userId} for $${purchaseAmount}`);\n\n      // Award points to user\n      await storage.updateUserPoints(userId, pointsToAward);\n      console.log(`Points awarded successfully`);\n\n      // Create transaction record\n      const transaction = await storage.createTransaction({\n        userId,\n        type: \"point_purchase\",\n        amount: purchaseAmount,\n        description: `Purchased ${packageLabel}`,\n        status: \"completed\",\n      });\n      console.log(`Transaction created:`, transaction.id);\n\n      // Create activity\n      await storage.createActivity({\n        userId,\n        type: \"points_purchased\",\n        description: `Purchased ${pointsToAward} points for $${purchaseAmount}`,\n        metadata: { \n          points: pointsToAward, \n          amount: purchaseAmount,\n          package: paymentIntent.metadata.packageId\n        },\n      });\n      console.log(`Activity created`);\n\n      // Create platform revenue record\n      await storage.createPlatformRevenue({\n        amount: purchaseAmount,\n        source: \"point_purchase\",\n        description: `Point purchase: ${packageLabel}`,\n      });\n      console.log(`Platform revenue recorded`);\n\n      res.json({ \n        success: true, \n        pointsAwarded: pointsToAward,\n        message: `Successfully purchased ${pointsToAward} points for $${purchaseAmount}!`\n      });\n    } catch (error: any) {\n      console.error(\"Error confirming purchase:\", error);\n      res.status(500).json({ message: \"Error confirming purchase: \" + error.message });\n    }\n  });\n\n  // Bounty routes\n  app.get('/api/bounties', async (req, res) => {\n    try {\n      // Check for expired bounties and boosts before returning list\n      await processExpiredBounties();\n      await storage.updateExpiredBoosts();\n      \n      const { category, search } = req.query;\n      \n      // If no filters, use the boost-aware method\n      if (!category && !search) {\n        const bounties = await storage.getActiveBounties();\n        res.json(bounties);\n      } else {\n        // Use regular filtered search\n        const bounties = await storage.getBounties({\n          category: category as string,\n          search: search as string,\n        });\n        res.json(bounties);\n      }\n    } catch (error) {\n      console.error(\"Error fetching bounties:\", error);\n      res.status(500).json({ message: \"Failed to fetch bounties\" });\n    }\n  });\n\n  app.post('/api/bounties/boost/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const bountyId = req.params.id;\n      const { boostLevel } = req.body;\n      \n      // Validate boost level\n      if (!boostLevel || boostLevel < 1 || boostLevel > 3) {\n        return res.status(400).json({ message: \"Invalid boost level. Must be between 1 and 3.\" });\n      }\n      \n      // Check if bounty exists and belongs to user\n      const bounty = await storage.getBounty(bountyId);\n      if (!bounty) {\n        return res.status(404).json({ message: \"Bounty not found\" });\n      }\n      if (bounty.authorId !== userId) {\n        return res.status(403).json({ message: \"You can only boost your own bounties\" });\n      }\n      if (bounty.status !== \"active\") {\n        return res.status(400).json({ message: \"Can only boost active bounties\" });\n      }\n      \n      // Calculate cost and duration based on boost level\n      const boostConfigs = {\n        1: { points: 2, hours: 6 },    // Level 1: 2 points for 6 hours (1 cent)\n        2: { points: 5, hours: 12 },   // Level 2: 5 points for 12 hours (2.5 cents)\n        3: { points: 10, hours: 24 },  // Level 3: 10 points for 24 hours (5 cents)\n      };\n      \n      const config = boostConfigs[boostLevel as keyof typeof boostConfigs];\n      \n      // Check user points\n      const user = await storage.getUser(userId);\n      if (!user || user.points < config.points) {\n        return res.status(400).json({ \n          message: `Insufficient points. Need ${config.points} points for Level ${boostLevel} boost.`,\n          required: config.points,\n          current: user?.points || 0\n        });\n      }\n      \n      // Perform the boost\n      await storage.boostBounty(bountyId, userId, boostLevel, config.points, config.hours);\n      \n      res.json({\n        success: true,\n        message: `Bounty boosted to Level ${boostLevel} for ${config.hours} hours`,\n        pointsSpent: config.points,\n        duration: config.hours,\n        remainingPoints: user.points - config.points\n      });\n    } catch (error: any) {\n      console.error(\"Error boosting bounty:\", error);\n      res.status(500).json({ message: error.message || \"Failed to boost bounty\" });\n    }\n  });\n\n  app.post('/api/bounties', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const bountyData = insertBountySchema.parse({ ...req.body, authorId: userId });\n      \n      // Full bounty amount is charged upfront (held in escrow)\n      const bountyReward = parseFloat(bountyData.reward.toString());\n      \n      // Check if user has enough balance for the full bounty amount\n      const user = await storage.getUser(userId);\n      if (!user || parseFloat(user.balance) < bountyReward) {\n        return res.status(400).json({ \n          message: `Insufficient balance. Need $${bountyReward.toFixed(2)} (held in escrow until completed or auto-refunded after 3 days minus ${bountyReward >= 250 ? '3.5%' : '5%'} fee)` \n        });\n      }\n      \n      const bounty = await storage.createBounty(bountyData);\n      \n      // Deduct full bounty amount from user balance (held in escrow)\n      await storage.updateUserBalance(userId, `-${bountyReward}`);\n      \n      // Deduct points for posting bounty\n      await storage.updateUserPoints(userId, -5);\n      \n      // Create transaction record for escrow hold\n      await storage.createTransaction({\n        userId,\n        type: \"escrow_hold\",\n        amount: bountyReward.toString(),\n        description: `Posted bounty: ${bountyData.title} (held in escrow, auto-refunds in 3 days minus ${bountyReward >= 250 ? '3.5%' : '5%'} fee if unclaimed)`,\n        status: \"completed\",\n      });\n\n      res.status(201).json({\n        ...bounty,\n        totalCost: bountyReward.toFixed(2)\n      });\n    } catch (error: any) {\n      console.error(\"Error creating bounty:\", error);\n      \n      // Handle validation errors\n      if (error.name === 'ZodError' || error.issues) {\n        const errorMessage = error.issues?.[0]?.message || error.message || \"Invalid bounty data\";\n        return res.status(400).json({ message: errorMessage });\n      }\n      \n      // Handle other specific errors\n      if (error.message && error.message.includes(\"Minimum reward\")) {\n        return res.status(400).json({ message: error.message });\n      }\n      \n      res.status(500).json({ message: \"Failed to create bounty\" });\n    }\n  });\n\n  app.post('/api/bounties/:id/apply', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { id } = req.params;\n      const { message } = req.body;\n      \n      const application = await storage.createBountyApplication(id, userId, message);\n      \n      // Create activity\n      await storage.createActivity({\n        userId,\n        type: \"bounty_applied\",\n        description: \"Applied to a bounty\",\n        metadata: { bountyId: id },\n      });\n      \n      res.status(201).json(application);\n    } catch (error) {\n      console.error(\"Error applying to bounty:\", error);\n      res.status(500).json({ message: \"Failed to apply to bounty\" });\n    }\n  });\n\n  app.get('/api/user/bounties', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const bounties = await storage.getUserBounties(userId);\n      res.json(bounties);\n    } catch (error) {\n      console.error(\"Error fetching user bounties:\", error);\n      res.status(500).json({ message: \"Failed to fetch user bounties\" });\n    }\n  });\n\n  // Transaction routes\n  app.get('/api/user/transactions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const transactions = await storage.getUserTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  app.post('/api/user/points', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { points, reason } = req.body;\n      \n      await storage.updateUserPoints(userId, points);\n      await storage.createActivity({\n        userId,\n        type: \"points_earned\",\n        description: `Earned ${points} points: ${reason}`,\n        metadata: { points, reason },\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating points:\", error);\n      res.status(500).json({ message: \"Failed to update points\" });\n    }\n  });\n\n  // Messaging routes\n  app.get('/api/messages/threads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const threads = await storage.getUserThreads(userId);\n      res.json(threads);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n      res.status(500).json({ message: \"Failed to fetch threads\" });\n    }\n  });\n\n  app.get('/api/messages/threads/:threadId', isAuthenticated, async (req: any, res) => {\n    try {\n      const { threadId } = req.params;\n      const messages = await storage.getThreadMessages(threadId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post('/api/messages', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const messageData = insertMessageSchema.parse({ ...req.body, senderId: userId });\n      const message = await storage.createMessage(messageData);\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error creating message:\", error);\n      res.status(500).json({ message: \"Failed to create message\" });\n    }\n  });\n\n  // Feedback system for users to contact creator\n  app.post('/api/feedback', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { message, type } = req.body;\n      const creatorId = \"46848986\"; // Dallas Abbott's user ID\n\n      if (!message || !message.trim()) {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // Get or create thread between user and creator\n      const thread = await storage.getOrCreateThread(userId, creatorId);\n      \n      // Create the feedback message\n      const newMessage = await storage.createMessage({\n        threadId: thread.id,\n        senderId: userId,\n        content: message.trim(),\n      });\n\n      // Create activity for the feedback\n      await storage.createActivity({\n        userId,\n        type: \"feedback_sent\",\n        description: `Sent ${type || 'feedback'} to creator`,\n        metadata: { type, threadId: thread.id },\n      });\n\n      res.status(201).json({ \n        success: true, \n        message: \"Feedback sent successfully\",\n        threadId: thread.id \n      });\n    } catch (error: any) {\n      console.error(\"Error sending feedback:\", error);\n      res.status(500).json({ message: \"Failed to send feedback\" });\n    }\n  });\n\n  // Creator inbox - get all feedback threads\n  app.get('/api/creator/feedback-threads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const creatorId = \"46848986\"; // Dallas Abbott's user ID\n      \n      // Only allow creator to access this endpoint\n      // Creator tab is only visible to app creator (46848986) so no additional checks needed\n\n      const threads = await storage.getUserThreads(creatorId);\n      res.json(threads);\n    } catch (error) {\n      console.error(\"Error fetching creator feedback threads:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback threads\" });\n    }\n  });\n\n  // User search route\n  app.get('/api/users/search', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const searchTerm = req.query.searchTerm as string || '';\n      \n      if (searchTerm.length === 0) {\n        return res.json([]);\n      }\n      \n      const users = await storage.searchUsers(searchTerm, userId);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error searching users:\", error);\n      res.status(500).json({ message: \"Failed to search users\" });\n    }\n  });\n\n  // Friend routes\n  app.get('/api/friends', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const friends = await storage.getUserFriends(userId);\n      res.json(friends);\n    } catch (error) {\n      console.error(\"Error fetching friends:\", error);\n      res.status(500).json({ message: \"Failed to fetch friends\" });\n    }\n  });\n\n  app.get('/api/friends/requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const requests = await storage.getFriendRequests(userId);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Error fetching friend requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch friend requests\" });\n    }\n  });\n\n  app.post('/api/friends/request', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { addresseeId } = req.body;\n      \n      const friendship = await storage.createFriendRequest({\n        requesterId: userId,\n        addresseeId,\n      });\n      \n      res.status(201).json(friendship);\n    } catch (error) {\n      console.error(\"Error creating friend request:\", error);\n      res.status(500).json({ message: \"Failed to create friend request\" });\n    }\n  });\n\n  app.patch('/api/friends/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      await storage.updateFriendshipStatus(id, status);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating friendship:\", error);\n      res.status(500).json({ message: \"Failed to update friendship\" });\n    }\n  });\n\n  // Review routes\n  app.post('/api/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const reviewData = insertReviewSchema.parse({ ...req.body, reviewerId: userId });\n      const review = await storage.createReview(reviewData);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  app.get('/api/user/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const reviews = await storage.getUserReviews(userId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Activity routes\n  app.get('/api/user/activities', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const activities = await storage.getUserActivities(userId);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch activities\" });\n    }\n  });\n\n  // Profile update route\n  app.patch('/api/user/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { firstName, lastName, handle, bio, skills, experience } = req.body;\n      \n      await storage.updateUserProfile(userId, {\n        firstName,\n        lastName,\n        handle,\n        bio,\n        skills,\n        experience\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Payment routes\n  app.get('/api/payments/methods', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const paymentMethods = await storage.getUserPaymentMethods(userId);\n      res.json(paymentMethods);\n    } catch (error) {\n      console.error(\"Error fetching payment methods:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment methods\" });\n    }\n  });\n\n  app.post('/api/payments/setup-intent', isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment system not configured\" });\n    }\n\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.email) {\n        return res.status(400).json({ message: \"User email required\" });\n      }\n\n      let customer;\n      if (user.stripeCustomerId) {\n        customer = await stripe.customers.retrieve(user.stripeCustomerId);\n      } else {\n        customer = await stripe.customers.create({\n          email: user.email,\n          name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email,\n        });\n        await storage.updateUserStripeInfo(userId, customer.id);\n      }\n\n      const setupIntent = await stripe.setupIntents.create({\n        customer: customer.id,\n        usage: 'off_session',\n      });\n\n      res.json({ clientSecret: setupIntent.client_secret });\n    } catch (error: any) {\n      console.error(\"Error creating setup intent:\", error);\n      res.status(500).json({ message: \"Failed to create setup intent\" });\n    }\n  });\n\n  app.post('/api/payments/save-method', isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment system not configured\" });\n    }\n\n    try {\n      const userId = req.user.id;\n      const { paymentMethodId } = req.body;\n\n      if (!paymentMethodId) {\n        return res.status(400).json({ message: \"Payment method ID required\" });\n      }\n\n      // Retrieve payment method from Stripe\n      const paymentMethod = await stripe.paymentMethods.retrieve(paymentMethodId);\n      \n      // Save to our database\n      const savedMethod = await storage.createPaymentMethod({\n        userId,\n        stripePaymentMethodId: paymentMethodId,\n        type: paymentMethod.type,\n        last4: paymentMethod.card?.last4,\n        brand: paymentMethod.card?.brand,\n        expiryMonth: paymentMethod.card?.exp_month,\n        expiryYear: paymentMethod.card?.exp_year,\n        isDefault: false,\n      });\n\n      res.status(201).json(savedMethod);\n    } catch (error: any) {\n      console.error(\"Error saving payment method:\", error);\n      res.status(500).json({ message: \"Failed to save payment method\" });\n    }\n  });\n\n  app.post('/api/payments/set-default', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { paymentMethodId } = req.body;\n\n      await storage.updatePaymentMethodDefault(userId, paymentMethodId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error setting default payment method:\", error);\n      res.status(500).json({ message: \"Failed to set default payment method\" });\n    }\n  });\n\n  app.delete('/api/payments/methods/:id', isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment system not configured\" });\n    }\n\n    try {\n      const { id } = req.params;\n      const userId = req.user.id;\n\n      // Get payment method from database\n      const paymentMethods = await storage.getUserPaymentMethods(userId);\n      const paymentMethod = paymentMethods.find(pm => pm.id === id);\n\n      if (!paymentMethod) {\n        return res.status(404).json({ message: \"Payment method not found\" });\n      }\n\n      // Detach from Stripe\n      await stripe.paymentMethods.detach(paymentMethod.stripePaymentMethodId);\n      \n      // Delete from database\n      await storage.deletePaymentMethod(id);\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error deleting payment method:\", error);\n      res.status(500).json({ message: \"Failed to delete payment method\" });\n    }\n  });\n\n  app.post('/api/payments/deposit', isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment system not configured\" });\n    }\n\n    try {\n      const userId = req.user.id;\n      const { amount, paymentMethodId } = req.body;\n\n      if (!amount || !paymentMethodId) {\n        return res.status(400).json({ message: \"Amount and payment method required\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user?.stripeCustomerId) {\n        return res.status(400).json({ message: \"Stripe customer not found\" });\n      }\n\n      // Calculate platform fee (5% of deposit)\n      const feeInfo = storage.calculatePlatformFee(amount.toString());\n      const totalCharge = parseFloat(feeInfo.grossAmount) + parseFloat(feeInfo.fee);\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(totalCharge * 100), // Convert to cents, include fee\n        currency: 'usd',\n        customer: user.stripeCustomerId,\n        payment_method: paymentMethodId,\n        confirm: true,\n        automatic_payment_methods: {\n          enabled: true,\n        },\n        return_url: `${req.protocol}://${req.get('host')}/account`,\n      });\n\n      // Save payment record\n      const payment = await storage.createPayment({\n        userId,\n        stripePaymentIntentId: paymentIntent.id,\n        amount: feeInfo.grossAmount,\n        platformFee: feeInfo.fee,\n        netAmount: feeInfo.grossAmount, // User gets the full amount they requested\n        status: paymentIntent.status,\n        type: 'deposit',\n        description: `Account deposit of $${amount} (platform fee: $${feeInfo.fee})`,\n      });\n\n      // If payment succeeded, update user balance and record platform revenue\n      if (paymentIntent.status === 'succeeded') {\n        await storage.updateUserBalance(userId, feeInfo.grossAmount);\n        await storage.updatePaymentStatus(payment.id, 'succeeded');\n        \n        // Create platform revenue record\n        await storage.createPlatformRevenue({\n          transactionId: payment.id,\n          amount: feeInfo.fee,\n          source: \"deposit\",\n          description: `Platform fee from deposit: $${amount}`,\n        });\n      }\n\n      res.json({ \n        success: true,\n        paymentIntent: {\n          id: paymentIntent.id,\n          status: paymentIntent.status,\n          client_secret: paymentIntent.client_secret\n        },\n        platformFee: feeInfo.fee,\n        totalCharged: totalCharge.toFixed(2),\n        amountCredited: feeInfo.grossAmount\n      });\n    } catch (error: any) {\n      console.error(\"Error processing deposit:\", error);\n      \n      // Handle Stripe-specific errors with better messages\n      if (error.type === 'StripeCardError') {\n        let message = \"Payment failed\";\n        \n        switch (error.decline_code) {\n          case 'insufficient_funds':\n            message = \"Your card has insufficient funds. Please try a different payment method or a smaller amount.\";\n            break;\n          case 'card_declined':\n            message = \"Your card was declined. Please try a different payment method.\";\n            break;\n          case 'expired_card':\n            message = \"Your card has expired. Please add a new payment method.\";\n            break;\n          default:\n            message = error.message || \"Payment failed. Please try again.\";\n        }\n        \n        return res.status(400).json({ message, decline_code: error.decline_code });\n      }\n      \n      res.status(500).json({ message: error.message || \"Failed to process deposit\" });\n    }\n  });\n\n  app.get('/api/payments/history', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const payments = await storage.getUserPayments(userId);\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching payment history:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment history\" });\n    }\n  });\n\n  app.post('/api/payments/withdraw', isAuthenticated, async (req: any, res) => {\n    if (!stripe) {\n      return res.status(503).json({ message: \"Payment system not configured\" });\n    }\n\n    try {\n      const userId = req.user.id;\n      const { amount, method } = req.body;\n\n      const user = await storage.getUser(userId);\n      if (!user?.stripeCustomerId) {\n        return res.status(400).json({ message: \"Stripe customer not found\" });\n      }\n\n      const withdrawalAmount = parseFloat(amount);\n      const userBalance = parseFloat(user.balance);\n\n      if (withdrawalAmount < 5) {\n        return res.status(400).json({ message: \"Minimum withdrawal amount is $5.00\" });\n      }\n\n      if (withdrawalAmount > userBalance) {\n        return res.status(400).json({ message: \"Insufficient balance\" });\n      }\n\n      // Create Stripe transfer for the withdrawal\n      let transferAmount = Math.round(withdrawalAmount * 100); // Convert to cents\n      let description = `Withdrawal: $${withdrawalAmount}`;\n      \n      // Apply fees for instant transfers\n      if (method === 'debit_card') {\n        const fee = Math.max(25, Math.round(withdrawalAmount * 0.015 * 100)); // 1.5% or $0.25 minimum\n        transferAmount -= fee;\n        description += ` (Instant transfer fee: $${(fee / 100).toFixed(2)})`;\n      }\n\n      const transfer = await stripe.transfers.create({\n        amount: transferAmount,\n        currency: 'usd',\n        destination: user.stripeCustomerId, // In production, this should be a connected account\n        description: description,\n      });\n\n      // Create withdrawal transaction record\n      const methodNames: Record<string, string> = {\n        'bank_transfer': 'bank transfer',\n        'debit_card': 'instant debit',\n        'cash_app': 'Cash App',\n        'paypal': 'PayPal'\n      };\n      \n      const withdrawalTransaction = await storage.createTransaction({\n        userId,\n        type: \"spending\",\n        amount: amount,\n        description: `Withdrawal via ${methodNames[method] || method}`,\n        status: \"pending\",\n      });\n\n      // Deduct amount from user balance\n      await storage.updateUserBalance(userId, `-${amount}`);\n\n      // Create activity record\n      await storage.createActivity({\n        userId,\n        type: \"withdrawal\",\n        description: `Requested withdrawal of $${amount}`,\n        metadata: { amount, method, transactionId: withdrawalTransaction.id },\n      });\n\n      res.json({\n        success: true,\n        transactionId: withdrawalTransaction.id,\n        transferId: transfer.id,\n        message: \"Withdrawal request submitted successfully\"\n      });\n    } catch (error: any) {\n      console.error(\"Error processing withdrawal:\", error);\n      \n      // Handle Stripe-specific errors\n      if (error.type?.startsWith('Stripe')) {\n        let message = \"Withdrawal failed\";\n        \n        switch (error.code) {\n          case 'insufficient_funds':\n            message = \"Insufficient funds in your account.\";\n            break;\n          case 'account_invalid':\n            message = \"Invalid payment account. Please contact support.\";\n            break;\n          default:\n            message = error.message || \"Withdrawal failed. Please try again.\";\n        }\n        \n        return res.status(400).json({ message });\n      }\n      \n      res.status(500).json({ message: \"Failed to process withdrawal\" });\n    }\n  });\n\n  // Test deposit endpoint (for development without Stripe)\n  app.post('/api/test/deposit', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { amount } = req.body;\n      \n      const numAmount = parseFloat(amount);\n      if (isNaN(numAmount) || numAmount < 1 || numAmount > 1000) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n      \n      // Add funds to user balance\n      await storage.updateUserBalance(userId, amount);\n      \n      // Create transaction record\n      await storage.createTransaction({\n        userId,\n        type: \"earning\",\n        amount,\n        description: \"Test deposit\",\n        status: \"completed\",\n      });\n      \n      // Create activity\n      await storage.createActivity({\n        userId,\n        type: \"deposit\",\n        description: `Added $${amount} in test funds`,\n        metadata: { amount },\n      });\n      \n      const updatedUser = await storage.getUser(userId);\n      res.json({ \n        success: true, \n        balance: updatedUser?.balance,\n        message: \"Test funds added successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error processing test deposit:\", error);\n      res.status(500).json({ message: \"Failed to process test deposit\" });\n    }\n  });\n\n  // Creator dashboard endpoints (creator only)\n  app.get('/api/creator/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      // Disable caching for real-time analytics\n      res.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n      res.set('Surrogate-Control', 'no-store');\n\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      \n      // Allow access to the app creator (you) or admin users\n      // Creator tab is only visible to app creator (46848986) so no additional checks needed\n\n      // Get comprehensive app statistics\n      const [\n        revenue,\n        totalRevenue,\n        allUsers,\n        allBounties,\n        allTransactions,\n        recentActivity\n      ] = await Promise.all([\n        storage.getPlatformRevenue(),\n        storage.getTotalPlatformRevenue(),\n        storage.getAllUsers(),\n        storage.getAllBounties(),\n        storage.getAllTransactions(),\n        storage.getRecentActivity(50)\n      ]);\n\n      // Calculate user statistics\n      const activeUsers = allUsers.filter(u => \n        new Date(u.lastLogin || u.createdAt) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n      ).length;\n\n      const totalUserBalance = allUsers.reduce((sum, u) => sum + parseFloat(u.balance || '0'), 0);\n\n      // Calculate bounty statistics\n      const activeBounties = allBounties.filter(b => b.status === 'active').length;\n      const completedBounties = allBounties.filter(b => b.status === 'completed').length;\n      const totalBountyValue = allBounties.reduce((sum, b) => sum + parseFloat(b.reward || '0'), 0);\n\n      // Calculate transaction statistics\n      const deposits = allTransactions.filter(t => t.type === 'earning');\n      const withdrawals = allTransactions.filter(t => t.type === 'withdrawal'); // Fix: use 'withdrawal' not 'spending'\n      const totalVolume = allTransactions.reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0);\n\n      // Calculate comprehensive spending analytics\n      const pointPurchases = allTransactions.filter(t => t.type === 'point_purchase');\n      const totalPointPurchases = pointPurchases.reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0);\n      \n      const spendingTransactions = allTransactions.filter(t => t.type === 'spending');\n      const totalSpending = spendingTransactions.reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0);\n      \n      const refundTransactions = allTransactions.filter(t => t.type === 'refund');\n      const totalRefunds = refundTransactions.reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0);\n      \n      // Calculate total money users have spent across all categories\n      const totalUserSpent = totalPointPurchases + totalSpending;\n      \n      // Break down spending by category\n      const spendingByCategory = spendingTransactions.reduce((acc, t) => {\n        const description = t.description || '';\n        let category = 'other';\n        \n        if (description.toLowerCase().includes('withdrawal')) {\n          category = 'withdrawals';\n        } else if (description.toLowerCase().includes('bounty')) {\n          category = 'bounty_related';\n        } else if (description.toLowerCase().includes('fee')) {\n          category = 'fees';\n        }\n        \n        acc[category] = (acc[category] || 0) + parseFloat(t.amount || '0');\n        return acc;\n      }, {} as Record<string, number>);\n\n      // Growth metrics (comparing last 30 days vs previous 30 days)\n      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const sixtyDaysAgo = new Date(Date.now() - 60 * 24 * 60 * 60 * 1000);\n      const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n      const newUsersLast30 = allUsers.filter(u => new Date(u.createdAt) > thirtyDaysAgo).length;\n      const newUsersPrevious30 = allUsers.filter(u => \n        new Date(u.createdAt) > sixtyDaysAgo && new Date(u.createdAt) <= thirtyDaysAgo\n      ).length;\n\n      const userGrowthRate = newUsersPrevious30 > 0 \n        ? ((newUsersLast30 - newUsersPrevious30) / newUsersPrevious30 * 100).toFixed(1)\n        : newUsersLast30 > 0 ? '100' : '0';\n\n      // Game Analytics\n      const gameTransactions = allTransactions.filter(t => \n        t.type === 'earning' && \n        t.description && \n        (t.description.includes('game') || \n         t.description.includes('Snake') ||\n         t.description.includes('Tetris') ||\n         t.description.includes('Space Invaders') ||\n         t.description.includes('2048') ||\n         t.description.includes('Flappy') ||\n         t.description.includes('Simon Says') ||\n         t.description.includes('Memory Match') ||\n         t.description.includes('Whack-a-Mole') ||\n         t.description.includes('Connect Four') ||\n         t.description.includes('Asteroids') ||\n         t.description.includes('Pac-Man') ||\n         t.description.includes('Racing') ||\n         t.description.includes('Breakout'))\n      );\n\n      const gameStats = {\n        totalGamesPlayed: gameTransactions.length,\n        totalPointsEarned: gameTransactions.reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0),\n        mostPopularGames: (() => {\n          const gameCount: Record<string, { plays: number; points: number }> = {};\n          gameTransactions.forEach(t => {\n            const desc = t.description || '';\n            let gameName = 'Unknown';\n            \n            if (desc.includes('Snake')) gameName = 'Snake';\n            else if (desc.includes('Tetris')) gameName = 'Tetris';\n            else if (desc.includes('Space Invaders')) gameName = 'Space Invaders';\n            else if (desc.includes('2048')) gameName = '2048';\n            else if (desc.includes('Flappy')) gameName = 'Flappy Bird';\n            else if (desc.includes('Simon Says')) gameName = 'Simon Says';\n            else if (desc.includes('Memory Match')) gameName = 'Memory Match';\n            else if (desc.includes('Whack-a-Mole')) gameName = 'Whack-a-Mole';\n            else if (desc.includes('Connect Four')) gameName = 'Connect Four';\n            else if (desc.includes('Asteroids')) gameName = 'Asteroids';\n            else if (desc.includes('Pac-Man')) gameName = 'Pac-Man';\n            else if (desc.includes('Racing')) gameName = 'Racing';\n            else if (desc.includes('Breakout')) gameName = 'Breakout';\n            \n            if (!gameCount[gameName]) {\n              gameCount[gameName] = { plays: 0, points: 0 };\n            }\n            gameCount[gameName].plays++;\n            gameCount[gameName].points += parseFloat(t.amount || '0');\n          });\n          \n          return Object.entries(gameCount)\n            .map(([name, data]) => ({\n              name,\n              plays: data.plays,\n              pointsEarned: data.points\n            }))\n            .sort((a, b) => b.plays - a.plays);\n        })(),\n        recentGameActivity: gameTransactions\n          .slice(-10)\n          .map(t => ({\n            game: t.description?.split(' - ')[0] || 'Unknown',\n            points: parseFloat(t.amount || '0'),\n            userId: t.userId,\n            timestamp: t.createdAt\n          }))\n      };\n\n      // Top Performers\n      const userEarnings: Record<string, { earned: number; spent: number; actions: number; name: string }> = {};\n      \n      allUsers.forEach(user => {\n        userEarnings[user.id] = {\n          earned: 0,\n          spent: 0,\n          actions: 0,\n          name: user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email\n        };\n      });\n\n      allTransactions.forEach(t => {\n        if (!userEarnings[t.userId]) {\n          userEarnings[t.userId] = { earned: 0, spent: 0, actions: 0, name: 'Unknown User' };\n        }\n        \n        if (t.type === 'earning') {\n          userEarnings[t.userId].earned += parseFloat(t.amount || '0');\n        } else if (t.type === 'spending' || t.type === 'point_purchase') {\n          userEarnings[t.userId].spent += parseFloat(t.amount || '0');\n        }\n        userEarnings[t.userId].actions++;\n      });\n\n      const topPerformers = {\n        topEarners: Object.entries(userEarnings)\n          .map(([id, data]) => ({ id, name: data.name, earned: data.earned.toFixed(2) }))\n          .sort((a, b) => parseFloat(b.earned) - parseFloat(a.earned))\n          .slice(0, 10),\n        topSpenders: Object.entries(userEarnings)\n          .map(([id, data]) => ({ id, name: data.name, spent: data.spent.toFixed(2) }))\n          .sort((a, b) => parseFloat(b.spent) - parseFloat(a.spent))\n          .slice(0, 10),\n        mostActive: Object.entries(userEarnings)\n          .map(([id, data]) => ({ id, name: data.name, actions: data.actions }))\n          .sort((a, b) => b.actions - a.actions)\n          .slice(0, 10)\n      };\n\n      // User Engagement Metrics\n      const dailyActiveUsers = allUsers.filter(u => \n        new Date(u.lastLogin || u.createdAt) > oneDayAgo\n      ).length;\n      \n      const weeklyActiveUsers = allUsers.filter(u => \n        new Date(u.lastLogin || u.createdAt) > sevenDaysAgo\n      ).length;\n      \n      const monthlyActiveUsers = allUsers.filter(u => \n        new Date(u.lastLogin || u.createdAt) > thirtyDaysAgo\n      ).length;\n\n      // Calculate retention rate (users who returned after 7 days)\n      const usersFromLastWeek = allUsers.filter(u => {\n        const createdDate = new Date(u.createdAt);\n        return createdDate < sevenDaysAgo && createdDate > new Date(Date.now() - 14 * 24 * 60 * 60 * 1000);\n      });\n      \n      const retainedUsers = usersFromLastWeek.filter(u => \n        new Date(u.lastLogin || u.createdAt) > sevenDaysAgo\n      ).length;\n      \n      const retentionRate = usersFromLastWeek.length > 0 \n        ? ((retainedUsers / usersFromLastWeek.length) * 100).toFixed(1)\n        : '0';\n\n      const engagement = {\n        dailyActiveUsers,\n        weeklyActiveUsers,\n        monthlyActiveUsers,\n        retentionRate,\n        avgSessionLength: '12.5', // Placeholder - would need session tracking\n        bounceRate: '35' // Placeholder - would need analytics tracking\n      };\n\n      res.json({ \n        revenue: {\n          data: revenue,\n          total: totalRevenue,\n          transactionCount: revenue.length,\n          avgPerTransaction: revenue.length > 0 ? (parseFloat(totalRevenue) / revenue.length).toFixed(2) : \"0.00\"\n        },\n        users: {\n          total: allUsers.length,\n          active: activeUsers,\n          totalBalance: totalUserBalance.toFixed(2),\n          newLast30Days: newUsersLast30,\n          growthRate: userGrowthRate\n        },\n        bounties: {\n          total: allBounties.length,\n          active: activeBounties,\n          completed: completedBounties,\n          totalValue: totalBountyValue.toFixed(2),\n          completionRate: allBounties.length > 0 ? ((completedBounties / allBounties.length) * 100).toFixed(1) : '0'\n        },\n        transactions: {\n          total: allTransactions.length,\n          totalVolume: totalVolume.toFixed(2),\n          deposits: deposits.length,\n          withdrawals: withdrawals.length,\n          avgTransactionSize: allTransactions.length > 0 ? (totalVolume / allTransactions.length).toFixed(2) : '0'\n        },\n        spending: {\n          totalUserSpent: totalUserSpent.toFixed(2),\n          pointPurchases: {\n            total: totalPointPurchases.toFixed(2),\n            count: pointPurchases.length,\n            avgPurchase: pointPurchases.length > 0 ? (totalPointPurchases / pointPurchases.length).toFixed(2) : '0'\n          },\n          withdrawals: {\n            total: withdrawals.reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0).toFixed(2),\n            count: withdrawals.length,\n            avgWithdrawal: withdrawals.length > 0 ? (withdrawals.reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0) / withdrawals.length).toFixed(2) : '0'\n          },\n          boosts: {\n            total: totalSpending.toFixed(2),\n            count: spendingTransactions.length,\n            avgBoost: spendingTransactions.length > 0 ? (totalSpending / spendingTransactions.length).toFixed(2) : '0'\n          },\n          refunds: {\n            total: totalRefunds.toFixed(2),\n            count: refundTransactions.length\n          },\n          breakdown: spendingByCategory,\n          last30Days: {\n            pointPurchases: pointPurchases.filter(t => t.createdAt && new Date(t.createdAt) > thirtyDaysAgo).reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0).toFixed(2),\n            spending: spendingTransactions.filter(t => t.createdAt && new Date(t.createdAt) > thirtyDaysAgo).reduce((sum, t) => sum + parseFloat(t.amount || '0'), 0).toFixed(2)\n          }\n        },\n        gameStats,\n        topPerformers,\n        engagement,\n        activity: recentActivity\n      });\n    } catch (error) {\n      console.error(\"Error fetching creator stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch creator stats\" });\n    }\n  });\n\n  // Get detailed creator data for modals\n  app.get('/api/creator/details/:type', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { type } = req.params;\n      \n      // Creator tab is only visible to app creator (46848986) so no additional checks needed\n      const user = await storage.getUser(userId);\n      \n      switch (type) {\n        case 'users': {\n          const users = await storage.getAllUsers();\n          const sortedUsers = users\n            .sort((a, b) => b.points - a.points)\n            .slice(0, 100) // Top 100 users\n            .map(u => ({\n              id: u.id,\n              firstName: u.firstName,\n              lastName: u.lastName,\n              email: u.email,\n              handle: u.handle,\n              points: u.points,\n              balance: u.balance,\n              lifetimeEarned: u.lifetimeEarned,\n              createdAt: u.createdAt\n            }));\n          res.json({ users: sortedUsers });\n          break;\n        }\n        \n        case 'revenue': {\n          const revenue = await storage.getPlatformRevenue();\n          const transactions = revenue\n            .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n            .slice(0, 100) // Recent 100 transactions\n            .map(async r => {\n              let userName = 'Platform';\n              if (r.bountyId) {\n                const bounty = await storage.getBounty(r.bountyId);\n                if (bounty) {\n                  const user = await storage.getUser(bounty.claimedBy || bounty.authorId);\n                  userName = user ? `${user.firstName} ${user.lastName}`.trim() || user.email : 'Unknown';\n                }\n              }\n              return {\n                id: r.id,\n                amount: r.amount,\n                source: r.source,\n                description: r.description,\n                userName,\n                createdAt: r.createdAt\n              };\n            });\n          res.json({ transactions: await Promise.all(transactions) });\n          break;\n        }\n        \n        case 'points': {\n          const transactions = await storage.getAllTransactions();\n          const pointPurchases = transactions\n            .filter(t => t.type === 'deposit' && t.status === 'completed')\n            .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n            .slice(0, 100);\n          \n          const purchases = await Promise.all(pointPurchases.map(async p => {\n            const user = await storage.getUser(p.userId);\n            return {\n              id: p.id,\n              amount: p.amount,\n              points: parseInt(p.amount) * 1000, // Assuming 1000 points per dollar\n              userName: user ? `${user.firstName} ${user.lastName}`.trim() || user.handle || 'Unknown' : 'Unknown',\n              userEmail: user?.email || '',\n              createdAt: p.createdAt\n            };\n          }));\n          res.json({ purchases });\n          break;\n        }\n        \n        case 'bounties': {\n          const bounties = await storage.getAllBounties();\n          const sortedBounties = bounties\n            .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n            .slice(0, 100);\n          \n          const detailedBounties = await Promise.all(sortedBounties.map(async b => {\n            const author = await storage.getUser(b.authorId);\n            return {\n              id: b.id,\n              title: b.title,\n              description: b.description,\n              reward: b.reward,\n              status: b.status,\n              boostLevel: b.boostLevel || 0,\n              authorName: author ? `${author.firstName} ${author.lastName}`.trim() || author.handle || author.email : 'Unknown',\n              createdAt: b.createdAt\n            };\n          }));\n          res.json({ bounties: detailedBounties });\n          break;\n        }\n        \n        case 'spending': {\n          const transactions = await storage.getAllTransactions();\n          const spendingData = transactions\n            .filter(t => ['withdrawal', 'deposit', 'earning', 'refund', 'purchase'].includes(t.type))\n            .sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime())\n            .slice(0, 100);\n          \n          const spending = await Promise.all(spendingData.map(async s => {\n            const user = await storage.getUser(s.userId);\n            return {\n              id: s.id,\n              type: s.type,\n              amount: s.amount,\n              description: s.description || s.type,\n              userName: user ? `${user.firstName} ${user.lastName}`.trim() || user.handle || user.email : 'Unknown',\n              createdAt: s.createdAt\n            };\n          }));\n          res.json({ spending });\n          break;\n        }\n        \n        default:\n          res.status(400).json({ message: \"Invalid detail type\" });\n      }\n    } catch (error) {\n      console.error(`Error fetching creator details for ${req.params.type}:`, error);\n      res.status(500).json({ message: \"Failed to fetch details\" });\n    }\n  });\n\n  // Bounty completion with platform fee\n  app.post('/api/bounties/:id/complete', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { id } = req.params;\n      \n      const bounty = await storage.getBounty(id);\n      if (!bounty) {\n        return res.status(404).json({ message: \"Bounty not found\" });\n      }\n      \n      if (bounty.authorId !== userId) {\n        return res.status(403).json({ message: \"Only bounty author can mark as complete\" });\n      }\n      \n      if (bounty.status !== \"active\" || !bounty.claimedBy) {\n        return res.status(400).json({ message: \"Bounty must be claimed to complete\" });\n      }\n      \n      // Calculate platform fee (5% of bounty reward)\n      const feeInfo = storage.calculatePlatformFee(bounty.reward.toString());\n      \n      // Mark bounty as completed\n      await storage.updateBountyStatus(id, \"completed\");\n      \n      // Pay the worker (reward minus platform fee)\n      await storage.updateUserBalance(bounty.claimedBy, feeInfo.netAmount);\n      \n      // Create transaction for the worker\n      await storage.createTransaction({\n        userId: bounty.claimedBy,\n        bountyId: id,\n        type: \"earning\",\n        amount: feeInfo.netAmount,\n        description: `Completed bounty: ${bounty.title} (after $${feeInfo.fee} platform fee)`,\n        status: \"completed\",\n      });\n      \n      // Create platform revenue record\n      await storage.createPlatformRevenue({\n        bountyId: id,\n        amount: feeInfo.fee,\n        source: \"bounty_completion\",\n        description: `Platform fee from bounty completion: ${bounty.title}`,\n      });\n      \n      // Create activities\n      await storage.createActivity({\n        userId: bounty.claimedBy,\n        type: \"bounty_completed\",\n        description: `Completed bounty: ${bounty.title}`,\n        metadata: { bountyId: id, earned: feeInfo.netAmount, platformFee: feeInfo.fee },\n      });\n      \n      await storage.createActivity({\n        userId,\n        type: \"bounty_completed\",\n        description: `Bounty completed: ${bounty.title}`,\n        metadata: { bountyId: id, workerId: bounty.claimedBy },\n      });\n      \n      res.json({ \n        success: true,\n        workerEarned: feeInfo.netAmount,\n        platformFee: feeInfo.fee,\n        originalReward: bounty.reward\n      });\n    } catch (error) {\n      console.error(\"Error completing bounty:\", error);\n      res.status(500).json({ message: \"Failed to complete bounty\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time messaging\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws: WebSocket, req) => {\n    console.log('WebSocket client connected');\n    \n    ws.on('message', (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        // Broadcast message to all connected clients\n        wss.clients.forEach((client) => {\n          if (client !== ws && client.readyState === WebSocket.OPEN) {\n            client.send(JSON.stringify(message));\n          }\n        });\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":60318},"server/storage.ts":{"content":"import {\n  users,\n  bounties,\n  transactions,\n  messageThreads,\n  messages,\n  friendships,\n  reviews,\n  activities,\n  bountyApplications,\n  paymentMethods,\n  payments,\n  platformRevenue,\n  boostHistory,\n  type User,\n  type UpsertUser,\n  type Bounty,\n  type InsertBounty,\n  type Transaction,\n  type InsertTransaction,\n  type MessageThread,\n  type Message,\n  type InsertMessage,\n  type Friendship,\n  type InsertFriendship,\n  type Review,\n  type InsertReview,\n  type Activity,\n  type InsertActivity,\n  type BountyApplication,\n  type PaymentMethod,\n  type InsertPaymentMethod,\n  type Payment,\n  type InsertPayment,\n  type PlatformRevenue,\n  type InsertPlatformRevenue,\n  type BoostHistory,\n  type InsertBoostHistory,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Partial<User>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  migrateUserToPasswordAuth(userId: string, data: { username: string, password: string, firstName: string, lastName: string }): Promise<User>;\n  updateUserPoints(userId: string, points: number): Promise<void>;\n  updateUserBalance(userId: string, amount: string): Promise<void>;\n  \n  // Bounty operations\n  createBounty(bounty: InsertBounty): Promise<Bounty>;\n  getBounties(filters?: { category?: string; search?: string }): Promise<Bounty[]>;\n  getBounty(id: string): Promise<Bounty | undefined>;\n  updateBountyStatus(id: string, status: string, claimedBy?: string): Promise<void>;\n  getUserBounties(userId: string): Promise<Bounty[]>;\n  getExpiredBounties(cutoffDate: Date): Promise<Bounty[]>;\n  \n  // Boost operations\n  boostBounty(bountyId: string, userId: string, boostLevel: number, pointsCost: number, durationHours: number): Promise<void>;\n  getActiveBounties(): Promise<Bounty[]>;\n  updateExpiredBoosts(): Promise<void>;\n  \n  // Application operations\n  createBountyApplication(bountyId: string, userId: string, message?: string): Promise<BountyApplication>;\n  getBountyApplications(bountyId: string): Promise<BountyApplication[]>;\n  updateApplicationStatus(id: string, status: string): Promise<void>;\n  \n  // Transaction operations\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getUserTransactions(userId: string): Promise<Transaction[]>;\n  updateTransactionStatus(id: string, status: string): Promise<void>;\n  \n  // Messaging operations\n  getOrCreateThread(user1Id: string, user2Id: string): Promise<MessageThread>;\n  getUserThreads(userId: string): Promise<(MessageThread & { otherUser: User; lastMessage?: Message })[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  getThreadMessages(threadId: string): Promise<Message[]>;\n  markMessageAsRead(messageId: string): Promise<void>;\n  \n  // Friend operations\n  createFriendRequest(friendship: InsertFriendship): Promise<Friendship>;\n  getUserFriends(userId: string): Promise<(Friendship & { friend: User })[]>;\n  getFriendRequests(userId: string): Promise<(Friendship & { requester: User })[]>;\n  updateFriendshipStatus(id: string, status: string): Promise<void>;\n  searchUsers(searchTerm: string, excludeUserId: string): Promise<User[]>;\n  \n  // Review operations\n  createReview(review: InsertReview): Promise<Review>;\n  getUserReviews(userId: string): Promise<(Review & { reviewer: User; bounty: Bounty })[]>;\n  \n  // Activity operations\n  createActivity(activity: InsertActivity): Promise<Activity>;\n  getUserActivities(userId: string): Promise<Activity[]>;\n  \n  // Payment operations\n  createPaymentMethod(paymentMethod: InsertPaymentMethod): Promise<PaymentMethod>;\n  getUserPaymentMethods(userId: string): Promise<PaymentMethod[]>;\n  updatePaymentMethodDefault(userId: string, paymentMethodId: string): Promise<void>;\n  deletePaymentMethod(id: string): Promise<void>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getUserPayments(userId: string): Promise<Payment[]>;\n  updatePaymentStatus(id: string, status: string): Promise<void>;\n  updateUserStripeInfo(userId: string, stripeCustomerId?: string, stripeSubscriptionId?: string): Promise<void>;\n  \n  // Platform revenue operations\n  createPlatformRevenue(revenue: InsertPlatformRevenue): Promise<PlatformRevenue>;\n  getPlatformRevenue(): Promise<PlatformRevenue[]>;\n  getTotalPlatformRevenue(): Promise<string>;\n  \n  // Fee calculation utility\n  calculatePlatformFee(amount: string): { fee: string; netAmount: string; grossAmount: string };\n  \n  // Creator dashboard operations\n  getAllUsers(): Promise<User[]>;\n  getAllBounties(): Promise<Bounty[]>;\n  getAllTransactions(): Promise<Transaction[]>;\n  getRecentActivity(limit?: number): Promise<Activity[]>;\n  \n  // Profile update operations  \n  updateUserProfile(userId: string, profileData: { firstName?: string; lastName?: string; handle?: string; bio?: string; skills?: string; experience?: string }): Promise<void>;\n  \n  // Referral operations\n  generateReferralCode(userId: string): Promise<string>;\n  getUserByReferralCode(referralCode: string): Promise<User | undefined>;\n  processReferralSignup(newUserId: string, referralCode: string): Promise<void>;\n  getUserReferrals(userId: string): Promise<User[]>;\n  updateReferralCount(userId: string): Promise<void>;\n  \n  // Data recovery operations\n  recoverUserData(userId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: Partial<User>): Promise<User> {\n    const result = await db\n      .insert(users)\n      .values({\n        ...userData,\n        points: userData.points || 0,\n        balance: userData.balance || \"0.00\",\n        lifetimeEarned: userData.lifetimeEarned || \"0.00\",\n        level: userData.level || 1,\n        rating: userData.rating || \"0.00\",\n        reviewCount: userData.reviewCount || 0,\n        isOnline: false,\n        referralCount: userData.referralCount || 0,\n      } as any)\n      .returning();\n    \n    return Array.isArray(result) ? result[0] : result;\n  }\n\n  async migrateUserToPasswordAuth(userId: string, data: { username: string, password: string, firstName: string, lastName: string }): Promise<User> {\n    const result = await db\n      .update(users)\n      .set({\n        username: data.username,\n        password: data.password,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        handle: data.username, // Use username as initial handle\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    \n    return Array.isArray(result) ? result[0] : result;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // First check if user exists to preserve their game data\n    const existingUser = await this.getUser(userData.id);\n    \n    if (existingUser) {\n      // User exists - only update profile fields, NEVER touch game data\n      // This protects points, balance, lifetime_earned, referral_code, etc.\n      const result = await db\n        .update(users)\n        .set({\n          email: userData.email,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          profileImageUrl: userData.profileImageUrl,\n          updatedAt: new Date(),\n          // Explicitly NOT updating: points, balance, lifetimeEarned, referralCode, handle, bio, etc.\n        })\n        .where(eq(users.id, userData.id))\n        .returning();\n      \n      console.log(`[AUTH] Updated profile for user ${userData.id}, preserved game data: ${existingUser.points} points, $${existingUser.balance} balance`);\n      return Array.isArray(result) ? result[0] : result;\n    } else {\n      // New user - create with safe defaults\n      const result = await db\n        .insert(users)\n        .values({\n          ...userData,\n          points: 0,\n          balance: \"0.00\",\n          lifetimeEarned: \"0.00\",\n        })\n        .returning();\n      console.log(`[AUTH] Created new user ${userData.id} with default values`);\n      return Array.isArray(result) ? result[0] : result;\n    }\n  }\n\n  async updateUserPoints(userId: string, points: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        points: sql`${users.points} + ${points}`,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserBalance(userId: string, amount: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ \n        balance: sql`${users.balance} + ${amount}`,\n        lifetimeEarned: sql`${users.lifetimeEarned} + ${amount}`,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, userId));\n  }\n\n  // Bounty operations\n  async createBounty(bounty: InsertBounty): Promise<Bounty> {\n    const [newBounty] = await db.insert(bounties).values([bounty]).returning();\n    return newBounty;\n  }\n\n  async getBounties(filters?: { category?: string; search?: string }): Promise<Bounty[]> {\n    let conditions = [eq(bounties.status, \"active\")];\n    \n    if (filters?.category) {\n      conditions.push(eq(bounties.category, filters.category));\n    }\n    \n    if (filters?.search) {\n      conditions.push(\n        or(\n          sql`${bounties.title} ILIKE ${'%' + filters.search + '%'}`,\n          sql`${bounties.description} ILIKE ${'%' + filters.search + '%'}`\n        )!\n      );\n    }\n    \n    return db\n      .select()\n      .from(bounties)\n      .where(and(...conditions))\n      .orderBy(desc(bounties.createdAt));\n  }\n\n  async getBounty(id: string): Promise<Bounty | undefined> {\n    const [bounty] = await db.select().from(bounties).where(eq(bounties.id, id));\n    return bounty;\n  }\n\n  async updateBountyStatus(id: string, status: string, claimedBy?: string): Promise<void> {\n    await db\n      .update(bounties)\n      .set({ \n        status, \n        claimedBy,\n        completedAt: status === \"completed\" ? new Date() : undefined,\n        updatedAt: new Date() \n      })\n      .where(eq(bounties.id, id));\n  }\n\n  async getUserBounties(userId: string): Promise<Bounty[]> {\n    return db\n      .select()\n      .from(bounties)\n      .where(or(eq(bounties.authorId, userId), eq(bounties.claimedBy, userId)))\n      .orderBy(desc(bounties.createdAt));\n  }\n\n  async getExpiredBounties(cutoffDate: Date): Promise<Bounty[]> {\n    return db\n      .select()\n      .from(bounties)\n      .where(\n        and(\n          eq(bounties.status, \"active\"),\n          sql`${bounties.createdAt} < ${cutoffDate.toISOString()}`\n        )\n      )\n      .orderBy(desc(bounties.createdAt));\n  }\n\n  // Application operations\n  async createBountyApplication(bountyId: string, userId: string, message?: string): Promise<BountyApplication> {\n    const [application] = await db\n      .insert(bountyApplications)\n      .values({ bountyId, userId, message })\n      .returning();\n    return application;\n  }\n\n  async getBountyApplications(bountyId: string): Promise<BountyApplication[]> {\n    return db\n      .select()\n      .from(bountyApplications)\n      .where(eq(bountyApplications.bountyId, bountyId))\n      .orderBy(desc(bountyApplications.createdAt));\n  }\n\n  async updateApplicationStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(bountyApplications)\n      .set({ status })\n      .where(eq(bountyApplications.id, id));\n  }\n\n  // Transaction operations\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const [newTransaction] = await db.insert(transactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getUserTransactions(userId: string): Promise<Transaction[]> {\n    return db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async updateTransactionStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(transactions)\n      .set({ status })\n      .where(eq(transactions.id, id));\n  }\n\n  // Messaging operations\n  async getOrCreateThread(user1Id: string, user2Id: string): Promise<MessageThread> {\n    const [existingThread] = await db\n      .select()\n      .from(messageThreads)\n      .where(\n        or(\n          and(eq(messageThreads.user1Id, user1Id), eq(messageThreads.user2Id, user2Id)),\n          and(eq(messageThreads.user1Id, user2Id), eq(messageThreads.user2Id, user1Id))\n        )\n      );\n\n    if (existingThread) {\n      return existingThread;\n    }\n\n    const [newThread] = await db\n      .insert(messageThreads)\n      .values({ user1Id, user2Id })\n      .returning();\n    return newThread;\n  }\n\n  async getUserThreads(userId: string): Promise<(MessageThread & { otherUser: User; lastMessage?: Message })[]> {\n    const threadsWithUsers = await db\n      .select({\n        thread: messageThreads,\n        otherUser: users,\n        lastMessage: messages,\n      })\n      .from(messageThreads)\n      .leftJoin(\n        users,\n        or(\n          and(eq(messageThreads.user1Id, userId), eq(users.id, messageThreads.user2Id)),\n          and(eq(messageThreads.user2Id, userId), eq(users.id, messageThreads.user1Id))\n        )\n      )\n      .leftJoin(\n        messages,\n        and(\n          eq(messages.threadId, messageThreads.id),\n          eq(messages.createdAt, sql`(\n            SELECT MAX(created_at) \n            FROM ${messages} \n            WHERE thread_id = ${messageThreads.id}\n          )`)\n        )\n      )\n      .where(or(eq(messageThreads.user1Id, userId), eq(messageThreads.user2Id, userId)))\n      .orderBy(desc(messageThreads.lastMessageAt));\n\n    return threadsWithUsers.map(row => ({\n      ...row.thread,\n      otherUser: row.otherUser!,\n      lastMessage: row.lastMessage || undefined,\n    }));\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    \n    // Update thread's lastMessageAt\n    await db\n      .update(messageThreads)\n      .set({ lastMessageAt: new Date() })\n      .where(eq(messageThreads.id, message.threadId));\n    \n    return newMessage;\n  }\n\n  async getThreadMessages(threadId: string): Promise<Message[]> {\n    return db\n      .select()\n      .from(messages)\n      .where(eq(messages.threadId, threadId))\n      .orderBy(messages.createdAt);\n  }\n\n  async markMessageAsRead(messageId: string): Promise<void> {\n    await db\n      .update(messages)\n      .set({ readAt: new Date() })\n      .where(eq(messages.id, messageId));\n  }\n\n  // Friend operations\n  async createFriendRequest(friendship: InsertFriendship): Promise<Friendship> {\n    const [newFriendship] = await db.insert(friendships).values(friendship).returning();\n    return newFriendship;\n  }\n\n  async getUserFriends(userId: string): Promise<(Friendship & { friend: User })[]> {\n    const userFriendships = await db\n      .select({\n        friendship: friendships,\n        friend: users,\n      })\n      .from(friendships)\n      .leftJoin(\n        users,\n        or(\n          and(eq(friendships.requesterId, userId), eq(users.id, friendships.addresseeId)),\n          and(eq(friendships.addresseeId, userId), eq(users.id, friendships.requesterId))\n        )\n      )\n      .where(\n        and(\n          or(eq(friendships.requesterId, userId), eq(friendships.addresseeId, userId)),\n          eq(friendships.status, \"accepted\")\n        )\n      );\n\n    return userFriendships.map((row: any) => ({\n      ...row.friendship,\n      friend: row.friend!,\n    }));\n  }\n\n  async getFriendRequests(userId: string): Promise<(Friendship & { requester: User })[]> {\n    const requests = await db\n      .select({\n        friendship: friendships,\n        requester: users,\n      })\n      .from(friendships)\n      .leftJoin(users, eq(users.id, friendships.requesterId))\n      .where(\n        and(\n          eq(friendships.addresseeId, userId),\n          eq(friendships.status, \"pending\")\n        )\n      );\n\n    return requests.map(row => ({\n      ...row.friendship,\n      requester: row.requester!,\n    }));\n  }\n\n  async updateFriendshipStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(friendships)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(friendships.id, id));\n  }\n\n  async searchUsers(searchTerm: string, excludeUserId: string): Promise<User[]> {\n    const term = `%${searchTerm.toLowerCase()}%`;\n    \n    return db\n      .select()\n      .from(users)\n      .where(\n        and(\n          or(\n            sql`LOWER(${users.firstName}) LIKE ${term}`,\n            sql`LOWER(${users.lastName}) LIKE ${term}`,\n            sql`LOWER(${users.handle}) LIKE ${term}`,\n            sql`LOWER(${users.email}) LIKE ${term}`\n          ),\n          sql`${users.id} != ${excludeUserId}`\n        )\n      )\n      .limit(20);\n  }\n\n  // Review operations\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review).returning();\n    \n    // Update user's rating\n    const userReviews = await db\n      .select({ rating: reviews.rating })\n      .from(reviews)\n      .where(eq(reviews.revieweeId, review.revieweeId));\n    \n    const avgRating = userReviews.reduce((sum, r) => sum + r.rating, 0) / userReviews.length;\n    \n    await db\n      .update(users)\n      .set({ \n        rating: avgRating.toFixed(2),\n        reviewCount: userReviews.length,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, review.revieweeId));\n    \n    return newReview;\n  }\n\n  async getUserReviews(userId: string): Promise<(Review & { reviewer: User; bounty: Bounty })[]> {\n    const userReviews = await db\n      .select({\n        review: reviews,\n        reviewer: users,\n        bounty: bounties,\n      })\n      .from(reviews)\n      .leftJoin(users, eq(users.id, reviews.reviewerId))\n      .leftJoin(bounties, eq(bounties.id, reviews.bountyId))\n      .where(eq(reviews.revieweeId, userId))\n      .orderBy(desc(reviews.createdAt));\n\n    return userReviews.map(row => ({\n      ...row.review,\n      reviewer: row.reviewer!,\n      bounty: row.bounty!,\n    }));\n  }\n\n  // Activity operations\n  async createActivity(activity: InsertActivity): Promise<Activity> {\n    const [newActivity] = await db.insert(activities).values(activity).returning();\n    return newActivity;\n  }\n\n  async getUserActivities(userId: string): Promise<Activity[]> {\n    return db\n      .select()\n      .from(activities)\n      .where(eq(activities.userId, userId))\n      .orderBy(desc(activities.createdAt))\n      .limit(50);\n  }\n\n  // Payment operations\n  async createPaymentMethod(paymentMethod: InsertPaymentMethod): Promise<PaymentMethod> {\n    const [newPaymentMethod] = await db.insert(paymentMethods).values(paymentMethod).returning();\n    return newPaymentMethod;\n  }\n\n  async getUserPaymentMethods(userId: string): Promise<PaymentMethod[]> {\n    return db\n      .select()\n      .from(paymentMethods)\n      .where(eq(paymentMethods.userId, userId))\n      .orderBy(desc(paymentMethods.isDefault), desc(paymentMethods.createdAt));\n  }\n\n  async updatePaymentMethodDefault(userId: string, paymentMethodId: string): Promise<void> {\n    // First, unset all other payment methods as non-default\n    await db\n      .update(paymentMethods)\n      .set({ isDefault: false, updatedAt: new Date() })\n      .where(eq(paymentMethods.userId, userId));\n    \n    // Set the specified payment method as default\n    await db\n      .update(paymentMethods)\n      .set({ isDefault: true, updatedAt: new Date() })\n      .where(and(eq(paymentMethods.id, paymentMethodId), eq(paymentMethods.userId, userId)));\n  }\n\n  async deletePaymentMethod(id: string): Promise<void> {\n    await db.delete(paymentMethods).where(eq(paymentMethods.id, id));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db.insert(payments).values(payment).returning();\n    return newPayment;\n  }\n\n  async getUserPayments(userId: string): Promise<Payment[]> {\n    return db\n      .select()\n      .from(payments)\n      .where(eq(payments.userId, userId))\n      .orderBy(desc(payments.createdAt));\n  }\n\n  async updatePaymentStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(payments)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(payments.id, id));\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId?: string, stripeSubscriptionId?: string): Promise<void> {\n    const updateData: any = { updatedAt: new Date() };\n    if (stripeCustomerId) updateData.stripeCustomerId = stripeCustomerId;\n    if (stripeSubscriptionId) updateData.stripeSubscriptionId = stripeSubscriptionId;\n    \n    await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, userId));\n  }\n\n  // Platform revenue operations\n  async createPlatformRevenue(revenue: InsertPlatformRevenue): Promise<PlatformRevenue> {\n    const [newRevenue] = await db.insert(platformRevenue).values(revenue).returning();\n    return newRevenue;\n  }\n\n  async getPlatformRevenue(): Promise<PlatformRevenue[]> {\n    return db\n      .select()\n      .from(platformRevenue)\n      .orderBy(desc(platformRevenue.createdAt));\n  }\n\n  async getTotalPlatformRevenue(): Promise<string> {\n    const [result] = await db\n      .select({ total: sql<string>`COALESCE(SUM(${platformRevenue.amount}), 0)` })\n      .from(platformRevenue);\n    return result.total || \"0.00\";\n  }\n\n  // Fee calculation utility (5% platform fee)\n  calculatePlatformFee(amount: string): { fee: string; netAmount: string; grossAmount: string } {\n    const grossAmount = parseFloat(amount);\n    const fee = Math.round(grossAmount * 0.05 * 100) / 100; // 5% fee, rounded to 2 decimals\n    const netAmount = Math.round((grossAmount - fee) * 100) / 100;\n    \n    return {\n      fee: fee.toFixed(2),\n      netAmount: netAmount.toFixed(2),\n      grossAmount: grossAmount.toFixed(2)\n    };\n  }\n\n  // Creator dashboard operations\n  async getAllUsers(): Promise<User[]> {\n    return db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getAllBounties(): Promise<Bounty[]> {\n    return db.select().from(bounties).orderBy(desc(bounties.createdAt));\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    return db.select().from(transactions).orderBy(desc(transactions.createdAt));\n  }\n\n  async getRecentActivity(limit: number = 50): Promise<Activity[]> {\n    return db\n      .select()\n      .from(activities)\n      .orderBy(desc(activities.createdAt))\n      .limit(limit);\n  }\n\n  async updateUserProfile(userId: string, profileData: { firstName?: string; lastName?: string; handle?: string; bio?: string; skills?: string; experience?: string }): Promise<void> {\n    const updateData: any = { \n      updatedAt: new Date(),\n      ...profileData\n    };\n    \n    await db\n      .update(users)\n      .set(updateData)\n      .where(eq(users.id, userId));\n  }\n\n  // Referral operations\n  async generateReferralCode(userId: string): Promise<string> {\n    // Generate a unique 8-character referral code\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let code = '';\n    \n    while (true) {\n      code = '';\n      for (let i = 0; i < 8; i++) {\n        code += characters.charAt(Math.floor(Math.random() * characters.length));\n      }\n      \n      // Check if code already exists\n      const existing = await db.select().from(users).where(eq(users.referralCode, code)).limit(1);\n      if (existing.length === 0) break;\n    }\n    \n    // Update user with the referral code\n    await db\n      .update(users)\n      .set({ referralCode: code, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n    \n    return code;\n  }\n\n  async getUserByReferralCode(referralCode: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.referralCode, referralCode));\n    return user;\n  }\n\n  async processReferralSignup(newUserId: string, referralCode: string): Promise<void> {\n    const referrer = await this.getUserByReferralCode(referralCode);\n    if (!referrer) return;\n\n    // Set the new user's referredBy field\n    await db\n      .update(users)\n      .set({ referredBy: referrer.id, updatedAt: new Date() })\n      .where(eq(users.id, newUserId));\n\n    // Update referrer's count and award points\n    await this.updateReferralCount(referrer.id);\n  }\n\n  async getUserReferrals(userId: string): Promise<User[]> {\n    return db\n      .select()\n      .from(users)\n      .where(eq(users.referredBy, userId))\n      .orderBy(desc(users.createdAt));\n  }\n\n  async updateReferralCount(userId: string): Promise<void> {\n    // Count current referrals\n    const [countResult] = await db\n      .select({ count: sql<number>`COUNT(*)` })\n      .from(users)\n      .where(eq(users.referredBy, userId));\n    \n    const newCount = countResult.count || 0;\n    const user = await this.getUser(userId);\n    const oldCount = user?.referralCount || 0;\n\n    // Update referral count\n    await db\n      .update(users)\n      .set({ referralCount: newCount, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n\n    // Award milestone points\n    const milestones = [1, 5, 10, 20];\n    for (const milestone of milestones) {\n      if (newCount >= milestone && oldCount < milestone) {\n        const pointsToAward = milestone === 1 ? 10 : milestone === 5 ? 50 : milestone === 10 ? 100 : 200;\n        \n        await this.updateUserPoints(userId, pointsToAward);\n        await this.createActivity({\n          userId,\n          type: \"referral_milestone\",\n          description: `Reached ${milestone} referral${milestone > 1 ? 's' : ''}! Earned ${pointsToAward} bonus points!`,\n          metadata: { milestone, pointsEarned: pointsToAward, totalReferrals: newCount },\n        });\n      }\n    }\n  }\n\n  // Boost operations\n  async boostBounty(bountyId: string, userId: string, boostLevel: number, pointsCost: number, durationHours: number): Promise<void> {\n    // Deduct points from user\n    const user = await this.getUser(userId);\n    if (!user || user.points < pointsCost) {\n      throw new Error(\"Insufficient points for boost\");\n    }\n\n    // Update user points\n    await this.updateUserPoints(userId, -pointsCost);\n\n    // Calculate expiry time\n    const expiresAt = new Date();\n    expiresAt.setHours(expiresAt.getHours() + durationHours);\n\n    // Update bounty with boost info\n    await db\n      .update(bounties)\n      .set({\n        boostLevel,\n        boostExpiresAt: expiresAt,\n        boostPurchasedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(bounties.id, bountyId));\n\n    // Record boost history\n    await db.insert(boostHistory).values({\n      bountyId,\n      userId,\n      boostLevel,\n      pointsCost,\n      durationHours,\n      expiresAt\n    });\n\n    // Create transaction record with proper point-to-dollar conversion\n    // Conversion rate: 200 points = $1, so 1 point = $0.005\n    const dollarAmount = (pointsCost * 0.005).toFixed(2);\n    await this.createTransaction({\n      userId,\n      bountyId,\n      type: \"spending\",\n      amount: dollarAmount,\n      status: \"completed\",\n      description: `Boosted bounty (Level ${boostLevel}) for ${durationHours} hours - ${pointsCost} points`\n    });\n\n    // Create activity\n    await this.createActivity({\n      userId,\n      type: \"bounty_boosted\",\n      description: `Boosted bounty for ${durationHours} hours (Level ${boostLevel})`,\n      metadata: { bountyId, boostLevel, pointsCost, durationHours }\n    });\n  }\n\n  async getActiveBounties(): Promise<Bounty[]> {\n    const now = new Date();\n    \n    // Get all active bounties and sort by boost level and creation date\n    const activeBounties = await db\n      .select()\n      .from(bounties)\n      .where(eq(bounties.status, \"active\"))\n      .orderBy(desc(bounties.boostLevel), desc(bounties.createdAt));\n\n    // Process bounties to include duplicates for boosted posts\n    const processedBounties: Bounty[] = [];\n    \n    for (const bounty of activeBounties) {\n      // Check if boost is still active\n      const isBoostActive = bounty.boostExpiresAt && bounty.boostExpiresAt > now;\n      const effectiveBoostLevel = isBoostActive ? (bounty.boostLevel || 0) : 0;\n      \n      // Add the bounty multiple times based on boost level\n      // Level 0 = 1 copy, Level 1 = 2 copies, Level 2 = 3 copies, Level 3 = 4 copies\n      const copies = effectiveBoostLevel + 1;\n      for (let i = 0; i < copies; i++) {\n        processedBounties.push(bounty);\n      }\n    }\n    \n    return processedBounties;\n  }\n\n  async updateExpiredBoosts(): Promise<void> {\n    const now = new Date();\n    \n    // Reset boost level for expired boosts\n    await db\n      .update(bounties)\n      .set({\n        boostLevel: 0,\n        updatedAt: new Date()\n      })\n      .where(\n        and(\n          sql`${bounties.boostExpiresAt} IS NOT NULL`,\n          sql`${bounties.boostExpiresAt} < ${now.toISOString()}`,\n          sql`${bounties.boostLevel} > 0`\n        )\n      );\n  }\n\n  // Data recovery method - can restore user data from backups if needed\n  async recoverUserData(userId: string): Promise<void> {\n    try {\n      // Get the most recent backup for this user\n      const [backup] = await db.execute(sql`\n        SELECT points, balance, lifetime_earned \n        FROM user_data_backups \n        WHERE user_id = ${userId}\n        ORDER BY backup_date DESC \n        LIMIT 1\n      `);\n      \n      if (backup) {\n        // Restore the user's data from backup\n        await db\n          .update(users)\n          .set({\n            points: backup.points,\n            balance: backup.balance,\n            lifetimeEarned: backup.lifetime_earned,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, userId));\n        \n        console.log(`[RECOVERY] Restored data for user ${userId} from backup`);\n      } else {\n        console.log(`[RECOVERY] No backup found for user ${userId}`);\n      }\n    } catch (error) {\n      console.error(`[RECOVERY] Failed to recover data for user ${userId}:`, error);\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":30491},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users: any = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  username: varchar(\"username\").unique(),\n  password: varchar(\"password\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  handle: varchar(\"handle\").unique(),\n  bio: text(\"bio\"),\n  points: integer(\"points\").default(0),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  lifetimeEarned: decimal(\"lifetime_earned\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  level: integer(\"level\").default(1),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  reviewCount: integer(\"review_count\").default(0),\n  isOnline: boolean(\"is_online\").default(false),\n  lastSeen: timestamp(\"last_seen\").defaultNow(),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  referralCode: varchar(\"referral_code\").unique(),\n  referredBy: varchar(\"referred_by\").references((): any => users.id),\n  referralCount: integer(\"referral_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_users_email\").on(table.email),\n  index(\"idx_users_username\").on(table.username),\n  index(\"idx_users_created_at\").on(table.createdAt),\n  index(\"idx_users_last_seen\").on(table.lastSeen),\n  index(\"idx_users_referral_code\").on(table.referralCode),\n  index(\"idx_users_referred_by\").on(table.referredBy),\n]);\n\nexport const bounties = pgTable(\"bounties\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  reward: decimal(\"reward\", { precision: 10, scale: 2 }).notNull(),\n  tags: text(\"tags\").array(),\n  duration: integer(\"duration\").notNull(), // days\n  status: varchar(\"status\", { length: 50 }).default(\"active\"), // active, completed, cancelled, expired\n  authorId: varchar(\"author_id\").references(() => users.id).notNull(),\n  claimedBy: varchar(\"claimed_by\").references(() => users.id),\n  completedAt: timestamp(\"completed_at\"),\n  boostLevel: integer(\"boost_level\").default(0), // 0 = no boost, 1-3 = boost levels\n  boostExpiresAt: timestamp(\"boost_expires_at\"),\n  boostPurchasedAt: timestamp(\"boost_purchased_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_bounties_status\").on(table.status),\n  index(\"idx_bounties_author_id\").on(table.authorId),\n  index(\"idx_bounties_claimed_by\").on(table.claimedBy),\n  index(\"idx_bounties_created_at\").on(table.createdAt),\n  index(\"idx_bounties_category\").on(table.category),\n  index(\"idx_bounties_boost_level\").on(table.boostLevel),\n  index(\"idx_bounties_boost_expires\").on(table.boostExpiresAt),\n]);\n\nexport const bountyApplications = pgTable(\"bounty_applications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bountyId: uuid(\"bounty_id\").references(() => bounties.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  message: text(\"message\"),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, accepted, rejected\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  bountyId: uuid(\"bounty_id\").references(() => bounties.id),\n  type: varchar(\"type\", { length: 50 }).notNull(), // earning, spending, payout\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, completed, failed\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_transactions_user_id\").on(table.userId),\n  index(\"idx_transactions_created_at\").on(table.createdAt),\n  index(\"idx_transactions_type\").on(table.type),\n]);\n\nexport const messageThreads = pgTable(\"message_threads\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  user1Id: varchar(\"user1_id\").references(() => users.id).notNull(),\n  user2Id: varchar(\"user2_id\").references(() => users.id).notNull(),\n  lastMessageAt: timestamp(\"last_message_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  threadId: uuid(\"thread_id\").references(() => messageThreads.id).notNull(),\n  senderId: varchar(\"sender_id\").references(() => users.id).notNull(),\n  content: text(\"content\").notNull(),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_messages_thread_id\").on(table.threadId),\n  index(\"idx_messages_sender_id\").on(table.senderId),\n  index(\"idx_messages_created_at\").on(table.createdAt),\n]);\n\nexport const friendships = pgTable(\"friendships\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requesterId: varchar(\"requester_id\").references(() => users.id).notNull(),\n  addresseeId: varchar(\"addressee_id\").references(() => users.id).notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // pending, accepted, declined\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const reviews = pgTable(\"reviews\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bountyId: uuid(\"bounty_id\").references(() => bounties.id).notNull(),\n  reviewerId: varchar(\"reviewer_id\").references(() => users.id).notNull(),\n  revieweeId: varchar(\"reviewee_id\").references(() => users.id).notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const activities = pgTable(\"activities\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: varchar(\"type\", { length: 100 }).notNull(),\n  description: text(\"description\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_activities_user_id\").on(table.userId),\n  index(\"idx_activities_created_at\").on(table.createdAt),\n]);\n\nexport const paymentMethods = pgTable(\"payment_methods\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  stripePaymentMethodId: varchar(\"stripe_payment_method_id\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // card, bank_account\n  last4: varchar(\"last4\", { length: 4 }),\n  brand: varchar(\"brand\", { length: 50 }), // visa, mastercard, etc\n  expiryMonth: integer(\"expiry_month\"),\n  expiryYear: integer(\"expiry_year\"),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const payments = pgTable(\"payments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  stripePaymentIntentId: varchar(\"stripe_payment_intent_id\").notNull(),\n  paymentMethodId: uuid(\"payment_method_id\").references(() => paymentMethods.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  platformFee: decimal(\"platform_fee\", { precision: 10, scale: 2 }).default(\"0.00\"), // 5% platform fee\n  netAmount: decimal(\"net_amount\", { precision: 10, scale: 2 }).notNull(), // amount after fees\n  currency: varchar(\"currency\", { length: 3 }).default(\"usd\"),\n  status: varchar(\"status\", { length: 50 }).notNull(), // pending, succeeded, failed\n  type: varchar(\"type\", { length: 50 }).notNull(), // deposit, withdrawal, bounty_payout\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Platform revenue tracking\nexport const platformRevenue = pgTable(\"platform_revenue\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionId: uuid(\"transaction_id\").references(() => payments.id),\n  bountyId: uuid(\"bounty_id\").references(() => bounties.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  source: varchar(\"source\", { length: 50 }).notNull(), // 'bounty_posting', 'bounty_completion', 'deposit', 'boost'\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_platform_revenue_created_at\").on(table.createdAt),\n  index(\"idx_platform_revenue_source\").on(table.source),\n]);\n\n// Boost history table\nexport const boostHistory = pgTable(\"boost_history\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bountyId: uuid(\"bounty_id\").references(() => bounties.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  boostLevel: integer(\"boost_level\").notNull(), // 1-3\n  pointsCost: integer(\"points_cost\").notNull(),\n  durationHours: integer(\"duration_hours\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_boost_history_bounty_id\").on(table.bountyId),\n  index(\"idx_boost_history_user_id\").on(table.userId),\n  index(\"idx_boost_history_created_at\").on(table.createdAt),\n]);\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  stripeCustomerId: true,\n  stripeSubscriptionId: true,\n  referralCode: true,\n  referredBy: true,\n  referralCount: true,\n  lastSeen: true,\n  isOnline: true,\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const registerSchema = insertUserSchema.extend({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\nexport const insertBountySchema = createInsertSchema(bounties).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n  claimedBy: true,\n  completedAt: true,\n}).extend({\n  title: z.string().min(5, \"Title must be at least 5 characters\").max(255, \"Title too long\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  category: z.string().min(1, \"Please select a category\"),\n  reward: z.union([z.string(), z.number()]).transform((val) => {\n    const num = typeof val === 'string' ? parseFloat(val) : val;\n    if (num < 5) throw new Error(\"Minimum reward is $5\");\n    if (num > 500) throw new Error(\"Maximum reward is $500\");\n    return num;\n  }),\n  duration: z.union([z.string(), z.number()]).transform((val) => {\n    const num = typeof val === 'string' ? parseInt(val) : val;\n    if (num < 1) throw new Error(\"Duration must be at least 1 day\");\n    if (num > 30) throw new Error(\"Maximum duration is 30 days\");\n    return num;\n  }),\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n  readAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFriendshipSchema = createInsertSchema(friendships).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  status: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPaymentMethodSchema = createInsertSchema(paymentMethods).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBoostHistorySchema = createInsertSchema(boostHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPlatformRevenueSchema = createInsertSchema(platformRevenue).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginData = z.infer<typeof loginSchema>;\nexport type RegisterData = z.infer<typeof registerSchema>;\nexport type Bounty = typeof bounties.$inferSelect;\nexport type InsertBounty = z.infer<typeof insertBountySchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type MessageThread = typeof messageThreads.$inferSelect;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Friendship = typeof friendships.$inferSelect;\nexport type InsertFriendship = z.infer<typeof insertFriendshipSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\nexport type BountyApplication = typeof bountyApplications.$inferSelect;\nexport type PaymentMethod = typeof paymentMethods.$inferSelect;\nexport type InsertPaymentMethod = z.infer<typeof insertPaymentMethodSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type BoostHistory = typeof boostHistory.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type InsertBoostHistory = z.infer<typeof insertBoostHistorySchema>;\nexport type PlatformRevenue = typeof platformRevenue.$inferSelect;\nexport type InsertPlatformRevenue = z.infer<typeof insertPlatformRevenueSchema>;\n","size_bytes":14865},"client/public/sw.js":{"content":"const CACHE_NAME = 'pocket-bounty-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json',\n];\n\n// Install event - cache resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        return cache.addAll(urlsToCache);\n      })\n      .catch((error) => {\n        // Cache initialization failed\n      })\n  );\n});\n\n// Fetch event - serve from cache when offline\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        \n        return fetch(event.request).then((response) => {\n          // Check if we received a valid response\n          if (!response || response.status !== 200 || response.type !== 'basic') {\n            return response;\n          }\n\n          // Clone the response\n          const responseToCache = response.clone();\n\n          caches.open(CACHE_NAME)\n            .then((cache) => {\n              cache.put(event.request, responseToCache);\n            });\n\n          return response;\n        });\n      })\n      .catch(() => {\n        // Return offline page if available\n        if (event.request.destination === 'document') {\n          return caches.match('/');\n        }\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Push notification event\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'New notification from Pocket Bounty',\n    icon: '/icon-192.png',\n    badge: '/icon-96.png',\n    vibrate: [100, 50, 100],\n    data: {\n      dateOfArrival: Date.now(),\n      primaryKey: 1\n    },\n    actions: [\n      {\n        action: 'explore',\n        title: 'View',\n        icon: '/icon-explore.png'\n      },\n      {\n        action: 'close',\n        title: 'Close',\n        icon: '/icon-close.png'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('Pocket Bounty', options)\n  );\n});\n\n// Notification click event\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n\n  if (event.action === 'explore') {\n    // Open the app\n    event.waitUntil(\n      clients.openWindow('/')\n    );\n  }\n});\n\n// Background sync for offline actions\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    event.waitUntil(doBackgroundSync());\n  }\n});\n\nfunction doBackgroundSync() {\n  // Handle background sync for offline actions\n  // This could include sending messages, applying to bounties, etc.\n  return Promise.resolve();\n}\n\n// Message event for communication with main thread\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n","size_bytes":3192},"client/src/App.tsx":{"content":"import { lazy, Suspense } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { DemoProvider } from \"@/contexts/DemoContext\";\nimport DemoIndicator from \"@/components/DemoIndicator\";\nimport PWAInstallPrompt from \"@/components/PWAInstallPrompt\";\n\n// Lazy load pages for better performance\nconst Landing = lazy(() => import(\"@/pages/Landing\"));\nconst AuthPage = lazy(() => import(\"@/pages/AuthPage\"));\nconst Home = lazy(() => import(\"@/pages/Home\"));\nconst Profile = lazy(() => import(\"@/pages/Profile\"));\nconst Account = lazy(() => import(\"@/pages/Account\"));\nconst CreatorInbox = lazy(() => import(\"@/pages/CreatorInbox\"));\nconst NotFound = lazy(() => import(\"@/pages/not-found\"));\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-2\">🪙</div>\n          <div className=\"text-lg font-semibold text-pocket-gold\">Pocket Bounty</div>\n          <div className=\"text-sm text-muted-foreground\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Suspense fallback={\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl mb-2\">🪙</div>\n          <div className=\"text-lg font-semibold text-pocket-gold\">Pocket Bounty</div>\n          <div className=\"text-sm text-muted-foreground\">Loading...</div>\n        </div>\n      </div>\n    }>\n      <Switch>\n        {!isAuthenticated ? (\n          <>\n            <Route path=\"/\" component={Landing} />\n            <Route path=\"/auth\" component={AuthPage} />\n            <Route path=\"/login\" component={AuthPage} />\n            <Route path=\"/signup\" component={AuthPage} />\n            <Route path=\"/create-account\" component={AuthPage} />\n          </>\n        ) : (\n          <>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/profile\" component={Profile} />\n            <Route path=\"/account\" component={Account} />\n            <Route path=\"/creator-inbox\" component={CreatorInbox} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </Suspense>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <DemoProvider>\n        <ThemeProvider>\n          <TooltipProvider>\n            <div className=\"relative\">\n              <Toaster />\n              <DemoIndicator />\n              <div className=\"fixed top-4 left-4 right-4 z-50 pointer-events-none\">\n                <div className=\"pointer-events-auto\">\n                  <PWAInstallPrompt />\n                </div>\n              </div>\n              <Router />\n              \n            </div>\n          </TooltipProvider>\n        </ThemeProvider>\n      </DemoProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3278},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Pocket Bounty Color Palette */\n  --pocket-red: hsl(8, 89%, 40%);\n  --pocket-red-dark: hsl(8, 89%, 30%);\n  --pocket-gold: hsl(33, 100%, 64%);\n  --pocket-gold-light: hsl(45, 100%, 71%);\n  \n  /* Dark Theme */\n  --dark-bg: hsl(240, 5%, 6%);\n  --dark-panel: hsl(240, 3%, 9%);\n  --dark-card: hsl(240, 4%, 12%);\n  --dark-line: hsl(240, 4%, 17%);\n  --dark-ink: hsl(0, 0%, 95%);\n  --dark-muted: hsl(0, 0%, 67%);\n  \n  /* Light Theme */\n  --light-bg: hsl(240, 9%, 96%);\n  --light-panel: hsl(0, 0%, 100%);\n  --light-card: hsl(0, 0%, 100%);\n  --light-line: hsl(0, 0%, 80%);\n  --light-ink: hsl(240, 9%, 7%);\n  --light-muted: hsl(0, 0%, 40%);\n  \n  /* Green Points System */\n  --points-bg: hsl(83, 61%, 12%);\n  --points-border: hsl(83, 32%, 22%);\n  --points-text: hsl(83, 73%, 80%);\n  \n  /* Purple Boost System */\n  --boost-bg: hsl(285, 45%, 12%);\n  --boost-border: hsl(285, 32%, 30%);\n  --boost-text: hsl(285, 88%, 84%);\n  \n  /* Safe area for mobile */\n  --safe-area-bottom: env(safe-area-inset-bottom, 0px);\n  \n  /* Shadcn/ui variables */\n  --background: hsl(240, 5%, 6%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(240, 4%, 12%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(240, 4%, 12%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(8, 89%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 4%, 17%);\n  --secondary-foreground: hsl(0, 0%, 95%);\n  --muted: hsl(240, 4%, 17%);\n  --muted-foreground: hsl(0, 0%, 67%);\n  --accent: hsl(240, 4%, 17%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(240, 4%, 17%);\n  --input: hsl(240, 4%, 17%);\n  --ring: hsl(8, 89%, 40%);\n  --radius: 0.75rem;\n}\n\n.light {\n  --background: hsl(240, 9%, 96%);\n  --foreground: hsl(240, 9%, 7%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 9%, 7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 9%, 7%);\n  --primary: hsl(8, 89%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 5%, 96%);\n  --secondary-foreground: hsl(240, 9%, 7%);\n  --muted: hsl(240, 5%, 96%);\n  --muted-foreground: hsl(0, 0%, 40%);\n  --accent: hsl(240, 5%, 96%);\n  --accent-foreground: hsl(240, 9%, 7%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 80%);\n  --input: hsl(240, 5%, 96%);\n  --ring: hsl(8, 89%, 40%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: 'Inter', system-ui, -apple-system, 'Segoe UI', Roboto, sans-serif;\n    padding-bottom: calc(66px + var(--safe-area-bottom));\n    transition: background-color 0.2s ease, color 0.2s ease;\n  }\n  \n  h1 {\n    @apply text-lg font-semibold;\n    color: var(--pocket-gold);\n  }\n  \n  a {\n    color: var(--pocket-gold);\n    text-decoration: none;\n  }\n}\n\n@layer components {\n  .points-pill {\n    @apply inline-flex items-center gap-1.5 px-2.5 py-1.5 rounded-full text-xs font-bold;\n    background: var(--points-bg);\n    border: 1px solid var(--points-border);\n    color: var(--points-text);\n  }\n  \n  .boost-pill {\n    @apply inline-flex items-center gap-1 px-2 py-0.5 rounded-full text-xs;\n    background: var(--boost-bg);\n    border: 1px solid var(--boost-border);\n    color: var(--boost-text);\n  }\n  \n  .tour-ring {\n    outline: 3px solid var(--pocket-gold-light);\n    border-radius: 12px;\n    box-shadow: 0 0 0 6px rgba(255, 219, 112, 0.28);\n    animation: pulse 1.2s ease-in-out infinite;\n  }\n  \n  .backdrop-blur-safari {\n    backdrop-filter: blur(6px) saturate(130%);\n    -webkit-backdrop-filter: blur(6px) saturate(130%);\n  }\n  \n  .theme-transition {\n    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;\n  }\n  \n  .slide-enter {\n    transform: translateX(-100%);\n    transition: transform 0.25s ease;\n  }\n  \n  .slide-enter-active {\n    transform: translateX(0);\n  }\n}\n\n@keyframes pulse {\n  0% { \n    box-shadow: 0 0 0 6px rgba(255, 219, 112, 0.28); \n  }\n  70% { \n    box-shadow: 0 0 0 16px rgba(255, 219, 112, 0); \n  }\n  100% { \n    box-shadow: 0 0 0 6px rgba(255, 219, 112, 0.28); \n  }\n}\n\n/* Custom scrollbar for webkit browsers */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--dark-panel);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--dark-line);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--dark-muted);\n}\n\n/* Light theme scrollbar */\n.light ::-webkit-scrollbar-track {\n  background: var(--light-panel);\n}\n\n.light ::-webkit-scrollbar-thumb {\n  background: var(--light-line);\n}\n\n.light ::-webkit-scrollbar-thumb:hover {\n  background: var(--light-muted);\n}\n","size_bytes":4886},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BottomNavigation.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface BottomNavigationProps {\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nexport function BottomNavigation({ activeSection, onSectionChange }: BottomNavigationProps) {\n  const navItems = [\n    { id: \"board\", icon: \"📋\", label: \"Board\" },\n    { id: \"account\", icon: \"💳\", label: \"Account\" },\n    { id: \"post\", icon: \"➕\", label: \"Post\" },\n    { id: \"messages\", icon: \"💬\", label: \"Messages\" },\n    { id: \"arcade\", icon: \"🎮\", label: \"Arcade\" },\n  ];\n\n  return (\n    <footer \n      className=\"fixed left-0 right-0 bottom-0 h-16 bg-card border-t border-border flex justify-around items-center theme-transition z-10\"\n      style={{ paddingBottom: \"var(--safe-area-bottom)\" }}\n    >\n      {navItems.map((item) => {\n        const isActive = activeSection === item.id;\n        return (\n          <Button\n            key={item.id}\n            variant=\"ghost\"\n            className={`flex-1 border-none bg-transparent text-xs flex flex-col items-center gap-0.5 pt-1.5 h-auto ${\n              isActive \n                ? \"text-pocket-red font-bold\" \n                : \"text-muted-foreground\"\n            }`}\n            onClick={() => onSectionChange(item.id)}\n            data-testid={`button-nav-${item.id}`}\n          >\n            <span className=\"text-xl leading-none\">{item.icon}</span>\n            <span>{item.label}</span>\n          </Button>\n        );\n      })}\n    </footer>\n  );\n}\n","size_bytes":1476},"client/src/components/DrawerMenu.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface DrawerMenuProps {\n  isOpen: boolean;\n  onClose: () => void;\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nexport function DrawerMenu({ isOpen, onClose, activeSection, onSectionChange }: DrawerMenuProps) {\n  const { user } = useAuth();\n\n  const handleSectionClick = (section: string) => {\n    onSectionChange(section);\n    onClose();\n  };\n\n  const menuItems = [\n    { id: \"board\", label: \"📋 Board\" },\n    { id: \"post\", label: \"➕ Post\" },\n    { id: \"messages\", label: \"💬 Messages\" },\n    { id: \"account\", label: \"💳 Account\" },\n    { id: \"profile\", label: \"👤 Profile\" },\n    { id: \"friends\", label: \"👥 Friends\" },\n    { id: \"activity\", label: \"🔔 Activity\" },\n    { id: \"referrals\", label: \"🎯 Share & Earn\" },\n    { id: \"points\", label: \"⭐ Buy Points\" },\n    ...(user?.id === \"46848986\" ? [\n      { id: \"admin\", label: \"👑 Creator Analytics\" },\n      { id: \"inbox\", label: \"📬 Creator Inbox\" },\n    ] : []),\n    { id: \"settings\", label: \"⚙️ Settings\" },\n    { id: \"arcade\", label: \"🎮 Arcade\" },\n  ];\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className={`fixed inset-0 bg-black/35 backdrop-blur-sm z-25 ${\n          isOpen ? \"block\" : \"hidden\"\n        }`}\n        onClick={onClose}\n        data-testid=\"drawer-backdrop\"\n      />\n      \n      {/* Drawer */}\n      <aside\n        className={`fixed left-0 top-0 bottom-0 w-4/5 max-w-80 bg-card border-r border-border transform transition-transform duration-300 ease-out z-30 flex flex-col theme-transition ${\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        }`}\n        aria-hidden={!isOpen}\n        data-testid=\"drawer-menu\"\n      >\n        <div className=\"flex items-center gap-2.5 p-3.5 border-b border-border\">\n          <div className=\"font-bold text-foreground\">Menu</div>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"text-user-handle\">\n            {user?.handle || \"@user\"}\n          </div>\n        </div>\n        \n        <nav className=\"grid p-2\">\n          {menuItems.map((item) => (\n            <Button\n              key={item.id}\n              variant=\"ghost\"\n              className=\"justify-start gap-2.5 text-left hover:bg-accent\"\n              onClick={() => handleSectionClick(item.id)}\n              data-testid={`button-nav-${item.id}`}\n            >\n              {item.label}\n            </Button>\n          ))}\n        </nav>\n        \n        <div className=\"mt-auto p-3 border-t border-border flex justify-between items-center\">\n          <div className=\"points-pill\" data-testid=\"display-points-drawer\">\n            <span className=\"text-base\">⭐</span>\n            <span>{user?.points || 0}</span>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"bg-secondary text-muted-foreground\"\n            data-testid=\"button-test-points\"\n          >\n            +10\n          </Button>\n        </div>\n      </aside>\n    </>\n  );\n}\n","size_bytes":3077},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface HeaderProps {\n  onMenuClick: () => void;\n}\n\nexport function Header({ onMenuClick }: HeaderProps) {\n  const { user } = useAuth();\n\n  return (\n    <header className=\"sticky top-0 z-20 bg-background/90 backdrop-blur-safari border-b border-border theme-transition\">\n      <div className=\"flex items-center justify-between gap-2.5 px-4 py-3.5\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onMenuClick}\n          className=\"border-border bg-transparent px-2 py-1 text-lg\"\n          aria-label=\"Open menu\"\n          data-testid=\"button-menu\"\n        >\n          ☰\n        </Button>\n        <div className=\"text-center\">\n          <h1 className=\"text-lg font-semibold text-pocket-gold m-0\">\n            🪙 Pocket Bounty\n          </h1>\n          <div className=\"text-xs text-muted-foreground/50 mt-0.5 leading-none\">\n            Built by Dallas Abbott\n          </div>\n        </div>\n        <div className=\"points-pill\" data-testid=\"display-points\">\n          <span className=\"text-base\">⭐</span>\n          <span>{user?.points || 0}</span>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1230},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"./Header\";\nimport { DrawerMenu } from \"./DrawerMenu\";\nimport { BottomNavigation } from \"./BottomNavigation\";\nimport FeedbackButton from \"./FeedbackButton\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nexport function Layout({ children, activeSection, onSectionChange }: LayoutProps) {\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground relative\">\n      <Header onMenuClick={() => setIsDrawerOpen(true)} />\n      \n      <DrawerMenu\n        isOpen={isDrawerOpen}\n        onClose={() => setIsDrawerOpen(false)}\n        activeSection={activeSection}\n        onSectionChange={onSectionChange}\n      />\n      \n      <main className=\"p-4\">\n        {children}\n      </main>\n      \n      <BottomNavigation\n        activeSection={activeSection}\n        onSectionChange={onSectionChange}\n      />\n      \n      <FeedbackButton />\n      \n    </div>\n  );\n}\n","size_bytes":1067},"client/src/components/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\"dark\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"pocket-bounty-theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"pocket-bounty-theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1283},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { useDemo } from \"@/contexts/DemoContext\";\n\nexport function useAuth() {\n  const { isDemoMode, demoUser } = useDemo();\n  \n  const { data: realUser, isLoading } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n    enabled: !isDemoMode, // Only fetch real user data when not in demo mode\n    refetchInterval: false, // Disable automatic polling\n    staleTime: 300000, // Consider data fresh for 5 minutes\n    refetchOnWindowFocus: true, // Only refetch when user focuses the window\n  });\n\n  // Return demo user data when in demo mode, otherwise real user data\n  const user = isDemoMode ? demoUser : realUser;\n  const isAuthenticated = isDemoMode ? true : !!realUser;\n\n  return {\n    user,\n    isLoading: isDemoMode ? false : isLoading,\n    isAuthenticated,\n  };\n}\n","size_bytes":879},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface UseWebSocketOptions {\n  onMessage?: (data: any) => void;\n  onOpen?: () => void;\n  onClose?: () => void;\n  onError?: (error: Event) => void;\n}\n\nexport function useWebSocket(options: UseWebSocketOptions = {}) {\n  const [isConnected, setIsConnected] = useState(false);\n  const websocketRef = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    websocketRef.current = ws;\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      options.onOpen?.();\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      options.onClose?.();\n    };\n\n    ws.onerror = (error) => {\n      options.onError?.(error);\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        options.onMessage?.(data);\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  const sendMessage = (data: any) => {\n    if (websocketRef.current?.readyState === WebSocket.OPEN) {\n      websocketRef.current.send(JSON.stringify(data));\n    }\n  };\n\n  return {\n    isConnected,\n    sendMessage,\n  };\n}\n","size_bytes":1369},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrency(amount: string | number): string {\n  const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(num);\n}\n\nexport function formatDate(date: string | Date): string {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - d.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) {\n    return 'just now';\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60);\n    return `${minutes}m ago`;\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600);\n    return `${hours}h ago`;\n  } else if (diffInSeconds < 604800) {\n    const days = Math.floor(diffInSeconds / 86400);\n    return `${days}d ago`;\n  } else {\n    return d.toLocaleDateString();\n  }\n}\n","size_bytes":1093},"client/src/pages/Activity.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatDate, formatCurrency } from \"@/lib/utils\";\n\nexport default function Activity() {\n  const { data: activities = [], isLoading } = useQuery({\n    queryKey: [\"/api/user/activities\"],\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case \"bounty_applied\":\n        return \"📝\";\n      case \"bounty_completed\":\n        return \"✅\";\n      case \"payment_received\":\n        return \"💰\";\n      case \"points_earned\":\n        return \"⭐\";\n      case \"friend_request\":\n        return \"👥\";\n      case \"level_up\":\n        return \"🎉\";\n      case \"review_received\":\n        return \"⭐\";\n      case \"bounty_posted\":\n        return \"📋\";\n      default:\n        return \"🔔\";\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case \"payment_received\":\n      case \"bounty_completed\":\n        return \"bg-green-600\";\n      case \"points_earned\":\n      case \"level_up\":\n        return \"bg-purple-600\";\n      case \"friend_request\":\n        return \"bg-blue-600\";\n      case \"review_received\":\n        return \"bg-orange-600\";\n      case \"bounty_posted\":\n      case \"bounty_applied\":\n        return \"bg-pocket-red\";\n      default:\n        return \"bg-secondary\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"h-6 bg-muted rounded w-32 animate-pulse mb-4\"></div>\n        {[...Array(5)].map((_, i) => (\n          <div key={i} className=\"bg-card border border-border rounded-xl p-3.5 animate-pulse\">\n            <div className=\"flex gap-2.5\">\n              <div className=\"w-8 h-8 bg-muted rounded-full\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-bold\">Activity Feed</h2>\n\n      <div className=\"space-y-3\">\n        {activities.length === 0 ? (\n          <Card className=\"theme-transition\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-4xl mb-4\">🎯</div>\n              <h3 className=\"text-lg font-semibold mb-3\">Ready to make moves?</h3>\n              <div className=\"max-w-md mx-auto space-y-4\">\n                <p className=\"text-muted-foreground\">\n                  Your activity feed will show all your accomplishments and interactions here.\n                </p>\n                <div className=\"bg-muted/30 rounded-lg p-4 text-left\">\n                  <h4 className=\"font-medium text-sm mb-2\">🌟 Activities you'll see:</h4>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>• Bounties you complete and earn from</li>\n                    <li>• New friend connections</li>\n                    <li>• Messages and collaboration updates</li>\n                    <li>• Points and level achievements</li>\n                  </ul>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  🚀 Tip: Stay active to climb the leaderboards and unlock rewards\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          activities.map((activity: any) => (\n            <Card \n              key={activity.id} \n              className=\"theme-transition\"\n              data-testid={`activity-${activity.id}`}\n            >\n              <CardContent className=\"p-3.5\">\n                <div className=\"flex gap-2.5\">\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${getActivityColor(activity.type)}`}>\n                    {getActivityIcon(activity.type)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"text-sm\" data-testid=\"text-activity-description\">\n                      {activity.description}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\" data-testid=\"text-activity-time\">\n                      {formatDate(activity.createdAt)}\n                    </div>\n                    \n                    {/* Special handling for certain activity types */}\n                    {activity.type === \"friend_request\" && activity.metadata?.status === \"pending\" && (\n                      <div className=\"flex gap-2 mt-2\">\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                          data-testid=\"button-accept-friend-request\"\n                        >\n                          Accept\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          data-testid=\"button-decline-friend-request\"\n                        >\n                          Decline\n                        </Button>\n                      </div>\n                    )}\n                    \n                    {activity.type === \"payment_received\" && activity.metadata?.amount && (\n                      <Badge className=\"bg-pocket-gold text-gray-900 mt-1\">\n                        +{formatCurrency(activity.metadata.amount)}\n                      </Badge>\n                    )}\n                    \n                    {activity.type === \"points_earned\" && activity.metadata?.points && (\n                      <Badge className=\"bg-purple-600 text-white mt-1\">\n                        +{activity.metadata.points} ⭐\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6113},"client/src/pages/Bank.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTransactions } from \"@/hooks/useTransactions\";\nimport { useDemo } from \"@/contexts/DemoContext\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport DemoLockOverlay from \"@/components/DemoLockOverlay\";\nimport type { Transaction } from \"@shared/schema\";\n\nexport default function Bank() {\n  const { user } = useAuth();\n  const { isDemoMode } = useDemo();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [payoutAmount, setPayoutAmount] = useState(\"\");\n  const [payoutMethod, setPayoutMethod] = useState(\"\");\n  const [showDemoLock, setShowDemoLock] = useState(false);\n  \n  const { transactions, isLoading } = useTransactions();\n  \n  const handleWithdrawal = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isDemoMode) {\n      setShowDemoLock(true);\n      return;\n    }\n    \n    const amount = parseFloat(payoutAmount);\n    if (amount < 5) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Minimum withdrawal amount is $5.00\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!payoutMethod) {\n      toast({\n        title: \"Select Method\",\n        description: \"Please select a payout method\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    withdrawalMutation.mutate({ amount: payoutAmount, method: payoutMethod });\n  };\n\n  const withdrawalMutation = useMutation({\n    mutationFn: async (data: { amount: string; method: string }) => {\n      return apiRequest(\"POST\", \"/api/payments/withdraw\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Withdrawal Requested\",\n        description: \"Your payout request has been submitted and will be processed within 1-2 business days.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      setPayoutAmount(\"\");\n      setPayoutMethod(\"\");\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      let errorMessage = \"Failed to request withdrawal\";\n      try {\n        const errorData = JSON.parse(error.message.split(': ').slice(1).join(': '));\n        errorMessage = errorData.message || errorMessage;\n      } catch {\n        errorMessage = error.message || errorMessage;\n      }\n      \n      toast({\n        title: \"Withdrawal Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-3 gap-2.5\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"bg-card border border-border rounded-xl p-3 animate-pulse\">\n              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n              <div className=\"h-6 bg-muted rounded\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-3 gap-2.5\">\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3\">\n            <h3 className=\"text-xs text-muted-foreground font-semibold mb-1.5\">\n              Available Balance\n            </h3>\n            <div className=\"text-lg font-bold text-pocket-gold\" data-testid=\"text-balance\">\n              {formatCurrency(user?.balance || \"0\")}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3\">\n            <h3 className=\"text-xs text-muted-foreground font-semibold mb-1.5\">\n              Lifetime Earned\n            </h3>\n            <div className=\"text-lg font-bold text-pocket-gold\" data-testid=\"text-lifetime-earned\">\n              {formatCurrency(user?.lifetimeEarned || \"0\")}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3\">\n            <h3 className=\"text-xs text-muted-foreground font-semibold mb-1.5\">\n              Points\n            </h3>\n            <div className=\"text-lg font-bold text-pocket-gold\" data-testid=\"text-points\">\n              {user?.points || 0}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Transactions */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Recent Transactions</h3>\n          {transactions.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <div className=\"text-4xl mb-4\">💎</div>\n              <h3 className=\"text-lg font-semibold mb-3 text-foreground\">Your earning journey starts here!</h3>\n              <div className=\"max-w-md mx-auto space-y-4\">\n                <p className=\"text-muted-foreground\">\n                  All your earnings and withdrawals will be tracked here.\n                </p>\n                <div className=\"bg-muted/30 rounded-lg p-4 text-left\">\n                  <h4 className=\"font-medium text-sm mb-2\">💡 How to start earning:</h4>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>• Find bounties that sound fun (or hilariously weird)</li>\n                    <li>• Jump in with a quick \"I can do this!\" message</li>\n                    <li>• Do the thing and have some fun with it</li>\n                    <li>• Money hits your account instantly! ⚡</li>\n                  </ul>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  🎯 Mission: Get your first weird bounty and join the fun!\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {transactions.slice(0, 5).map((transaction) => (\n                <div \n                  key={transaction.id} \n                  className=\"flex justify-between items-center\"\n                  data-testid={`transaction-${transaction.id}`}\n                >\n                  <div>\n                    <div className=\"text-sm font-medium\">\n                      {transaction.description}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {formatDate(transaction.createdAt || new Date())}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`text-sm font-bold ${\n                      transaction.type === \"earning\" ? \"text-green-400\" : \"text-red-400\"\n                    }`}>\n                      {transaction.type === \"earning\" ? \"+\" : \"-\"}\n                      {formatCurrency(transaction.amount)}\n                    </div>\n                    <Badge \n                      variant={transaction.status === \"completed\" ? \"default\" : \"secondary\"}\n                      className={transaction.status === \"completed\" \n                        ? \"bg-pocket-gold text-gray-900\" \n                        : \"bg-orange-500 text-white\"\n                      }\n                    >\n                      {(transaction.status || 'pending').toUpperCase()}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Cash Out Section */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Cash Out</h3>\n          <form onSubmit={handleWithdrawal} className=\"space-y-3\">\n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1.5\">\n                Payment Method\n              </Label>\n              <Select value={payoutMethod} onValueChange={setPayoutMethod}>\n                <SelectTrigger data-testid=\"select-payment-method\">\n                  <SelectValue placeholder=\"Select payment method\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                  <SelectItem value=\"debit_card\">Instant Debit Card</SelectItem>\n                  <SelectItem value=\"cash_app\">Cash App</SelectItem>\n                  <SelectItem value=\"paypal\">PayPal (Coming Soon)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label className=\"text-xs text-muted-foreground mb-1.5\">\n                Amount (Min: $5.00)\n              </Label>\n              <div className=\"relative\">\n                <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">$</span>\n                <Input \n                  type=\"tel\"\n                  pattern=\"[0-9]*\\.?[0-9]*\"\n                  placeholder=\"5.00\" \n                  value={payoutAmount}\n                  onChange={(e) => setPayoutAmount(e.target.value)}\n                  className=\"pl-8\"\n                  data-testid=\"input-payout-amount\"\n                />\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Available: {formatCurrency(user?.balance || \"0\")}\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\"\n              className=\"w-full bg-pocket-red hover:bg-pocket-red-dark text-white\"\n              disabled={withdrawalMutation.isPending || !payoutMethod || !payoutAmount}\n              data-testid=\"button-request-payout\"\n            >\n              {withdrawalMutation.isPending ? \"Processing...\" : \"Request Payout\"}\n            </Button>\n            \n            <div className=\"text-xs text-muted-foreground text-center\">\n              Payouts are processed within 1-2 business days.\n              <br />Bank transfers are free, instant debit has a small fee.\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n      \n      {showDemoLock && (\n        <DemoLockOverlay\n          action=\"Withdraw money\"\n          onClose={() => setShowDemoLock(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":11113},"client/src/pages/Board.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, Lock, Rocket } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useBounties } from \"@/hooks/useBounties\";\nimport { useDemo } from \"@/contexts/DemoContext\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport DemoLockOverlay from \"@/components/DemoLockOverlay\";\nimport BoostDialog from \"@/components/BoostDialog\";\nimport { navigateToLogin } from \"@/lib/navigation\";\nimport type { Bounty } from \"@shared/schema\";\n\nexport default function Board() {\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [favoritedBounties, setFavoritedBounties] = useState<Set<string>>(new Set());\n  const [showDemoLock, setShowDemoLock] = useState(false);\n  const [boostBountyId, setBoostBountyId] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const { isDemoMode } = useDemo();\n  const queryClient = useQueryClient();\n\n  const { bounties, isLoading } = useBounties();\n\n  const handleApply = (bountyId: string) => {\n    if (isDemoMode) {\n      setShowDemoLock(true);\n      return;\n    }\n    applyMutation.mutate(bountyId);\n  };\n\n  const applyMutation = useMutation({\n    mutationFn: async (bountyId: string) => {\n      return apiRequest(\"POST\", `/api/bounties/${bountyId}/apply`, {\n        message: \"I'd like to work on this bounty!\"\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Application Sent!\",\n        description: \"Your application has been submitted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bounties\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to apply to bounty. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFavorite = (bountyId: string) => {\n    const isFavorited = favoritedBounties.has(bountyId);\n    const newFavorites = new Set(favoritedBounties);\n    \n    if (isFavorited) {\n      newFavorites.delete(bountyId);\n      toast({\n        title: \"Removed from Favorites\",\n        description: \"Bounty removed from your favorites.\",\n      });\n    } else {\n      newFavorites.add(bountyId);\n      toast({\n        title: \"Added to Favorites\",\n        description: \"Bounty saved to your favorites!\",\n      });\n    }\n    \n    setFavoritedBounties(newFavorites);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"h-6 bg-muted rounded w-48 animate-pulse\"></div>\n          <div className=\"h-9 bg-muted rounded w-32 animate-pulse\"></div>\n        </div>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-card border border-border rounded-xl p-3.5 animate-pulse\">\n            <div className=\"h-4 bg-muted rounded mb-2\"></div>\n            <div className=\"h-8 bg-muted rounded mb-2\"></div>\n            <div className=\"h-4 bg-muted rounded\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-bold\">Available Bounties</h2>\n        <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n          <SelectTrigger className=\"w-40\" data-testid=\"select-category-filter\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Bounties</SelectItem>\n            <SelectItem value=\"quick_cash\">💵 Quick Cash ($5-15)</SelectItem>\n            <SelectItem value=\"good_money\">💰 Good Money ($16-50)</SelectItem>\n            <SelectItem value=\"big_bucks\">💎 Big Bucks ($51-100)</SelectItem>\n            <SelectItem value=\"major_bag\">🏆 Major Bag ($100+)</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Bounties List */}\n      <div className=\"space-y-3\">\n        {(bounties as Bounty[]).length === 0 ? (\n          <Card className=\"theme-transition\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-4xl mb-4\">🚀</div>\n              <h3 className=\"text-lg font-semibold mb-3\">Ready to get things done?</h3>\n              <div className=\"max-w-md mx-auto space-y-4\">\n                <p className=\"text-muted-foreground\">\n                  {selectedCategory === \"all\" \n                    ? \"No bounties posted yet. Be the pioneer who gets this community started!\"\n                    : `No bounties in this price range yet. Perfect opportunity to be first!`\n                  }\n                </p>\n                <div className=\"bg-muted/30 rounded-lg p-4 text-left\">\n                  <h4 className=\"font-medium text-sm mb-2\">💡 Bounty ideas that actually exist:</h4>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>• \"Rate my outfit for a first date 👗 - $8\"</li>\n                    <li>• \"Help me name my pet rock 🪨 - $12\"</li>\n                    <li>• \"Tell me if this meme is funny 😂 - $5\"</li>\n                  </ul>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  🎯 Tip: Weird pays well here - embrace the chaos!\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          (bounties as Bounty[]).map((bounty: Bounty) => (\n            <Card key={bounty.id} className=\"theme-transition\" data-testid={`bounty-${bounty.id}`}>\n              <CardContent className=\"p-3.5\">\n                <div className=\"flex justify-between items-start gap-3\">\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-sm font-semibold mb-1.5\" data-testid=\"text-bounty-title\">\n                      {bounty.title}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mb-2\" data-testid=\"text-bounty-description\">\n                      {bounty.description}\n                    </p>\n                    \n                    {/* Tags */}\n                    <div className=\"flex flex-wrap gap-1.5 mb-2\">\n                      <Badge variant=\"secondary\">{bounty.category}</Badge>\n                      {bounty.tags?.map((tag: string, index: number) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                    \n                    <div className=\"text-xs text-muted-foreground\">\n                      <span>Posted by </span>\n                      <span className=\"text-foreground font-medium\">@{bounty.authorId}</span>\n                      <span> • {formatDate(bounty.createdAt || new Date())}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-pocket-gold mb-1\" data-testid=\"text-bounty-reward\">\n                      {formatCurrency(bounty.reward)}\n                    </div>\n                    {(bounty.boostLevel || 0) > 0 && bounty.boostExpiresAt && new Date(bounty.boostExpiresAt) > new Date() && (\n                      <div className=\"boost-pill\">\n                        <span>🚀</span>\n                        <span>Boost {bounty.boostLevel}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2 mt-3\">\n                  <Button\n                    className=\"bg-pocket-red hover:bg-pocket-red-dark text-white flex-1\"\n                    onClick={() => handleApply(bounty.id)}\n                    disabled={applyMutation.isPending || bounty.authorId === user?.id}\n                    data-testid={`button-apply-${bounty.id}`}\n                  >\n                    {bounty.authorId === user?.id ? \"Your Bounty\" : \"Apply\"}\n                    {isDemoMode && bounty.authorId !== user?.id && (\n                      <Lock className=\"h-3 w-3 ml-2\" />\n                    )}\n                  </Button>\n                  {bounty.authorId === user?.id && bounty.status === \"active\" && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => setBoostBountyId(bounty.id)}\n                      data-testid={`button-boost-${bounty.id}`}\n                      title=\"Boost this bounty\"\n                    >\n                      <Rocket className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={() => handleFavorite(bounty.id)}\n                    data-testid={`button-favorite-${bounty.id}`}\n                  >\n                    <Heart \n                      className={`h-4 w-4 ${favoritedBounties.has(bounty.id) ? 'fill-red-500 text-red-500' : ''}`} \n                    />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n      \n      {showDemoLock && (\n        <DemoLockOverlay\n          action=\"Apply to bounties\"\n          onClose={() => setShowDemoLock(false)}\n        />\n      )}\n      {boostBountyId && (\n        <BoostDialog \n          bountyId={boostBountyId} \n          userPoints={user?.points || 0}\n          onClose={() => setBoostBountyId(null)} \n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10410},"client/src/pages/FlappyGame.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface GameState {\n  bird: { x: number; y: number; velocity: number };\n  pipes: Array<{ x: number; topHeight: number; bottomY: number; bottomHeight: number; scored: boolean }>;\n  score: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n}\n\nconst GRAVITY = 0.4; // Reduced gravity for easier play\nconst FLAP_STRENGTH = -10; // Stronger flap for easier control\nconst PIPE_WIDTH = 40; // Made wider for larger canvas\nconst PIPE_GAP = 180; // Much larger gap for easier navigation\nconst PIPE_SPEED = 1.5; // Slower pipes for easier timing\n\nexport default function FlappyGame() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const [gameState, setGameState] = useState<GameState>({\n    bird: { x: 120, y: 300, velocity: 0 }, // Adjusted for much larger canvas\n    pipes: [],\n    score: 0,\n    gameStatus: \"waiting\",\n  });\n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"flappy-best-score\") || \"0\", 10);\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n  const [devMode, setDevMode] = useState(false);\n  const [godMode, setGodMode] = useState(false);\n  const [showDevButton, setShowDevButton] = useState(false);\n  const [cloudOffset, setCloudOffset] = useState(0);\n  \n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Flappy Bird game - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 5)} points for your score!`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    },\n  });\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      bird: { x: 120, y: 300, velocity: 0 }, // Adjusted for much larger canvas\n      pipes: [],\n      score: 0,\n      gameStatus: \"waiting\",\n    });\n  }, []);\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  const startGame = useCallback(() => {\n    setGameState(prev => ({\n      ...prev,\n      gameStatus: \"playing\",\n      bird: { ...prev.bird, velocity: FLAP_STRENGTH },\n    }));\n  }, []);\n\n  const flap = useCallback(() => {\n    setGameState(prev => ({\n      ...prev,\n      bird: { ...prev.bird, velocity: FLAP_STRENGTH },\n    }));\n  }, []);\n\n  const gameOver = useCallback(() => {\n    setGameState(prev => {\n      const newBestScore = Math.max(bestScore, prev.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"flappy-best-score\", newBestScore.toString());\n      }\n      \n      // Award points (1 point per 5 score points - better rewards!)\n      const pointsEarned = Math.floor(prev.score / 5);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n      \n      return { ...prev, gameStatus: \"gameover\" };\n    });\n  }, [bestScore, awardPointsMutation]);\n\n  const gameLoop = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      const newState = { ...prev };\n      \n      // Update bird physics\n      newState.bird = {\n        ...prev.bird,\n        velocity: prev.bird.velocity + GRAVITY,\n        y: prev.bird.y + prev.bird.velocity,\n      };\n\n      // Generate pipes (adjusted for much larger canvas)\n      if (newState.pipes.length === 0 || newState.pipes[newState.pipes.length - 1].x < 700 - 350) {\n        const pipeHeight = Math.random() * (600 - PIPE_GAP - 80) + 40;\n        newState.pipes.push({\n          x: 700,\n          topHeight: pipeHeight,\n          bottomY: pipeHeight + PIPE_GAP,\n          bottomHeight: 600 - pipeHeight - PIPE_GAP,\n          scored: false,\n        });\n      }\n\n      // Update pipes\n      newState.pipes = newState.pipes\n        .map(pipe => ({ ...pipe, x: pipe.x - PIPE_SPEED }))\n        .filter(pipe => pipe.x > -PIPE_WIDTH);\n\n      // Score\n      newState.pipes.forEach(pipe => {\n        if (!pipe.scored && pipe.x + PIPE_WIDTH < newState.bird.x) {\n          pipe.scored = true;\n          newState.score++;\n        }\n      });\n\n      // Collision detection (adjusted for much larger canvas)\n      if (!godMode && (newState.bird.y < 0 || newState.bird.y > 600 - 20)) {\n        return { ...newState, gameStatus: \"gameover\" };\n      }\n\n      // Keep bird in bounds in god mode\n      if (godMode) {\n        if (newState.bird.y < 0) newState.bird.y = 0;\n        if (newState.bird.y > 600 - 20) newState.bird.y = 600 - 20;\n      }\n\n      // Pipe collision (skip in god mode)\n      if (!godMode) {\n        for (const pipe of newState.pipes) {\n          if (\n            newState.bird.x + 20 > pipe.x &&\n            newState.bird.x < pipe.x + PIPE_WIDTH &&\n            (newState.bird.y < pipe.topHeight || newState.bird.y + 20 > pipe.bottomY)\n          ) {\n            return { ...newState, gameStatus: \"gameover\" };\n          }\n        }\n      }\n\n      return newState;\n    });\n  }, []);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw sky background\n    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n    gradient.addColorStop(0, \"#87CEEB\");\n    gradient.addColorStop(1, \"#87CEFA\");\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw animated clouds\n    ctx.fillStyle = \"#ffffff\";\n    const numClouds = 5;\n    for (let i = 0; i < numClouds; i++) {\n      const x = (i * 80 + cloudOffset) % (canvas.width + 60) - 30;\n      const y = 20 + (i % 3) * 25;\n      \n      // Cloud made of circles\n      ctx.beginPath();\n      ctx.arc(x, y, 12, 0, Math.PI * 2);\n      ctx.arc(x + 12, y, 16, 0, Math.PI * 2);\n      ctx.arc(x + 24, y, 12, 0, Math.PI * 2);\n      ctx.arc(x + 6, y - 8, 10, 0, Math.PI * 2);\n      ctx.arc(x + 18, y - 8, 10, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Draw Mario-style pipes\n    gameState.pipes.forEach(pipe => {\n      // Pipe body (green)\n      ctx.fillStyle = \"#228B22\";\n      \n      // Top pipe body\n      ctx.fillRect(pipe.x + 2, 0, PIPE_WIDTH - 4, pipe.topHeight - 8);\n      // Top pipe cap\n      ctx.fillStyle = \"#32CD32\";\n      ctx.fillRect(pipe.x, pipe.topHeight - 8, PIPE_WIDTH, 8);\n      \n      // Pipe highlight\n      ctx.fillStyle = \"#90EE90\";\n      ctx.fillRect(pipe.x + 3, 0, 3, pipe.topHeight - 8);\n      ctx.fillRect(pipe.x + 1, pipe.topHeight - 8, 3, 8);\n      \n      // Bottom pipe body\n      ctx.fillStyle = \"#228B22\";\n      ctx.fillRect(pipe.x + 2, pipe.bottomY + 8, PIPE_WIDTH - 4, pipe.bottomHeight - 8);\n      // Bottom pipe cap\n      ctx.fillStyle = \"#32CD32\";\n      ctx.fillRect(pipe.x, pipe.bottomY, PIPE_WIDTH, 8);\n      \n      // Pipe highlight\n      ctx.fillStyle = \"#90EE90\";\n      ctx.fillRect(pipe.x + 3, pipe.bottomY + 8, 3, pipe.bottomHeight - 8);\n      ctx.fillRect(pipe.x + 1, pipe.bottomY, 3, 8);\n    });\n\n    // Draw cartoon bird\n    const birdX = gameState.bird.x;\n    const birdY = gameState.bird.y;\n    \n    // Bird body (yellow circle)\n    ctx.fillStyle = \"#FFD700\";\n    ctx.beginPath();\n    ctx.arc(birdX + 10, birdY + 10, 10, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Bird wing (orange)\n    ctx.fillStyle = \"#FF8C00\";\n    ctx.beginPath();\n    ctx.ellipse(birdX + 6, birdY + 8, 6, 4, Math.PI / 6, 0, Math.PI * 2);\n    ctx.fill();\n    \n    // Bird beak (orange)\n    ctx.fillStyle = \"#FF4500\";\n    ctx.beginPath();\n    ctx.moveTo(birdX + 18, birdY + 10);\n    ctx.lineTo(birdX + 22, birdY + 8);\n    ctx.lineTo(birdX + 18, birdY + 12);\n    ctx.fill();\n    \n    // Bird eye (white circle with black pupil)\n    ctx.fillStyle = \"#ffffff\";\n    ctx.beginPath();\n    ctx.arc(birdX + 12, birdY + 6, 3, 0, Math.PI * 2);\n    ctx.fill();\n    \n    ctx.fillStyle = \"#000000\";\n    ctx.beginPath();\n    ctx.arc(birdX + 13, birdY + 6, 1.5, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw score with shadow\n    ctx.fillStyle = \"#000000\";\n    ctx.font = \"bold 24px Inter, sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(gameState.score.toString(), canvas.width / 2 + 2, 32);\n    \n    ctx.fillStyle = \"#ffffff\";\n    ctx.fillText(gameState.score.toString(), canvas.width / 2, 30);\n\n    // Dev mode overlays\n    if (devMode) {\n      // Bird hitbox\n      ctx.strokeStyle = \"#ff0000\";\n      ctx.lineWidth = 2;\n      ctx.strokeRect(gameState.bird.x, gameState.bird.y, 20, 20);\n      \n      // Pipe hitboxes\n      ctx.strokeStyle = \"#00ff00\";\n      gameState.pipes.forEach(pipe => {\n        ctx.strokeRect(pipe.x, 0, PIPE_WIDTH, pipe.topHeight);\n        ctx.strokeRect(pipe.x, pipe.bottomY, PIPE_WIDTH, pipe.bottomHeight);\n      });\n      \n      // Debug info\n      ctx.fillStyle = \"#ffffff\";\n      ctx.font = \"12px monospace\";\n      ctx.textAlign = \"left\";\n      ctx.fillText(`Bird Y: ${Math.round(gameState.bird.y)}`, 5, 20);\n      ctx.fillText(`Velocity: ${Math.round(gameState.bird.velocity * 10) / 10}`, 5, 35);\n      ctx.fillText(`Pipes: ${gameState.pipes.length}`, 5, 50);\n    }\n  }, [gameState, cloudOffset, devMode]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(() => {\n        gameLoop();\n        setCloudOffset(prev => (prev + 0.2) % 400); // Animate clouds\n      }, 1000 / 60); // 60 FPS\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameLoop]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      gameOver();\n    }\n  }, [gameState.gameStatus, gameOver]);\n\n  // Hidden dev mode activation (Ctrl+Shift+D)\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.key === 'D') {\n        e.preventDefault();\n        setShowDevButton(true);\n        toast({\n          title: \"Dev Mode Unlocked!\",\n          description: \"Developer controls are now available.\",\n        });\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [toast]);\n\n  const handleCanvasClick = () => {\n    if (gameState.gameStatus === \"waiting\") {\n      startGame();\n    } else if (gameState.gameStatus === \"playing\") {\n      flap();\n    } else if (gameState.gameStatus === \"gameover\") {\n      resetGame();\n    }\n  };\n\n  const mockLeaderboard = [\n    { name: \"Sarah Writer\", score: 156 },\n    { name: \"Mike Tester\", score: 142 },\n    { name: \"Jane Designer\", score: 138 },\n    { name: \"You\", score: bestScore, isCurrentUser: true },\n  ].sort((a, b) => b.score - a.score);\n\n  return (\n    <div ref={gameContainerRef} className={`space-y-4 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 overflow-auto' : ''}`}>\n      <div className=\"text-center\">\n        <div className=\"relative inline-block\">\n          <h2 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-yellow-400 to-orange-600 bg-clip-text text-transparent\">🐤 Flappy Bounty</h2>\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-yellow-400 to-orange-600 rounded-lg blur opacity-20 animate-pulse\"></div>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">Fly through pipes and earn bonus points!</p>\n      </div>\n\n      {/* Game Canvas - Made larger */}\n      <Card className=\"theme-transition shadow-2xl border-2 border-yellow-500/20\">\n        <CardContent className=\"p-2 bg-gradient-to-b from-sky-100 to-blue-100 dark:from-sky-950/30 dark:to-blue-950/30\">\n          <div className=\"relative w-full bg-gradient-to-b from-blue-400 to-blue-600 rounded-lg overflow-hidden\">\n            <canvas\n              ref={canvasRef}\n              width={700}\n              height={600}\n              className=\"w-full h-[500px] cursor-pointer\"\n              onClick={handleCanvasClick}\n              data-testid=\"canvas-flappy-game\"\n            />\n            \n            {/* Game Overlay */}\n            {gameState.gameStatus !== \"playing\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-white bg-black/30\">\n                <div className=\"text-center\">\n                  {gameState.gameStatus === \"waiting\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">🐤 Tap to Play</div>\n                      <div className=\"text-sm\">Score: {gameState.score}</div>\n                    </>\n                  )}\n                  \n                  {gameState.gameStatus === \"gameover\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">Game Over!</div>\n                      <div className=\"text-sm mb-2\">Score: {gameState.score}</div>\n                      <div className=\"text-xs\">Tap to play again</div>\n                      {gameState.score > bestScore && (\n                        <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Game Controls */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\" data-testid=\"badge-current-score\">\n              Score: <span className=\"font-bold\">{gameState.score}</span>\n            </Badge>\n            <Badge variant=\"outline\" data-testid=\"badge-best-score\">\n              Best: <span className=\"font-bold\">{bestScore}</span>\n            </Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"px-2\"\n            >\n              {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={resetGame}\n              data-testid=\"button-reset-game\"\n            >\n              Reset\n            </Button>\n            {showDevButton && (\n              <Button\n                variant={devMode ? \"default\" : \"outline\"}\n                onClick={() => setDevMode(!devMode)}\n                size=\"sm\"\n                data-testid=\"button-dev-mode\"\n              >\n                🛠️ Dev\n              </Button>\n            )}\n            {devMode && (\n              <Button\n                variant={godMode ? \"default\" : \"outline\"}\n                onClick={() => setGodMode(!godMode)}\n                size=\"sm\"\n                data-testid=\"button-god-mode\"\n                className={godMode ? \"bg-yellow-500 hover:bg-yellow-600 text-black\" : \"\"}\n              >\n                ⚡ God\n              </Button>\n            )}\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : handleCanvasClick}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n              data-testid=\"button-play-game\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Flap\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Dev Menu */}\n      {devMode && (\n        <Card className=\"theme-transition border-orange-500\">\n          <CardContent className=\"p-3.5\">\n            <h3 className=\"text-sm font-semibold mb-3 text-orange-500\">🛠️ Developer Menu</h3>\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div className=\"space-y-1\">\n                <div><strong>Bird Position:</strong></div>\n                <div>X: {Math.round(gameState.bird.x)}</div>\n                <div>Y: {Math.round(gameState.bird.y)}</div>\n                <div>Velocity: {Math.round(gameState.bird.velocity * 10) / 10}</div>\n              </div>\n              <div className=\"space-y-1\">\n                <div><strong>Game State:</strong></div>\n                <div>Status: {gameState.gameStatus}</div>\n                <div>Pipes: {gameState.pipes.length}</div>\n                <div>Cloud Offset: {Math.round(cloudOffset)}</div>\n              </div>\n            </div>\n            <div className=\"flex gap-2 mt-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setGameState(prev => ({\n                  ...prev,\n                  bird: { ...prev.bird, y: prev.bird.y - 50 }\n                }))}\n                data-testid=\"button-dev-bird-up\"\n              >\n                ⬆️ Bird Up\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setGameState(prev => ({\n                  ...prev,\n                  bird: { ...prev.bird, y: prev.bird.y + 50 }\n                }))}\n                data-testid=\"button-dev-bird-down\"\n              >\n                ⬇️ Bird Down\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setGameState(prev => ({\n                  ...prev,\n                  score: prev.score + 10\n                }))}\n                data-testid=\"button-dev-add-score\"\n              >\n                +10 Score\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setGameState(prev => ({\n                  ...prev,\n                  pipes: []\n                }))}\n                data-testid=\"button-dev-clear-pipes\"\n              >\n                Clear Pipes\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Leaderboard */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Leaderboard</h3>\n          <div className=\"space-y-2\">\n            {mockLeaderboard.map((player, index) => (\n              <div\n                key={`${player.name}-${index}`}\n                className={`flex justify-between items-center ${\n                  player.isCurrentUser ? \"bg-pocket-red/20 p-2 rounded-lg\" : \"\"\n                }`}\n                data-testid={`leaderboard-${index}`}\n              >\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-bold\">\n                    {index === 0 && \"🥇\"}\n                    {index === 1 && \"🥈\"}\n                    {index === 2 && \"🥉\"}\n                    {index > 2 && `${index + 1}th`}\n                  </span>\n                  <span className={`text-sm ${player.isCurrentUser ? \"font-bold\" : \"\"}`}>\n                    {player.name}\n                  </span>\n                </div>\n                <span className={`text-sm ${player.isCurrentUser ? \"text-pocket-gold font-bold\" : \"text-muted-foreground\"}`}>\n                  {player.score} pts\n                </span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Instructions */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Tap anywhere to make the bird flap</li>\n            <li>• Avoid hitting the pipes or ground</li>\n            <li>• Earn 1 ⭐ for every 10 points scored</li>\n            <li>• Beat your best score to climb the leaderboard!</li>\n          </ul>\n        </CardContent>\n      </Card>\n      {/* Mobile Controls */}\n      <div className=\"flex justify-center sm:hidden\">\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"h-20 w-32 text-lg bg-yellow-500 hover:bg-yellow-600 text-white\"\n          onTouchStart={flap}\n          onClick={flap}\n        >\n          🐤 FLAP\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21830},"client/src/pages/Friends.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, UserPlus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Friendship, User } from \"@shared/schema\";\n\nexport default function Friends() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [userSearchTerm, setUserSearchTerm] = useState(\"\");\n  const [showUserSearch, setShowUserSearch] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user: currentUser } = useAuth();\n\n  const { data: friends = [], isLoading: friendsLoading } = useQuery<(Friendship & { friend: User })[]>({\n    queryKey: [\"/api/friends\"],\n  });\n\n  const { data: friendRequests = [], isLoading: requestsLoading } = useQuery<(Friendship & { requester: User })[]>({\n    queryKey: [\"/api/friends/requests\"],\n  });\n\n  const respondToRequestMutation = useMutation({\n    mutationFn: async ({ requestId, status }: { requestId: string; status: string }) => {\n      return apiRequest(\"PATCH\", `/api/friends/${requestId}`, { status });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Friend request updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends/requests\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update friend request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getInitials = (user: any) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    return user.handle?.[1]?.toUpperCase() || \"U\";\n  };\n\n  const getDisplayName = (user: any) => {\n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    return user.handle || user.email || \"Unknown User\";\n  };\n\n  const { data: searchResults = [], isLoading: searchLoading } = useQuery<User[]>({\n    queryKey: [`/api/users/search?searchTerm=${userSearchTerm}`],\n    enabled: userSearchTerm.length > 0 && showUserSearch,\n  });\n\n  const sendFriendRequestMutation = useMutation({\n    mutationFn: async (recipientId: string) => {\n      return apiRequest(\"POST\", \"/api/friends/request\", { addresseeId: recipientId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Friend request sent!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/friends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/search\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send friend request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFindFriends = () => {\n    setShowUserSearch(!showUserSearch);\n    if (!showUserSearch) {\n      setUserSearchTerm(\"\");\n    }\n  };\n\n  const filteredFriends = friends.filter((friendship) => {\n    const name = getDisplayName(friendship.friend).toLowerCase();\n    return name.includes(searchTerm.toLowerCase());\n  });\n\n  if (friendsLoading || requestsLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"h-6 bg-muted rounded w-24 animate-pulse\"></div>\n          <div className=\"h-8 bg-muted rounded w-24 animate-pulse\"></div>\n        </div>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-card border border-border rounded-xl p-2.5 animate-pulse\">\n            <div className=\"flex gap-2.5\">\n              <div className=\"w-9 h-9 bg-muted rounded-full\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-24\"></div>\n                <div className=\"h-3 bg-muted rounded w-32\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-bold\">Friends</h2>\n        <Button \n          className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n          size=\"sm\"\n          onClick={handleFindFriends}\n          data-testid=\"button-find-friends\"\n        >\n          {showUserSearch ? \"Close Search\" : \"Find Friends\"}\n        </Button>\n      </div>\n\n      {/* User Search */}\n      {showUserSearch && (\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3.5\">\n            <h3 className=\"text-sm font-semibold mb-3\">Find New Friends</h3>\n            <div className=\"relative mb-3\">\n              <Input \n                placeholder=\"Search users by name or handle...\" \n                value={userSearchTerm}\n                onChange={(e) => setUserSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-users\"\n              />\n              <UserPlus className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            </div>\n            \n            {userSearchTerm.length > 0 && (\n              <div className=\"space-y-2\">\n                {searchLoading ? (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    <div className=\"text-sm\">Searching...</div>\n                  </div>\n                ) : searchResults.length === 0 ? (\n                  <div className=\"text-center py-4 text-muted-foreground\">\n                    <div className=\"text-sm\">No users found</div>\n                  </div>\n                ) : (\n                  searchResults\n                    .filter((u: any) => u.id !== currentUser?.id)\n                    .map((user: any) => (\n                      <div \n                        key={user.id} \n                        className=\"flex gap-2.5 items-center p-2 border rounded-lg\"\n                        data-testid={`search-result-${user.id}`}\n                      >\n                        <div className=\"w-8 h-8 rounded-full bg-secondary flex items-center justify-center font-bold text-sm\">\n                          {getInitials(user)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-sm\">\n                            {getDisplayName(user)}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {user.handle} • Level {user.level || 1}\n                          </div>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => sendFriendRequestMutation.mutate(user.id)}\n                          disabled={sendFriendRequestMutation.isPending}\n                          data-testid={`button-add-friend-${user.id}`}\n                        >\n                          Add Friend\n                        </Button>\n                      </div>\n                    ))\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Friend Requests */}\n      {friendRequests.length > 0 && (\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3.5\">\n            <h3 className=\"text-sm font-semibold mb-3\">Friend Requests</h3>\n            <div className=\"space-y-2.5\">\n              {friendRequests.map((request: any) => (\n                <div \n                  key={request.id} \n                  className=\"flex gap-2.5 items-center\"\n                  data-testid={`friend-request-${request.id}`}\n                >\n                  <div className=\"w-8 h-8 rounded-full bg-secondary flex items-center justify-center font-bold text-sm\">\n                    {getInitials(request.requester)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-sm\" data-testid=\"text-requester-name\">\n                      {getDisplayName(request.requester)}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Sent you a friend request\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => respondToRequestMutation.mutate({ \n                        requestId: request.id, \n                        status: \"accepted\" \n                      })}\n                      disabled={respondToRequestMutation.isPending}\n                      className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                      data-testid={`button-accept-${request.id}`}\n                    >\n                      Accept\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => respondToRequestMutation.mutate({ \n                        requestId: request.id, \n                        status: \"declined\" \n                      })}\n                      disabled={respondToRequestMutation.isPending}\n                      data-testid={`button-decline-${request.id}`}\n                    >\n                      Decline\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <div className=\"relative\">\n            <Input \n              placeholder=\"Search friends...\" \n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-friends\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Friends List */}\n      <div className=\"space-y-2.5\">\n        {filteredFriends.length === 0 ? (\n          <Card className=\"theme-transition\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-4xl mb-4\">👥</div>\n              <h3 className=\"text-lg font-semibold mb-2\">\n                {friends.length === 0 ? \"No friends yet\" : \"No friends found\"}\n              </h3>\n              <div className=\"max-w-md mx-auto\">\n                {friends.length === 0 ? (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-muted-foreground\">\n                      Building your network opens doors to better opportunities!\n                    </p>\n                    <div className=\"bg-muted/30 rounded-lg p-4 text-left\">\n                      <h4 className=\"font-medium text-sm mb-2\">🤝 Friend benefits:</h4>\n                      <ul className=\"text-xs text-muted-foreground space-y-1\">\n                        <li>• Get tagged in bounties that match your weirdness</li>\n                        <li>• Team up for bigger, weirder projects</li>\n                        <li>• Learn creative money-making tricks</li>\n                        <li>• Build your rep as the go-to person for [insert random skill]</li>\n                      </ul>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      💡 Tip: Find people who do the same weird stuff you're good at\n                    </p>\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground\">Try a different search term.</p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredFriends.map((friendship: any) => (\n            <Card \n              key={friendship.id} \n              className=\"theme-transition\"\n              data-testid={`friend-${friendship.id}`}\n            >\n              <CardContent className=\"p-2.5\">\n                <div className=\"flex gap-2.5 items-center\">\n                  <div className=\"w-9 h-9 rounded-full bg-secondary flex items-center justify-center font-bold text-sm\">\n                    {getInitials(friendship.friend)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold text-sm\" data-testid=\"text-friend-name\">\n                      {getDisplayName(friendship.friend)}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {friendship.friend.handle} • Level {friendship.friend.level || 1} • ⭐ {friendship.friend.rating || \"0.0\"}\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => window.location.href = `/messages?userId=${friendship.friend.id}`}\n                    data-testid={`button-message-${friendship.id}`}\n                  >\n                    Message\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Friend Recommendations */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Friend Recommendations</h3>\n          <div className=\"text-center py-4 text-muted-foreground\">\n            <div className=\"text-2xl mb-2\">🤖</div>\n            <div className=\"text-sm\">No recommendations available</div>\n            <div className=\"text-xs\">We'll suggest friends based on your activity</div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14954},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { Layout } from \"@/components/Layout\";\nimport Bank from \"./Bank\";\nimport Board from \"./Board\";\nimport Post from \"./Post\";\nimport Messages from \"./Messages\";\nimport Profile from \"./Profile\";\nimport Friends from \"./Friends\";\nimport Activity from \"./Activity\";\nimport Settings from \"./Settings\";\nimport FlappyGame from \"./FlappyGame\";\nimport Arcade from \"./Arcade\";\nimport Account from \"./Account\";\nimport CreatorDashboard from \"./CreatorDashboard\";\nimport CreatorInbox from \"./CreatorInbox\";\nimport Referrals from \"./Referrals\";\nimport PointsStore from \"./PointsStore\";\n\nexport default function Home() {\n  const [activeSection, setActiveSection] = useState(\"board\");\n\n  const renderSection = () => {\n    switch (activeSection) {\n      case \"bank\": // Legacy support - redirect to account\n      case \"account\":\n        return <Account />;\n      case \"board\":\n        return <Board />;\n      case \"post\":\n        return <Post />;\n      case \"messages\":\n        return <Messages />;\n      case \"profile\":\n        return <Profile />;\n      case \"friends\":\n        return <Friends />;\n      case \"activity\":\n        return <Activity />;\n      case \"settings\":\n        return <Settings />;\n      case \"flappy\":\n        return <FlappyGame />;\n      case \"arcade\":\n        return <Arcade />;\n      case \"referrals\":\n        return <Referrals />;\n      case \"points\":\n        return <PointsStore />;\n      case \"admin\":\n        return <CreatorDashboard />;\n      case \"inbox\":\n        return <CreatorInbox />;\n      default:\n        return <Board />;\n    }\n  };\n\n  return (\n    <Layout \n      activeSection={activeSection} \n      onSectionChange={setActiveSection}\n    >\n      {renderSection()}\n    </Layout>\n  );\n}\n","size_bytes":1746},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { DollarSign, Users, Shield, Zap, Star, TrendingUp } from \"lucide-react\";\nimport { Browser } from \"@capacitor/browser\";\nimport { Capacitor } from \"@capacitor/core\";\n\nexport default function Landing() {\n  const handleLogin = async () => {\n    try {\n      if (Capacitor.isNativePlatform()) {\n        // Use in-app browser for mobile app\n        await Browser.open({\n          url: window.location.origin + \"/auth\",\n          windowName: \"_self\"\n        });\n      } else {\n        // Use normal redirect for web\n        window.location.href = \"/auth\";\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  };\n\n  const handleCreateAccount = async () => {\n    try {\n      if (Capacitor.isNativePlatform()) {\n        // Use in-app browser for mobile app\n        await Browser.open({\n          url: window.location.origin + \"/auth\",\n          windowName: \"_self\"\n        });\n      } else {\n        // Use normal redirect for web\n        window.location.href = \"/auth\";\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pocket-red/5 via-background to-pocket-gold/5\">\n      {/* Hero Section */}\n      <div className=\"flex items-center justify-center min-h-screen p-4\">\n        <div className=\"w-full max-w-4xl grid md:grid-cols-2 gap-8 items-center\">\n          {/* Left Side - Main Content */}\n          <div className=\"space-y-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"text-4xl\">🪙</div>\n                <Badge variant=\"outline\" className=\"text-pocket-gold border-pocket-gold\">\n                  New Platform\n                </Badge>\n              </div>\n              \n              <h1 className=\"text-4xl md:text-5xl font-bold\">\n                <span className=\"text-pocket-red\">Pocket</span>{\" \"}\n                <span className=\"text-pocket-gold\">Bounty</span>\n              </h1>\n              \n              <p className=\"text-xl text-muted-foreground leading-relaxed\">\n                The social bounty platform where you earn real money by completing tasks,\n                connect with friends, and build your reputation in our gaming community.\n              </p>\n            </div>\n\n            {/* Key Features */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-green-50 dark:bg-green-900/20\">\n                <DollarSign className=\"h-8 w-8 text-green-600\" />\n                <div>\n                  <div className=\"font-semibold\">Real Money</div>\n                  <div className=\"text-sm text-muted-foreground\">Instant payouts</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-blue-50 dark:bg-blue-900/20\">\n                <Users className=\"h-8 w-8 text-blue-600\" />\n                <div>\n                  <div className=\"font-semibold\">Social</div>\n                  <div className=\"text-sm text-muted-foreground\">Friends & chat</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-purple-50 dark:bg-purple-900/20\">\n                <Shield className=\"h-8 w-8 text-purple-600\" />\n                <div>\n                  <div className=\"font-semibold\">Secure</div>\n                  <div className=\"text-sm text-muted-foreground\">Stripe protected</div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-orange-50 dark:bg-orange-900/20\">\n                <Zap className=\"h-8 w-8 text-orange-600\" />\n                <div>\n                  <div className=\"font-semibold\">Fast</div>\n                  <div className=\"text-sm text-muted-foreground\">Instant access</div>\n                </div>\n              </div>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleCreateAccount}\n                className=\"w-full bg-pocket-gold hover:bg-pocket-gold/90 text-black text-lg py-6 font-semibold\"\n                data-testid=\"button-create-account-main\"\n              >\n                Create Free Account\n              </Button>\n              \n              <Button \n                onClick={handleLogin}\n                variant=\"outline\"\n                className=\"w-full text-lg py-6 border-pocket-red text-pocket-red hover:bg-pocket-red hover:text-white\"\n                data-testid=\"button-login-main\"\n              >\n                Sign In\n              </Button>\n            </div>\n\n            {/* Trust Indicators */}\n            <div className=\"flex items-center justify-center gap-6 pt-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">$10K+</div>\n                <div className=\"text-xs text-muted-foreground\">Paid Out</div>\n              </div>\n              <Separator orientation=\"vertical\" className=\"h-8\" />\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">500+</div>\n                <div className=\"text-xs text-muted-foreground\">Users</div>\n              </div>\n              <Separator orientation=\"vertical\" className=\"h-8\" />\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">4.9★</div>\n                <div className=\"text-xs text-muted-foreground\">Rating</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Side - Feature Cards */}\n          <div className=\"space-y-4\">\n            <Card className=\"theme-transition border-pocket-red/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <span className=\"text-2xl\">📋</span>\n                  Browse Bounties\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Find tasks that match your skills and interests. From simple data entry \n                  to creative projects - there's something for everyone.\n                </p>\n                <div className=\"flex gap-2\">\n                  <Badge variant=\"secondary\" className=\"text-xs\">Content Creation</Badge>\n                  <Badge variant=\"secondary\" className=\"text-xs\">Data Entry</Badge>\n                  <Badge variant=\"secondary\" className=\"text-xs\">Design</Badge>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"theme-transition border-pocket-gold/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <span className=\"text-2xl\">💰</span>\n                  Instant Earnings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Complete tasks and get paid immediately. Build your balance, \n                  withdraw to your bank, or reinvest in posting your own bounties.\n                </p>\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm font-medium text-green-600\">\n                    Average earning: $25-100/week\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"theme-transition border-blue-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg\">\n                  <span className=\"text-2xl\">🎮</span>\n                  Social & Gaming\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Connect with friends, chat, play mini-games like Flappy Bird, \n                  and build your reputation in our community.\n                </p>\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"h-4 w-4 text-yellow-500\" />\n                  <span className=\"text-sm font-medium\">\n                    Earn points & unlock achievements\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div className=\"border-t bg-background/50 backdrop-blur-sm\">\n        <div className=\"max-w-4xl mx-auto p-6 text-center\">\n          <div className=\"flex justify-center gap-4 mb-4\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Shield className=\"h-3 w-3 mr-1\" />\n              Secure Payments\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              Instant Access\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Users className=\"h-3 w-3 mr-1\" />\n              Active Community\n            </Badge>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Powered by Replit • Payments by Stripe • Join the future of work\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9869},"client/src/pages/Messages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDate } from \"@/lib/utils\";\n\nexport default function Messages() {\n  const [selectedThread, setSelectedThread] = useState<any>(null);\n  const [messageText, setMessageText] = useState(\"\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: threads = [], isLoading: threadsLoading } = useQuery({\n    queryKey: [\"/api/messages/threads\"],\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/messages/threads\", selectedThread?.id],\n    enabled: !!selectedThread?.id,\n  });\n\n  // WebSocket for real-time messages\n  useWebSocket({\n    onMessage: (data) => {\n      if (data.type === \"new_message\") {\n        queryClient.invalidateQueries({ queryKey: [\"/api/messages/threads\"] });\n        if (selectedThread?.id === data.threadId) {\n          queryClient.invalidateQueries({ \n            queryKey: [\"/api/messages/threads\", selectedThread.id] \n          });\n        }\n      }\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return apiRequest(\"POST\", \"/api/messages\", {\n        threadId: selectedThread.id,\n        content,\n      });\n    },\n    onSuccess: () => {\n      setMessageText(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/messages/threads\", selectedThread.id] \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages/threads\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!messageText.trim()) return;\n    sendMessageMutation.mutate(messageText.trim());\n  };\n\n  if (threadsLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"h-6 bg-muted rounded w-32 animate-pulse\"></div>\n          <div className=\"h-8 bg-muted rounded w-16 animate-pulse\"></div>\n        </div>\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"bg-card border border-border rounded-xl p-2.5 animate-pulse\">\n            <div className=\"flex gap-2.5\">\n              <div className=\"w-9 h-9 bg-muted rounded-full\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-24\"></div>\n                <div className=\"h-3 bg-muted rounded w-32\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (selectedThread) {\n    return (\n      <div className=\"space-y-4\">\n        {/* Chat Header */}\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3.5 flex items-center gap-2.5\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSelectedThread(null)}\n              data-testid=\"button-back-to-threads\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <div className=\"w-8 h-8 rounded-full bg-secondary flex items-center justify-center font-bold text-sm\">\n              {selectedThread.otherUser.firstName?.[0] || selectedThread.otherUser.handle?.[1] || \"U\"}\n            </div>\n            <div className=\"font-semibold text-sm\" data-testid=\"text-chat-user-name\">\n              {selectedThread.otherUser.firstName || selectedThread.otherUser.handle}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Messages */}\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3.5\">\n            <div className=\"space-y-2 mb-4 max-h-64 overflow-y-auto\">\n              {messagesLoading ? (\n                <div className=\"text-center py-4\">Loading messages...</div>\n              ) : messages.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <div className=\"text-2xl mb-2\">💬</div>\n                  <div className=\"text-sm\">No messages yet</div>\n                  <div className=\"text-xs\">Start the conversation!</div>\n                </div>\n              ) : (\n                messages.map((message: any) => {\n                  const isMe = message.senderId === user?.id;\n                  return (\n                    <div \n                      key={message.id}\n                      className={`max-w-4/5 ${isMe ? \"ml-auto\" : \"\"}`}\n                      data-testid={`message-${message.id}`}\n                    >\n                      <div className={`p-2.5 rounded-xl text-sm ${\n                        isMe \n                          ? \"bg-secondary text-right\" \n                          : \"bg-accent\"\n                      }`}>\n                        {message.content}\n                      </div>\n                      <div className={`text-xs text-muted-foreground mt-1 ${\n                        isMe ? \"text-right\" : \"\"\n                      }`}>\n                        {formatDate(message.createdAt)}\n                      </div>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n            \n            {/* Message Input */}\n            <div className=\"flex gap-2\">\n              <Input \n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n                placeholder=\"Type a message...\"\n                onKeyPress={(e) => e.key === \"Enter\" && handleSendMessage()}\n                data-testid=\"input-message\"\n              />\n              <Button \n                onClick={handleSendMessage}\n                disabled={!messageText.trim() || sendMessageMutation.isPending}\n                className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                data-testid=\"button-send-message\"\n              >\n                Send\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-bold\">Messages</h2>\n        <Button \n          className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n          size=\"sm\"\n          data-testid=\"button-new-message\"\n        >\n          + New\n        </Button>\n      </div>\n\n      {/* Threads List */}\n      <div className=\"space-y-2.5\">\n        {threads.length === 0 ? (\n          <Card className=\"theme-transition\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-4xl mb-4\">💬</div>\n              <h3 className=\"text-lg font-semibold mb-3\">Let's start connecting!</h3>\n              <div className=\"max-w-md mx-auto space-y-4\">\n                <p className=\"text-muted-foreground\">\n                  Your conversations will appear here. Get the ball rolling!\n                </p>\n                <div className=\"bg-muted/30 rounded-lg p-4 text-left\">\n                  <h4 className=\"font-medium text-sm mb-2\">💡 Ways to start chatting:</h4>\n                  <ul className=\"text-xs text-muted-foreground space-y-1\">\n                    <li>• Jump on bounties that sound fun to you</li>\n                    <li>• Connect with fellow weirdos in Friends</li>\n                    <li>• Ask \"wait, what exactly do you need?\" 😅</li>\n                    <li>• Share your random talents with bounty posters</li>\n                  </ul>\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  💫 Tip: Be yourself - personality pays here!\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          threads.map((thread: any) => (\n            <Card \n              key={thread.id} \n              className=\"cursor-pointer hover:bg-accent/50 theme-transition\"\n              onClick={() => setSelectedThread(thread)}\n              data-testid={`thread-${thread.id}`}\n            >\n              <CardContent className=\"p-2.5\">\n                <div className=\"flex gap-2.5 items-center\">\n                  <div className=\"w-9 h-9 rounded-full bg-secondary flex items-center justify-center font-bold text-sm\">\n                    {thread.otherUser.firstName?.[0] || thread.otherUser.handle?.[1] || \"U\"}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-semibold text-sm\" data-testid=\"text-thread-user-name\">\n                      {thread.otherUser.firstName || thread.otherUser.handle}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-thread-last-message\">\n                      {thread.lastMessage?.content || \"No messages yet\"}\n                    </div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {thread.lastMessage && formatDate(thread.lastMessage.createdAt)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10050},"client/src/pages/Post.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { navigateToLogin } from \"@/lib/navigation\";\n\nconst postBountySchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\").max(255, \"Title too long\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  category: z.string().min(1, \"Please select a category\"),\n  reward: z.string().refine((val) => parseFloat(val) >= 5, \"Minimum reward is $5\"),\n  tags: z.string().optional(),\n  duration: z.string().min(1, \"Please select a duration\"),\n});\n\ntype PostBountyForm = z.infer<typeof postBountySchema>;\n\nexport default function Post() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Show login prompt if not authenticated\n  if (!isLoading && !user) {\n    return (\n      <div className=\"text-center space-y-4 mt-8\">\n        <div className=\"text-6xl\">🔒</div>\n        <h2 className=\"text-lg font-bold\">Please Log In</h2>\n        <p className=\"text-muted-foreground\">You need to be logged in to post bounties.</p>\n        <Button \n          onClick={() => navigateToLogin()}\n          className=\"bg-pocket-red hover:bg-pocket-red-dark\"\n        >\n          Log In to Post Bounties\n        </Button>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center space-y-4 mt-8\">\n        <div className=\"text-4xl\">⏳</div>\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    );\n  }\n\n  const form = useForm<PostBountyForm>({\n    resolver: zodResolver(postBountySchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      reward: \"5\",\n      tags: \"\",\n      duration: \"7\",\n    },\n  });\n\n  const postMutation = useMutation({\n    mutationFn: async (data: PostBountyForm) => {\n      const tags = data.tags ? data.tags.split(\",\").map(tag => tag.trim()).filter(Boolean) : [];\n      return apiRequest(\"POST\", \"/api/bounties\", {\n        ...data,\n        reward: parseFloat(data.reward),\n        duration: parseInt(data.duration),\n        tags,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Bounty Posted!\",\n        description: \"Your bounty has been posted successfully.\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/bounties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      \n      // Parse error message from backend\n      let errorMessage = \"Failed to post bounty. Please try again.\";\n      if (error && typeof error === 'object' && 'message' in error) {\n        errorMessage = error.message;\n      } else if (error && error.response && error.response.data && error.response.data.message) {\n        errorMessage = error.response.data.message;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PostBountyForm) => {\n    const reward = parseFloat(data.reward);\n    \n    if ((user?.points || 0) < 5) {\n      toast({\n        title: \"Insufficient Points\",\n        description: \"You need at least 5 points to post a bounty.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if ((parseFloat(user?.balance || \"0\")) < reward) {\n      toast({\n        title: \"Insufficient Balance\",\n        description: `You need $${reward.toFixed(2)} in your account balance to post this bounty. Your current balance: $${parseFloat(user?.balance || \"0\").toFixed(2)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    postMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-bold\">Post a New Bounty</h2>\n      \n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs text-muted-foreground\">\n                      Bounty Title\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"What do you need done?\" \n                        {...field}\n                        data-testid=\"input-bounty-title\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs text-muted-foreground\">\n                      Description\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe the task in detail...\" \n                        rows={4}\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-bounty-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-2 gap-3\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-xs text-muted-foreground\">\n                        Value Range\n                      </FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-bounty-category\">\n                            <SelectValue placeholder=\"Select value range\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"quick_cash\">💵 Quick Cash ($5-15)</SelectItem>\n                          <SelectItem value=\"good_money\">💰 Good Money ($16-50)</SelectItem>\n                          <SelectItem value=\"big_bucks\">💎 Big Bucks ($51-100)</SelectItem>\n                          <SelectItem value=\"major_bag\">🏆 Major Bag ($100+)</SelectItem>\n                          <SelectItem value=\"other\">🎲 Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"reward\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-xs text-muted-foreground\">\n                        Reward Amount ($)\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"tel\"\n                          pattern=\"[0-9]*\\.?[0-9]*\"\n                          placeholder=\"5.00\"\n                          {...field}\n                          data-testid=\"input-bounty-reward\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"tags\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs text-muted-foreground\">\n                      Tags (comma separated)\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"mobile, testing, feedback\" \n                        {...field}\n                        data-testid=\"input-bounty-tags\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"duration\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-xs text-muted-foreground\">\n                      Duration\n                    </FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-bounty-duration\">\n                          <SelectValue placeholder=\"Select duration\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"1\">1 day</SelectItem>\n                        <SelectItem value=\"3\">3 days</SelectItem>\n                        <SelectItem value=\"7\">1 week</SelectItem>\n                        <SelectItem value=\"14\">2 weeks</SelectItem>\n                        <SelectItem value=\"30\">1 month</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"space-y-2\">\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                  disabled={postMutation.isPending || (user?.points || 0) < 5 || (parseFloat(user?.balance || \"0\")) < parseFloat(form.watch(\"reward\") || \"5\")}\n                  data-testid=\"button-post-bounty\"\n                >\n                  {postMutation.isPending ? \"Posting...\" : \"Post Bounty\"}\n                </Button>\n                <div className=\"text-xs text-muted-foreground text-center\">\n                  💰 Full amount held in escrow. Auto-refunds in 3 days minus {parseFloat(form.watch(\"reward\") || \"5\") >= 250 ? \"3.5%\" : \"5%\"} fee if unclaimed.\n                </div>\n                {(user?.points || 0) < 5 && (\n                  <div className=\"text-xs text-destructive text-center\">\n                    You need at least 5 points to post a bounty\n                  </div>\n                )}\n                {(parseFloat(user?.balance || \"0\")) < parseFloat(form.watch(\"reward\") || \"5\") && (\n                  <div className=\"text-xs text-destructive text-center\">\n                    Insufficient balance: Need ${parseFloat(form.watch(\"reward\") || \"5\").toFixed(2)}, have ${parseFloat(user?.balance || \"0\").toFixed(2)}\n                  </div>\n                )}\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12275},"client/src/pages/Profile.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { User, Star, Trophy, Clock, Edit2, Save, X, Camera } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { navigateToLogin } from \"@/lib/navigation\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    firstName: user?.firstName || \"\",\n    lastName: user?.lastName || \"\",\n    handle: user?.handle || \"\",\n    bio: user?.bio || \"\",\n    skills: user?.skills || \"\",\n    experience: user?.experience || \"\",\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"PATCH\", \"/api/user/profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Profile updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateProfileMutation.mutate(formData);\n  };\n\n  const handleCancel = () => {\n    setFormData({\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n      handle: user?.handle || \"\",\n      bio: user?.bio || \"\",\n      skills: user?.skills || \"\",\n      experience: user?.experience || \"\",\n    });\n    setIsEditing(false);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const getInitials = () => {\n    if (formData.firstName && formData.lastName) {\n      return `${formData.firstName[0]}${formData.lastName[0]}`.toUpperCase();\n    }\n    if (formData.handle) {\n      return formData.handle[0].toUpperCase();\n    }\n    return user?.email?.[0]?.toUpperCase() || \"U\";\n  };\n\n  const getDisplayName = () => {\n    if (formData.firstName && formData.lastName) {\n      return `${formData.firstName} ${formData.lastName}`;\n    }\n    return formData.handle || user?.email || \"Unknown User\";\n  };\n\n  if (!user) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">My Profile</h1>\n        {!isEditing ? (\n          <Button \n            onClick={() => setIsEditing(true)}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-edit-profile\"\n          >\n            <Edit2 className=\"h-4 w-4\" />\n            Edit Profile\n          </Button>\n        ) : (\n          <div className=\"flex gap-2\">\n            <Button \n              onClick={handleCancel}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-cancel-edit\"\n            >\n              <X className=\"h-4 w-4\" />\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSubmit}\n              disabled={updateProfileMutation.isPending}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-save-profile\"\n            >\n              <Save className=\"h-4 w-4\" />\n              {updateProfileMutation.isPending ? \"Saving...\" : \"Save\"}\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Profile Header */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-6\">\n            {/* Profile Picture */}\n            <div className=\"relative\">\n              <div className=\"w-24 h-24 rounded-full bg-primary/10 flex items-center justify-center text-3xl font-bold border-4 border-border\">\n                {user?.profileImageUrl ? (\n                  <img \n                    src={user.profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-full h-full rounded-full object-cover\"\n                    data-testid=\"img-profile-photo\"\n                  />\n                ) : (\n                  <span data-testid=\"text-profile-initials\">\n                    {getInitials()}\n                  </span>\n                )}\n              </div>\n              {isEditing && (\n                <Button\n                  size=\"sm\"\n                  className=\"absolute -bottom-2 -right-2 rounded-full w-8 h-8 p-0\"\n                  data-testid=\"button-change-photo\"\n                  onClick={() => {\n                    toast({\n                      title: \"Coming Soon\",\n                      description: \"Profile photo upload will be available soon!\",\n                    });\n                  }}\n                >\n                  <Camera className=\"h-3 w-3\" />\n                </Button>\n              )}\n            </div>\n            \n            {/* Profile Info */}\n            <div className=\"flex-1\">\n              {isEditing ? (\n                <div className=\"space-y-3\">\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <Label htmlFor=\"firstName\" className=\"text-sm\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={formData.firstName}\n                        onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                        placeholder=\"Enter first name\"\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\" className=\"text-sm\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={formData.lastName}\n                        onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                        placeholder=\"Enter last name\"\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"handle\" className=\"text-sm\">Username/Handle</Label>\n                    <Input\n                      id=\"handle\"\n                      value={formData.handle}\n                      onChange={(e) => handleInputChange(\"handle\", e.target.value)}\n                      placeholder=\"@username\"\n                      data-testid=\"input-handle\"\n                    />\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"text-display-name\">\n                    {getDisplayName()}\n                  </h2>\n                  <p className=\"text-muted-foreground mb-1\" data-testid=\"text-email\">\n                    {user.email}\n                  </p>\n                  <p className=\"text-muted-foreground mb-3\" data-testid=\"text-handle\">\n                    {formData.handle || \"@user\"}\n                  </p>\n                </>\n              )}\n              \n              {/* User Stats */}\n              <div className=\"flex items-center gap-4 mt-3\">\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  <Trophy className=\"h-3 w-3\" />\n                  Level {user.level || 1}\n                </Badge>\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  <Star className=\"h-3 w-3\" />\n                  {user.rating || \"0.0\"} ({user.reviewCount || 0} reviews)\n                </Badge>\n                <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                  <Clock className=\"h-3 w-3\" />\n                  Joined {new Date(user.createdAt).toLocaleDateString()}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bio Section */}\n      <Card className=\"theme-transition\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            About Me\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isEditing ? (\n            <div>\n              <Label htmlFor=\"bio\" className=\"text-sm\">Bio</Label>\n              <Textarea\n                id=\"bio\"\n                value={formData.bio}\n                onChange={(e) => handleInputChange(\"bio\", e.target.value)}\n                placeholder=\"Tell us about yourself...\"\n                rows={4}\n                className=\"mt-1\"\n                data-testid=\"textarea-bio\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Share your background, interests, and what makes you unique\n              </p>\n            </div>\n          ) : (\n            <p className=\"text-muted-foreground\" data-testid=\"text-bio\">\n              {formData.bio || \"No bio added yet. Click Edit Profile to add one!\"}\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Skills & Experience */}\n      <Card className=\"theme-transition\">\n        <CardHeader>\n          <CardTitle>Skills & Experience</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {isEditing ? (\n            <>\n              <div>\n                <Label htmlFor=\"skills\" className=\"text-sm\">Skills</Label>\n                <Textarea\n                  id=\"skills\"\n                  value={formData.skills}\n                  onChange={(e) => handleInputChange(\"skills\", e.target.value)}\n                  placeholder=\"e.g., JavaScript, Design, Writing, Marketing, Photography\"\n                  rows={3}\n                  className=\"mt-1\"\n                  data-testid=\"textarea-skills\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  List your skills separated by commas\n                </p>\n              </div>\n              <div>\n                <Label htmlFor=\"experience\" className=\"text-sm\">Experience Level</Label>\n                <Input\n                  id=\"experience\"\n                  value={formData.experience}\n                  onChange={(e) => handleInputChange(\"experience\", e.target.value)}\n                  placeholder=\"e.g., Beginner, Intermediate, Expert, 5+ years\"\n                  className=\"mt-1\"\n                  data-testid=\"input-experience\"\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              <div>\n                <h4 className=\"font-semibold mb-2\">Skills</h4>\n                {formData.skills ? (\n                  <div className=\"flex flex-wrap gap-2\">\n                    {formData.skills.split(\",\").map((skill: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\" className=\"bg-blue-900/30 border-blue-600/50 text-blue-300\">\n                        {skill.trim()}\n                      </Badge>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-muted-foreground text-sm\">No skills added yet</p>\n                )}\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">Experience Level</h4>\n                <p className=\"text-muted-foreground\" data-testid=\"text-experience\">\n                  {formData.experience || \"Not specified\"}\n                </p>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-pocket-gold\">\n              ${parseFloat(user.balance || \"0\").toFixed(2)}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Current Balance</div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              ${parseFloat(user.lifetimeEarned || \"0\").toFixed(2)}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Lifetime Earned</div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {user.points || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Points</div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {user.reviewCount || 0}\n            </div>\n            <div className=\"text-xs text-muted-foreground\">Reviews</div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14207},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Tutorial from \"@/components/Tutorial\";\nimport { PlayCircle, HelpCircle } from \"lucide-react\";\n\nexport default function Settings() {\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const [showTutorial, setShowTutorial] = useState(false);\n  \n  // Local state for notification preferences\n  const [notifications, setNotifications] = useState({\n    newBounties: true,\n    messages: true,\n    payments: true,\n    friendRequests: true,\n  });\n  \n  // Local state for privacy settings\n  const [privacy, setPrivacy] = useState({\n    showOnlineStatus: true,\n    publicProfile: true,\n    showEarnings: false,\n  });\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const handleEditProfile = () => {\n    window.location.href = \"/profile\";\n  };\n\n  const handlePaymentMethods = () => {\n    window.location.href = \"/account\";\n  };\n\n  const handlePrivacyPolicy = () => {\n    toast({\n      title: \"Privacy Policy\",\n      description: \"Please contact support for privacy policy information.\",\n    });\n  };\n\n  const handleTermsOfService = () => {\n    toast({\n      title: \"Terms of Service\",\n      description: \"Please contact support for terms of service information.\",\n    });\n  };\n\n  const handleNotificationChange = (key: keyof typeof notifications) => {\n    setNotifications(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n    toast({\n      title: \"Settings Updated\",\n      description: \"Your notification preferences have been saved.\",\n    });\n  };\n\n  const handlePrivacyChange = (key: keyof typeof privacy) => {\n    setPrivacy(prev => ({\n      ...prev,\n      [key]: !prev[key]\n    }));\n    toast({\n      title: \"Settings Updated\",\n      description: \"Your privacy settings have been saved.\",\n    });\n  };\n\n  const handleTutorialReplay = () => {\n    setShowTutorial(true);\n  };\n\n  const handleTutorialClose = () => {\n    setShowTutorial(false);\n  };\n\n  const handleGetHelp = () => {\n    toast({\n      title: \"Need Help? 🤔\",\n      description: \"Try the tutorial or contact support for assistance!\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-lg font-bold\">Settings</h2>\n\n      {/* Appearance */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Appearance</h3>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <Label className=\"text-sm\">Dark Mode</Label>\n              <div className=\"text-xs text-muted-foreground\">\n                Switch between light and dark themes\n              </div>\n            </div>\n            <Switch\n              checked={theme === \"dark\"}\n              onCheckedChange={toggleTheme}\n              data-testid=\"switch-dark-mode\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notifications */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Notifications</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <Label className=\"text-sm\">New bounties</Label>\n              <Switch\n                checked={notifications.newBounties}\n                onCheckedChange={() => handleNotificationChange(\"newBounties\")}\n                data-testid=\"switch-new-bounties\"\n              />\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <Label className=\"text-sm\">Messages</Label>\n              <Switch\n                checked={notifications.messages}\n                onCheckedChange={() => handleNotificationChange(\"messages\")}\n                data-testid=\"switch-messages\"\n              />\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <Label className=\"text-sm\">Payment updates</Label>\n              <Switch\n                checked={notifications.payments}\n                onCheckedChange={() => handleNotificationChange(\"payments\")}\n                data-testid=\"switch-payments\"\n              />\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <Label className=\"text-sm\">Friend requests</Label>\n              <Switch\n                checked={notifications.friendRequests}\n                onCheckedChange={() => handleNotificationChange(\"friendRequests\")}\n                data-testid=\"switch-friend-requests\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Privacy */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Privacy</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <Label className=\"text-sm\">Show online status</Label>\n              <Switch\n                checked={privacy.showOnlineStatus}\n                onCheckedChange={() => handlePrivacyChange(\"showOnlineStatus\")}\n                data-testid=\"switch-online-status\"\n              />\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <Label className=\"text-sm\">Public profile</Label>\n              <Switch\n                checked={privacy.publicProfile}\n                onCheckedChange={() => handlePrivacyChange(\"publicProfile\")}\n                data-testid=\"switch-public-profile\"\n              />\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <Label className=\"text-sm\">Show earnings</Label>\n              <Switch\n                checked={privacy.showEarnings}\n                onCheckedChange={() => handlePrivacyChange(\"showEarnings\")}\n                data-testid=\"switch-show-earnings\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Help & Support */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Help & Support</h3>\n          <div className=\"space-y-2\">\n            <Button\n              variant=\"ghost\"\n              onClick={handleTutorialReplay}\n              className=\"w-full justify-start text-left p-2 text-sm hover:bg-accent\"\n              data-testid=\"button-replay-tutorial\"\n            >\n              <PlayCircle className=\"h-4 w-4 mr-2\" />\n              Replay Interactive Tutorial\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              onClick={handleGetHelp}\n              className=\"w-full justify-start text-left p-2 text-sm hover:bg-accent\"\n              data-testid=\"button-get-help\"\n            >\n              <HelpCircle className=\"h-4 w-4 mr-2\" />\n              Get Help & Support\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Account */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-3\">Account</h3>\n          <div className=\"space-y-2\">\n            <Button\n              variant=\"ghost\"\n              onClick={handleEditProfile}\n              className=\"w-full justify-start text-left p-2 text-sm hover:bg-accent\"\n              data-testid=\"button-edit-profile\"\n            >\n              Edit Profile\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              onClick={handlePaymentMethods}\n              className=\"w-full justify-start text-left p-2 text-sm hover:bg-accent\"\n              data-testid=\"button-payment-methods\"\n            >\n              Payment Methods\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              onClick={handlePrivacyPolicy}\n              className=\"w-full justify-start text-left p-2 text-sm hover:bg-accent\"\n              data-testid=\"button-privacy-policy\"\n            >\n              Privacy Policy\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              onClick={handleTermsOfService}\n              className=\"w-full justify-start text-left p-2 text-sm hover:bg-accent\"\n              data-testid=\"button-terms-of-service\"\n            >\n              Terms of Service\n            </Button>\n            \n            <Button\n              variant=\"ghost\"\n              onClick={handleLogout}\n              className=\"w-full justify-start text-left p-2 text-sm text-destructive hover:bg-destructive/10\"\n              data-testid=\"button-sign-out\"\n            >\n              Sign Out\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tutorial Modal */}\n      {showTutorial && (\n        <div className=\"fixed inset-0 bg-black/60 flex items-center justify-center p-4 z-[9999]\">\n          <div \n            className=\"bg-background rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-auto border border-border\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <Tutorial onClose={handleTutorialClose} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":9613},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-[16px] ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","size_bytes":780},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Account.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Elements, useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { usePaymentMethods } from \"@/hooks/usePaymentMethods\";\nimport { useTransactions } from \"@/hooks/useTransactions\";\nimport { useDemo } from \"@/contexts/DemoContext\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport DemoLockOverlay from \"@/components/DemoLockOverlay\";\nimport { navigateToLogin } from \"@/lib/navigation\";\nimport { CreditCard, Plus, Trash2, Star, DollarSign, History, Shield, Lock, Wallet, ArrowUpRight, ArrowDownLeft } from \"lucide-react\";\nimport type { Transaction } from \"@shared/schema\";\n\n// Stripe setup\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY ? \n  loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY) : null;\n\nfunction AddPaymentMethodForm({ onSuccess }: { onSuccess: () => void }) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const setupIntentMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/payments/setup-intent\", {});\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to initialize card setup\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveMethodMutation = useMutation({\n    mutationFn: async (paymentMethodId: string) => {\n      return apiRequest(\"POST\", \"/api/payments/save-method\", { paymentMethodId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payment method added successfully!\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to save payment method\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!stripe || !elements) return;\n\n    setIsLoading(true);\n\n    const response = await setupIntentMutation.mutateAsync();\n    const clientSecret = (response as any).clientSecret;\n\n    const { error, setupIntent } = await stripe.confirmCardSetup(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)!,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n      return;\n    }\n\n    if (setupIntent?.payment_method) {\n      await saveMethodMutation.mutateAsync(setupIntent.payment_method as string);\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"border rounded-lg p-3 bg-background\">\n        <CardElement \n          options={{\n            style: {\n              base: {\n                fontSize: '16px',\n                color: '#424770',\n                '::placeholder': {\n                  color: '#aab7c4',\n                },\n              },\n            },\n          }}\n        />\n      </div>\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isLoading}\n        className=\"w-full\"\n        data-testid=\"button-save-card\"\n      >\n        <Plus className=\"mr-2 h-4 w-4\" />\n        {isLoading ? \"Processing...\" : \"Add Card\"}\n      </Button>\n    </form>\n  );\n}\n\nfunction DepositForm({ paymentMethods }: { paymentMethods: any[] }) {\n  const [amount, setAmount] = useState(\"\");\n  const [selectedMethod, setSelectedMethod] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const depositMutation = useMutation({\n    mutationFn: async (data: { amount: string; paymentMethodId: string }) => {\n      return apiRequest(\"POST\", \"/api/payments/deposit\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Deposit completed successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      setAmount(\"\");\n      setSelectedMethod(\"\");\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      \n      let errorMessage = \"Failed to process deposit\";\n      try {\n        const errorData = JSON.parse(error.message.split(': ').slice(1).join(': '));\n        errorMessage = errorData.message || errorMessage;\n      } catch {\n        errorMessage = error.message || errorMessage;\n      }\n      \n      toast({\n        title: \"Payment Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!amount || !selectedMethod) {\n      toast({\n        title: \"Error\",\n        description: \"Please select amount and payment method\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const numAmount = parseFloat(amount);\n    if (numAmount < 1 || numAmount > 1000) {\n      toast({\n        title: \"Error\",\n        description: \"Amount must be between $1 and $1000\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    depositMutation.mutate({ amount, paymentMethodId: selectedMethod });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"amount\">Amount ($)</Label>\n        <Input\n          id=\"amount\"\n          type=\"tel\"\n          pattern=\"[0-9]*\\.?[0-9]*\"\n          value={amount}\n          onChange={(e) => setAmount(e.target.value)}\n          placeholder=\"Enter amount (e.g., 10.00)\"\n          data-testid=\"input-deposit-amount\"\n        />\n      </div>\n      <div>\n        <Label htmlFor=\"payment-method\">Payment Method</Label>\n        <select\n          id=\"payment-method\"\n          value={selectedMethod}\n          onChange={(e) => setSelectedMethod(e.target.value)}\n          className=\"w-full p-2 border rounded-lg\"\n          data-testid=\"select-payment-method\"\n        >\n          <option value=\"\">Select payment method</option>\n          {paymentMethods.map((method) => (\n            <option key={method.stripePaymentMethodId} value={method.stripePaymentMethodId}>\n              {method.brand?.toUpperCase()} •••• {method.last4} {method.isDefault ? \"(Default)\" : \"\"}\n            </option>\n          ))}\n        </select>\n      </div>\n      <Button \n        type=\"submit\" \n        disabled={depositMutation.isPending}\n        className=\"w-full bg-green-600 hover:bg-green-700\"\n        data-testid=\"button-deposit\"\n      >\n        {depositMutation.isPending ? \"Processing...\" : \"Deposit\"}\n      </Button>\n    </form>\n  );\n}\n\nexport default function Account() {\n  const [showAddCard, setShowAddCard] = useState(false);\n  const [showDemoLock, setShowDemoLock] = useState(false);\n  const [payoutAmount, setPayoutAmount] = useState(\"\");\n  const [payoutMethod, setPayoutMethod] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  \n  const { user } = useAuth();\n  const { isDemoMode } = useDemo();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { paymentMethods, isLoading: methodsLoading } = usePaymentMethods();\n  const { transactions, isLoading: transactionsLoading } = useTransactions();\n\n  const { data: paymentHistory = [], isError: historyError } = useQuery<any[]>({\n    queryKey: [\"/api/payments/history\"],\n    retry: false,\n    enabled: !!user, // Only fetch when user is authenticated\n  });\n\n  // Refetch payment methods when user changes\n  useEffect(() => {\n    if (user) {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments/methods\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n    }\n  }, [user, queryClient]);\n\n  const handleWithdrawal = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isDemoMode) {\n      setShowDemoLock(true);\n      return;\n    }\n    \n    const amount = parseFloat(payoutAmount);\n    if (amount < 5) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Minimum withdrawal amount is $5.00\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!payoutMethod) {\n      toast({\n        title: \"Select Method\",\n        description: \"Please select a payout method\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    withdrawalMutation.mutate({ amount: payoutAmount, method: payoutMethod });\n  };\n\n  const withdrawalMutation = useMutation({\n    mutationFn: async (data: { amount: string; method: string }) => {\n      return apiRequest(\"POST\", \"/api/payments/withdraw\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Withdrawal Requested\",\n        description: \"Your payout request has been submitted and will be processed within 1-2 business days.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/transactions\"] });\n      setPayoutAmount(\"\");\n      setPayoutMethod(\"\");\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      \n      let errorMessage = \"Failed to request withdrawal\";\n      try {\n        const errorData = JSON.parse(error.message.split(': ').slice(1).join(': '));\n        errorMessage = errorData.message || errorMessage;\n      } catch {\n        errorMessage = error.message || errorMessage;\n      }\n      \n      toast({\n        title: \"Withdrawal Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const setDefaultMutation = useMutation({\n    mutationFn: async (paymentMethodId: string) => {\n      return apiRequest(\"POST\", \"/api/payments/set-default\", { paymentMethodId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Default payment method updated\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments/methods\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update default payment method\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/payments/methods/${id}`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Payment method removed\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments/methods\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          navigateToLogin();\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove payment method\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-2\">\n        <Wallet className=\"h-6 w-6 text-pocket-gold\" />\n        <h1 className=\"text-2xl font-bold\">Account</h1>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-3 gap-2.5\">\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3\">\n            <h3 className=\"text-xs text-muted-foreground font-semibold mb-1.5\">\n              Available Balance\n            </h3>\n            <div className=\"text-lg font-bold text-pocket-gold\" data-testid=\"text-balance\">\n              {user ? formatCurrency(user.balance || \"0\") : \"$0.00\"}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3\">\n            <h3 className=\"text-xs text-muted-foreground font-semibold mb-1.5\">\n              Lifetime Earned\n            </h3>\n            <div className=\"text-lg font-bold text-pocket-gold\" data-testid=\"text-lifetime-earned\">\n              {user ? formatCurrency(user.lifetimeEarned || \"0\") : \"$0.00\"}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-3\">\n            <h3 className=\"text-xs text-muted-foreground font-semibold mb-1.5\">\n              Points\n            </h3>\n            <div className=\"text-lg font-bold text-pocket-gold\" data-testid=\"text-points\">\n              {user ? (user.points || 0) : 0}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"deposit\">Deposit</TabsTrigger>\n          <TabsTrigger value=\"withdraw\">Withdraw</TabsTrigger>\n          <TabsTrigger value=\"cards\">Cards</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <Card className=\"theme-transition\">\n            <CardContent className=\"p-3.5\">\n              <h3 className=\"text-sm font-semibold mb-3\">Recent Transactions</h3>\n              {transactionsLoading ? (\n                <div className=\"text-center py-4\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">Loading transactions...</p>\n                </div>\n              ) : !user ? (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-muted-foreground\">Please log in to view your transactions</p>\n                  <Button \n                    onClick={() => navigateToLogin()}\n                    className=\"mt-4\"\n                  >\n                    Log In\n                  </Button>\n                </div>\n              ) : (transactions as Transaction[]).length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <div className=\"text-4xl mb-4\">💎</div>\n                  <h3 className=\"text-lg font-semibold mb-3 text-foreground\">Your earning journey starts here!</h3>\n                  <div className=\"max-w-md mx-auto space-y-4\">\n                    <p className=\"text-muted-foreground\">\n                      All your earnings and withdrawals will be tracked here.\n                    </p>\n                    <div className=\"bg-muted/30 rounded-lg p-4 text-left\">\n                      <h4 className=\"font-medium text-sm mb-2\">💡 How to start earning:</h4>\n                      <ul className=\"text-xs text-muted-foreground space-y-1\">\n                        <li>• Find bounties that sound fun</li>\n                        <li>• Jump in with a quick \"I can do this!\" message</li>\n                        <li>• Complete the task</li>\n                        <li>• Money hits your account instantly! ⚡</li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {(transactions as Transaction[]).slice(0, 10).map((transaction: Transaction) => (\n                    <div \n                      key={transaction.id} \n                      className=\"flex justify-between items-center py-2 border-b last:border-0\"\n                      data-testid={`transaction-${transaction.id}`}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        {transaction.type === \"earning\" ? (\n                          <ArrowDownLeft className=\"h-4 w-4 text-green-500\" />\n                        ) : (\n                          <ArrowUpRight className=\"h-4 w-4 text-red-500\" />\n                        )}\n                        <div>\n                          <div className=\"text-sm font-medium\">\n                            {transaction.description}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {formatDate(transaction.createdAt || new Date())}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`text-sm font-bold ${\n                          transaction.type === \"earning\" ? \"text-green-500\" : \"text-red-500\"\n                        }`}>\n                          {transaction.type === \"earning\" ? \"+\" : \"-\"}\n                          {formatCurrency(transaction.amount)}\n                        </div>\n                        <Badge \n                          variant={transaction.status === \"completed\" ? \"default\" : \"secondary\"}\n                          className={transaction.status === \"completed\" \n                            ? \"bg-pocket-gold text-gray-900\" \n                            : \"bg-orange-500 text-white\"\n                          }\n                        >\n                          {(transaction.status || 'pending').toUpperCase()}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Deposit Tab */}\n        <TabsContent value=\"deposit\" className=\"space-y-4\">\n          <Card className=\"theme-transition\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Add Funds</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!stripePromise ? (\n                <div className=\"text-center py-4\">\n                  <Shield className=\"h-8 w-8 mx-auto mb-2 text-blue-500\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Payment system in test mode\n                  </p>\n                </div>\n              ) : paymentMethods.length === 0 ? (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    {methodsLoading ? \"Loading payment methods...\" : \"Add a payment method to deposit funds\"}\n                  </p>\n                  {!methodsLoading && (\n                    <Button \n                      onClick={() => setActiveTab(\"cards\")}\n                      className=\"bg-pocket-red hover:bg-pocket-red-dark\"\n                    >\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Add Payment Method\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <DepositForm paymentMethods={paymentMethods} />\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Withdraw Tab */}\n        <TabsContent value=\"withdraw\" className=\"space-y-4\">\n          <Card className=\"theme-transition\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Cash Out</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleWithdrawal} className=\"space-y-3\">\n                <div>\n                  <Label className=\"text-xs text-muted-foreground mb-1.5\">\n                    Payment Method\n                  </Label>\n                  <Select value={payoutMethod} onValueChange={setPayoutMethod}>\n                    <SelectTrigger data-testid=\"select-payment-method\">\n                      <SelectValue placeholder=\"Select payment method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      <SelectItem value=\"debit_card\">Instant Debit Card</SelectItem>\n                      <SelectItem value=\"cash_app\">Cash App</SelectItem>\n                      <SelectItem value=\"paypal\">PayPal (Coming Soon)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label className=\"text-xs text-muted-foreground mb-1.5\">\n                    Amount (Min: $5.00)\n                  </Label>\n                  <div className=\"relative\">\n                    <span className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">$</span>\n                    <Input \n                      type=\"tel\"\n                      pattern=\"[0-9]*\\.?[0-9]*\"\n                      placeholder=\"5.00\" \n                      value={payoutAmount}\n                      onChange={(e) => setPayoutAmount(e.target.value)}\n                      className=\"pl-8\"\n                      data-testid=\"input-payout-amount\"\n                    />\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    Available: {formatCurrency(user?.balance || \"0\")}\n                  </div>\n                </div>\n                \n                <Button \n                  type=\"submit\"\n                  className=\"w-full bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                  disabled={withdrawalMutation.isPending || !payoutMethod || !payoutAmount}\n                  data-testid=\"button-request-payout\"\n                >\n                  {withdrawalMutation.isPending ? \"Processing...\" : \"Request Payout\"}\n                </Button>\n                \n                <div className=\"text-xs text-muted-foreground text-center\">\n                  Payouts are processed within 1-2 business days\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Cards Tab */}\n        <TabsContent value=\"cards\" className=\"space-y-4\">\n          <Card className=\"theme-transition\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Payment Methods</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!stripePromise ? (\n                <div className=\"text-center py-8\">\n                  <Shield className=\"h-12 w-12 mx-auto mb-3 text-blue-500\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Test Mode Active</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Payment system running in test mode\n                  </p>\n                </div>\n              ) : (\n                <Elements stripe={stripePromise}>\n                  <div className=\"space-y-4\">\n                    {/* Saved Payment Methods */}\n                    <div className=\"mb-4\">\n                      <h3 className=\"text-sm font-semibold mb-3 flex items-center gap-2\">\n                        <CreditCard className=\"h-4 w-4\" />\n                        Your Saved Cards ({paymentMethods.length})\n                      </h3>\n                    </div>\n                    \n                    {/* Existing Payment Methods */}\n                    {methodsLoading ? (\n                      <div className=\"text-center py-4\">\n                        <div className=\"animate-spin w-6 h-6 border-3 border-primary border-t-transparent rounded-full mx-auto mb-2\" />\n                        <p className=\"text-sm text-muted-foreground\">Loading your saved cards...</p>\n                      </div>\n                    ) : paymentMethods.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {paymentMethods.map((method) => (\n                          <div \n                            key={method.id} \n                            className=\"flex items-center justify-between p-3 border rounded-lg\"\n                            data-testid={`payment-method-${method.id}`}\n                          >\n                            <div className=\"flex items-center gap-3\">\n                              <CreditCard className=\"h-5 w-5 text-muted-foreground\" />\n                              <div>\n                                <div className=\"font-medium\">\n                                  {method.brand?.toUpperCase()} •••• {method.last4}\n                                </div>\n                                <div className=\"text-xs text-muted-foreground\">\n                                  Expires {method.expiryMonth}/{method.expiryYear}\n                                </div>\n                              </div>\n                              {method.isDefault && (\n                                <Badge className=\"bg-pocket-gold text-gray-900\">Default</Badge>\n                              )}\n                            </div>\n                            <div className=\"flex gap-2\">\n                              {!method.isDefault && (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => setDefaultMutation.mutate(method.stripePaymentMethodId)}\n                                  disabled={setDefaultMutation.isPending}\n                                  data-testid={`button-set-default-${method.id}`}\n                                >\n                                  Set Default\n                                </Button>\n                              )}\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => deleteMutation.mutate(method.id)}\n                                disabled={deleteMutation.isPending}\n                                data-testid={`button-delete-${method.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-4 text-muted-foreground\">\n                        No payment methods added yet\n                      </div>\n                    )}\n\n                    {/* Add New Card Form */}\n                    {showAddCard ? (\n                      <div className=\"border-t pt-4\">\n                        <AddPaymentMethodForm \n                          onSuccess={() => {\n                            setShowAddCard(false);\n                            queryClient.invalidateQueries({ queryKey: [\"/api/payments/methods\"] });\n                          }}\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          className=\"w-full mt-2\"\n                          onClick={() => setShowAddCard(false)}\n                        >\n                          Cancel\n                        </Button>\n                      </div>\n                    ) : (\n                      <Button\n                        className=\"w-full\"\n                        onClick={() => {\n                          if (isDemoMode) {\n                            setShowDemoLock(true);\n                          } else {\n                            setShowAddCard(true);\n                          }\n                        }}\n                        data-testid=\"button-add-payment-method\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Add Payment Method\n                      </Button>\n                    )}\n                  </div>\n                </Elements>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {showDemoLock && (\n        <DemoLockOverlay\n          action=\"Manage payment methods\"\n          onClose={() => setShowDemoLock(false)}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":30005},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { DollarSign, TrendingUp, Activity, Calendar } from \"lucide-react\";\n\ninterface PlatformRevenueData {\n  revenue: Array<{\n    id: string;\n    amount: string;\n    source: string;\n    description: string;\n    createdAt: string;\n  }>;\n  totalRevenue: string;\n  summary: {\n    totalEarned: string;\n    transactionCount: number;\n    avgPerTransaction: string;\n  };\n}\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n\n  const { data: revenueData, isLoading, error } = useQuery<PlatformRevenueData>({\n    queryKey: [\"/api/admin/platform-revenue\"],\n    retry: false,\n  });\n\n  // Handle errors\n  useEffect(() => {\n    if (error) {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      if (error.message.includes('403')) {\n        toast({\n          title: \"Access Denied\",\n          description: \"You don't have permission to view platform revenue data\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to load platform revenue data\",\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold\">Platform Dashboard</h1>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"theme-transition\">\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-3\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n                  <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold\">Platform Dashboard</h1>\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-muted-foreground\">\n              <div className=\"text-6xl mb-4\">🚫</div>\n              <h3 className=\"text-lg font-semibold mb-2\">Access Restricted</h3>\n              <p className=\"text-sm\">You don't have permission to view this data</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!revenueData) return null;\n\n  const getSourceIcon = (source: string) => {\n    switch (source) {\n      case 'bounty_posting': return '📋';\n      case 'bounty_completion': return '✅';\n      case 'deposit': return '💳';\n      default: return '💰';\n    }\n  };\n\n  const getSourceLabel = (source: string) => {\n    switch (source) {\n      case 'bounty_posting': return 'Bounty Posting Fee';\n      case 'bounty_completion': return 'Bounty Completion Fee';\n      case 'deposit': return 'Deposit Fee';\n      default: return source;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold\">Platform Dashboard</h1>\n        <Badge variant=\"outline\" className=\"bg-green-50 dark:bg-green-900/20\">\n          Creator Access\n        </Badge>\n      </div>\n\n      {/* Revenue Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"theme-transition\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              ${parseFloat(revenueData.summary.totalEarned).toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              5% platform fee from all transactions\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"theme-transition\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Transactions</CardTitle>\n            <Activity className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {revenueData.summary.transactionCount}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Fee-generating transactions\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"theme-transition\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Average Fee</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              ${revenueData.summary.avgPerTransaction}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Per transaction average\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Revenue Transactions */}\n      <Card className=\"theme-transition\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Recent Revenue Transactions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {revenueData.revenue.length === 0 ? (\n            <div className=\"text-center p-6 text-muted-foreground\">\n              <DollarSign className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No revenue transactions yet</p>\n              <p className=\"text-sm mt-2\">Fees will appear here as users post bounties and make transactions</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {revenueData.revenue.slice(0, 20).map((transaction) => (\n                <div\n                  key={transaction.id}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  data-testid={`revenue-transaction-${transaction.id}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-2xl\" role=\"img\" aria-label={transaction.source}>\n                      {getSourceIcon(transaction.source)}\n                    </span>\n                    <div>\n                      <p className=\"font-medium\">{transaction.description}</p>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {getSourceLabel(transaction.source)}\n                        </Badge>\n                        <span>•</span>\n                        <span>{new Date(transaction.createdAt).toLocaleDateString()}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-green-600\">\n                      +${parseFloat(transaction.amount).toFixed(2)}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">5% fee</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Fee Breakdown */}\n      <Card className=\"theme-transition\">\n        <CardHeader>\n          <CardTitle>Revenue Breakdown by Source</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {['bounty_posting', 'bounty_completion', 'deposit'].map((source) => {\n              const sourceRevenue = revenueData.revenue.filter(r => r.source === source);\n              const sourceTotal = sourceRevenue.reduce((sum, r) => sum + parseFloat(r.amount), 0);\n              const percentage = revenueData.summary.transactionCount > 0 \n                ? ((sourceRevenue.length / revenueData.summary.transactionCount) * 100).toFixed(1)\n                : '0';\n\n              return (\n                <div key={source} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-xl\">{getSourceIcon(source)}</span>\n                    <div>\n                      <p className=\"font-medium\">{getSourceLabel(source)}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {sourceRevenue.length} transactions ({percentage}%)\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-green-600\">${sourceTotal.toFixed(2)}</p>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9728},"client/src/pages/CreateAccount.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserPlus, Shield, DollarSign, Star, ArrowRight, Check } from \"lucide-react\";\nimport Tutorial from \"@/components/Tutorial\";\nimport { Browser } from \"@capacitor/browser\";\nimport { Capacitor } from \"@capacitor/core\";\n\nexport default function CreateAccount() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [agreedToTerms, setAgreedToTerms] = useState(false);\n  const [showTutorial, setShowTutorial] = useState(false);\n  const { toast } = useToast();\n\n  const handleCreateAccount = async () => {\n    if (!agreedToTerms) {\n      toast({\n        title: \"Terms Required\",\n        description: \"Please agree to the terms of service to continue\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      if (Capacitor.isNativePlatform()) {\n        // Use in-app browser for mobile app\n        await Browser.open({\n          url: window.location.origin + \"/auth\",\n          windowName: \"_self\"\n        });\n      } else {\n        // Use normal redirect for web\n        window.location.href = \"/auth\";\n      }\n    } catch (error) {\n      console.error('Account creation error:', error);\n      setIsLoading(false);\n      toast({\n        title: \"Account Creation Error\",\n        description: \"Failed to start account creation. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleExistingUser = async () => {\n    try {\n      if (Capacitor.isNativePlatform()) {\n        // Use in-app browser for mobile app\n        await Browser.open({\n          url: window.location.origin + \"/auth\",\n          windowName: \"_self\"\n        });\n      } else {\n        // Use normal redirect for web\n        window.location.href = \"/auth\";\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  };\n\n  const handleDemoTutorial = () => {\n    setShowTutorial(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pocket-gold/5 via-background to-pocket-red/5 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* App Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"text-4xl mb-2\">🪙</div>\n          <h1 className=\"text-3xl font-bold text-pocket-gold\">Pocket Bounty</h1>\n          <p className=\"text-muted-foreground\">\n            Where your random talents actually pay the bills 🤑\n          </p>\n        </div>\n\n        {/* Account Creation Benefits */}\n        <Card className=\"theme-transition shadow-lg border-pocket-gold/20\">\n          <CardHeader className=\"text-center space-y-1\">\n            <CardTitle className=\"text-2xl\">Create Your Account</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Join the fun and start making money from weird stuff\n            </p>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Benefits */}\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold text-center mb-4\">Why You'll Love It:</h3>\n              \n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-green-50 dark:bg-green-900/20\">\n                <div className=\"bg-green-600 rounded-full p-1\">\n                  <Check className=\"h-3 w-3 text-white\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">$10 Welcome Gift 🎁</p>\n                  <p className=\"text-xs text-muted-foreground\">Free money to post your first weird request</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-blue-50 dark:bg-blue-900/20\">\n                <div className=\"bg-blue-600 rounded-full p-1\">\n                  <Check className=\"h-3 w-3 text-white\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Make Money From Anything 💸</p>\n                  <p className=\"text-xs text-muted-foreground\">Your weird skills are finally worth something</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-purple-50 dark:bg-purple-900/20\">\n                <div className=\"bg-purple-600 rounded-full p-1\">\n                  <Check className=\"h-3 w-3 text-white\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Secure Stripe Payments</p>\n                  <p className=\"text-xs text-muted-foreground\">Bank-level security for all transactions</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-orange-50 dark:bg-orange-900/20\">\n                <div className=\"bg-orange-600 rounded-full p-1\">\n                  <Check className=\"h-3 w-3 text-white\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Friends & Mini-Games 🎮</p>\n                  <p className=\"text-xs text-muted-foreground\">Because making money should be social and fun</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Terms Agreement */}\n            <div className=\"flex items-center space-x-2 p-3 border rounded-lg\">\n              <Checkbox \n                id=\"terms\" \n                checked={agreedToTerms}\n                onCheckedChange={(checked) => setAgreedToTerms(checked as boolean)}\n                data-testid=\"checkbox-terms\"\n              />\n              <Label htmlFor=\"terms\" className=\"text-sm\">\n                I agree to the{\" \"}\n                <button className=\"text-pocket-red hover:underline\">\n                  Terms of Service\n                </button>{\" \"}\n                and{\" \"}\n                <button className=\"text-pocket-red hover:underline\">\n                  Privacy Policy\n                </button>\n              </Label>\n            </div>\n\n            {/* Create Account Button */}\n            <Button \n              onClick={handleCreateAccount}\n              disabled={isLoading || !agreedToTerms}\n              className=\"w-full bg-pocket-gold hover:bg-pocket-gold/90 text-black py-3 text-lg font-semibold\"\n              data-testid=\"button-create-account\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin w-4 h-4 border-2 border-black border-t-transparent rounded-full\" />\n                  Creating Account...\n                </div>\n              ) : (\n                <div className=\"flex items-center gap-2\">\n                  <UserPlus className=\"h-5 w-5\" />\n                  Create Account with Replit\n                  <ArrowRight className=\"h-4 w-4\" />\n                </div>\n              )}\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">\n                  Already have an account?\n                </span>\n              </div>\n            </div>\n\n            {/* Login Link */}\n            <Button \n              variant=\"outline\" \n              className=\"w-full py-3\"\n              onClick={handleExistingUser}\n              data-testid=\"button-existing-user\"\n            >\n              Sign In to Existing Account\n            </Button>\n\n            {/* Demo Tutorial */}\n            <div className=\"pt-4 border-t\">\n              <p className=\"text-xs text-muted-foreground text-center mb-3\">\n                Want to see how it works first?\n              </p>\n              <Button \n                variant=\"ghost\" \n                className=\"w-full text-sm\"\n                onClick={handleDemoTutorial}\n                data-testid=\"button-demo-tutorial\"\n              >\n                Take Interactive Tour\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Trust Indicators */}\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3 text-center\">Trusted by Users</h3>\n            <div className=\"grid grid-cols-3 gap-4 text-center\">\n              <div>\n                <div className=\"text-2xl font-bold text-green-600\">$10K+</div>\n                <div className=\"text-xs text-muted-foreground\">Paid Out</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-blue-600\">500+</div>\n                <div className=\"text-xs text-muted-foreground\">Active Users</div>\n              </div>\n              <div>\n                <div className=\"text-2xl font-bold text-purple-600\">4.9★</div>\n                <div className=\"text-xs text-muted-foreground\">User Rating</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Notice */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex justify-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Shield className=\"h-3 w-3 mr-1\" />\n              Bank-Level Security\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <DollarSign className=\"h-3 w-3 mr-1\" />\n              Instant Payments\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              <Star className=\"h-3 w-3 mr-1\" />\n              Top Rated\n            </Badge>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Powered by Replit • Your data is protected\n          </p>\n        </div>\n      </div>\n      \n      {showTutorial && (\n        <Tutorial onClose={() => setShowTutorial(false)} />\n      )}\n    </div>\n  );\n}","size_bytes":10365},"client/src/pages/CreatorDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { CreatorStatsModal } from \"@/components/CreatorStatsModal\";\nimport { \n  DollarSign, \n  TrendingUp, \n  Activity, \n  Users, \n  Target, \n  BarChart3,\n  Calendar,\n  Percent,\n  ArrowUpRight,\n  ArrowDownRight,\n  Crown,\n  CreditCard,\n  Wallet,\n  ShoppingCart,\n  Gamepad2,\n  Trophy,\n  UserCheck,\n  RefreshCw,\n  Download\n} from \"lucide-react\";\n\ninterface CreatorStats {\n  revenue: {\n    data: Array<{\n      id: string;\n      amount: string;\n      source: string;\n      description: string;\n      createdAt: string;\n    }>;\n    total: string;\n    transactionCount: number;\n    avgPerTransaction: string;\n  };\n  users: {\n    total: number;\n    active: number;\n    totalBalance: string;\n    newLast30Days: number;\n    growthRate: string;\n  };\n  bounties: {\n    total: number;\n    active: number;\n    completed: number;\n    totalValue: string;\n    completionRate: string;\n  };\n  transactions: {\n    total: number;\n    totalVolume: string;\n    deposits: number;\n    withdrawals: number;\n    avgTransactionSize: string;\n  };\n  spending: {\n    totalUserSpent: string;\n    pointPurchases: {\n      total: string;\n      count: number;\n      avgPurchase: string;\n    };\n    withdrawals: {\n      total: string;\n      count: number;\n      avgWithdrawal: string;\n    };\n    refunds: {\n      total: string;\n      count: number;\n    };\n    boosts?: {\n      total: string;\n      count: number;\n    };\n    breakdown: Record<string, number>;\n    last30Days: {\n      pointPurchases: string;\n      spending: string;\n    };\n  };\n  gameStats?: {\n    totalGamesPlayed: number;\n    totalPointsEarned: number;\n    mostPopularGames: Array<{\n      name: string;\n      plays: number;\n      pointsEarned: number;\n    }>;\n    recentGameActivity: Array<{\n      game: string;\n      points: number;\n      userId: string;\n      timestamp: string;\n    }>;\n  };\n  topPerformers?: {\n    topEarners: Array<{\n      id: string;\n      name: string;\n      earned: string;\n    }>;\n    topSpenders: Array<{\n      id: string;\n      name: string;\n      spent: string;\n    }>;\n    mostActive: Array<{\n      id: string;\n      name: string;\n      actions: number;\n    }>;\n  };\n  engagement?: {\n    dailyActiveUsers: number;\n    weeklyActiveUsers: number;\n    monthlyActiveUsers: number;\n    retentionRate: string;\n    avgSessionLength: string;\n    bounceRate: string;\n  };\n  activity: Array<{\n    id: string;\n    type: string;\n    description: string;\n    createdAt: string;\n    userId: string;\n  }>;\n}\n\nexport default function CreatorDashboard() {\n  const { toast } = useToast();\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalType, setModalType] = useState<'users' | 'revenue' | 'bounties' | 'points' | 'spending' | null>(null);\n  const [modalTitle, setModalTitle] = useState(\"\");\n\n  const openDetailsModal = (type: 'users' | 'revenue' | 'bounties' | 'points' | 'spending', title: string) => {\n    setModalType(type);\n    setModalTitle(title);\n    setModalOpen(true);\n  };\n\n  const { data: stats, isLoading, error } = useQuery<CreatorStats>({\n    queryKey: [\"/api/creator/stats\"],\n    retry: false,\n  });\n\n  // Handle errors\n  useEffect(() => {\n    if (error) {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      if (error.message.includes('403')) {\n        toast({\n          title: \"Access Denied\",\n          description: \"You don't have creator permissions to view these analytics\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to load creator analytics\",\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Crown className=\"h-6 w-6 text-yellow-500\" />\n          Creator Analytics\n        </h1>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"theme-transition\">\n              <CardContent className=\"p-6\">\n                <div className=\"animate-pulse space-y-3\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n                  <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Crown className=\"h-6 w-6 text-yellow-500\" />\n          Creator Analytics\n        </h1>\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"text-muted-foreground\">\n              <div className=\"text-6xl mb-4\">🚫</div>\n              <h3 className=\"text-lg font-semibold mb-2\">Access Restricted</h3>\n              <p className=\"text-sm\">You need creator permissions to view these analytics</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!stats) return null;\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'bounty_posted': return '📋';\n      case 'bounty_applied': return '✋';\n      case 'bounty_completed': return '✅';\n      case 'friend_added': return '👥';\n      case 'payment_made': return '💳';\n      default: return '📱';\n    }\n  };\n\n  const formatGrowthRate = (rate: string) => {\n    const numRate = parseFloat(rate);\n    if (numRate > 0) {\n      return (\n        <div className=\"flex items-center gap-1 text-green-600\">\n          <ArrowUpRight className=\"h-4 w-4\" />\n          +{rate}%\n        </div>\n      );\n    } else if (numRate < 0) {\n      return (\n        <div className=\"flex items-center gap-1 text-red-600\">\n          <ArrowDownRight className=\"h-4 w-4\" />\n          {rate}%\n        </div>\n      );\n    }\n    return <span className=\"text-muted-foreground\">0%</span>;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Crown className=\"h-6 w-6 text-yellow-500\" />\n          Creator Analytics Dashboard\n        </h1>\n        <Badge variant=\"outline\" className=\"bg-yellow-50 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-300\">\n          Creator Access\n        </Badge>\n      </div>\n\n      {/* Quick Stats Summary */}\n      {stats && (\n        <Card className=\"theme-transition bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/20 dark:to-pink-950/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4 text-center\">\n              <div>\n                <p className=\"text-2xl font-bold text-green-600\">${parseFloat(stats.revenue.total).toFixed(0)}</p>\n                <p className=\"text-xs text-muted-foreground\">Revenue</p>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.users.total}</p>\n                <p className=\"text-xs text-muted-foreground\">Users</p>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.bounties.active}</p>\n                <p className=\"text-xs text-muted-foreground\">Active Bounties</p>\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-blue-600\">${parseFloat(stats.spending.pointPurchases.total).toFixed(0)}</p>\n                <p className=\"text-xs text-muted-foreground\">Points Sales</p>\n              </div>\n              {stats.gameStats && (\n                <div>\n                  <p className=\"text-2xl font-bold text-purple-600\">{stats.gameStats.totalGamesPlayed}</p>\n                  <p className=\"text-xs text-muted-foreground\">Games Played</p>\n                </div>\n              )}\n              {stats.engagement && (\n                <div>\n                  <p className=\"text-2xl font-bold\">{stats.engagement.dailyActiveUsers}</p>\n                  <p className=\"text-xs text-muted-foreground\">Daily Active</p>\n                </div>\n              )}\n              {stats.engagement && (\n                <div>\n                  <p className=\"text-2xl font-bold\">{stats.engagement.retentionRate}%</p>\n                  <p className=\"text-xs text-muted-foreground\">Retention</p>\n                </div>\n              )}\n              <div>\n                <p className=\"text-2xl font-bold\">{stats.bounties.completionRate}%</p>\n                <p className=\"text-xs text-muted-foreground\">Completion</p>\n              </div>\n            </div>\n            <div className=\"mt-4 flex justify-center\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => window.location.reload()}\n                className=\"gap-2\"\n              >\n                <RefreshCw className=\"h-3 w-3\" />\n                Refresh All Stats\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n        <Card className=\"theme-transition\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Platform Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">\n              ${parseFloat(stats.revenue.total).toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              From {stats.revenue.transactionCount} fee transactions\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"theme-transition cursor-pointer hover:shadow-lg transition-all\"\n          onClick={() => openDetailsModal('users', 'User Details')}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {stats.users.total.toLocaleString()}\n            </div>\n            <div className=\"flex items-center gap-2 text-xs\">\n              <span className=\"text-muted-foreground\">{stats.users.active} active</span>\n              {formatGrowthRate(stats.users.growthRate)}\n            </div>\n            <p className=\"text-xs text-blue-600 mt-1\">Click for details →</p>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"theme-transition cursor-pointer hover:shadow-lg transition-all\"\n          onClick={() => openDetailsModal('bounties', 'Bounty Details')}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Bounties</CardTitle>\n            <Target className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-purple-600\">\n              {stats.bounties.active}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.bounties.completionRate}% completion rate\n            </p>\n            <p className=\"text-xs text-blue-600 mt-1\">Click for details →</p>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"theme-transition cursor-pointer hover:shadow-lg transition-all\"\n          onClick={() => openDetailsModal('points', 'Points Purchase Details')}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Points Sales</CardTitle>\n            <CreditCard className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              ${parseFloat(stats.spending.pointPurchases.total).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.spending.pointPurchases.count} sales made\n            </p>\n            <p className=\"text-xs text-blue-600 mt-1\">Click for details →</p>\n          </CardContent>\n        </Card>\n\n        <Card \n          className=\"theme-transition cursor-pointer hover:shadow-lg transition-all\"\n          onClick={() => openDetailsModal('spending', 'User Spending Details')}\n        >\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">User Spending</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">\n              ${parseFloat(stats.spending.totalUserSpent).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Total money spent by users\n            </p>\n            <p className=\"text-xs text-blue-600 mt-1\">Click for details →</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Analytics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* User Analytics */}\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              User Analytics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Total Users</p>\n                <p className=\"text-2xl font-bold\">{stats.users.total.toLocaleString()}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Active (7 days)</p>\n                <p className=\"text-2xl font-bold\">{stats.users.active}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">New (30 days)</p>\n                <p className=\"text-2xl font-bold\">{stats.users.newLast30Days}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Growth Rate</p>\n                <div className=\"text-lg font-bold\">\n                  {formatGrowthRate(stats.users.growthRate)}\n                </div>\n              </div>\n            </div>\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Total User Balance</span>\n                <span className=\"font-bold text-green-600\">\n                  ${parseFloat(stats.users.totalBalance).toLocaleString()}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Bounty Analytics */}\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Bounty Analytics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Total Posted</p>\n                <p className=\"text-2xl font-bold\">{stats.bounties.total}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Active Now</p>\n                <p className=\"text-2xl font-bold\">{stats.bounties.active}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Completed</p>\n                <p className=\"text-2xl font-bold\">{stats.bounties.completed}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Success Rate</p>\n                <p className=\"text-2xl font-bold\">{stats.bounties.completionRate}%</p>\n              </div>\n            </div>\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Total Bounty Value</span>\n                <span className=\"font-bold text-purple-600\">\n                  ${parseFloat(stats.bounties.totalValue).toLocaleString()}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Points Sales Analysis */}\n      <div className=\"mb-6\">\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Points Sales Analytics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Total Sales</p>\n                <p className=\"text-2xl font-bold text-blue-600\">${parseFloat(stats.spending.pointPurchases.total).toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">All time</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Total Transactions</p>\n                <p className=\"text-2xl font-bold\">{stats.spending.pointPurchases.count}</p>\n                <p className=\"text-xs text-muted-foreground\">Point purchases</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Average Sale</p>\n                <p className=\"text-2xl font-bold\">${stats.spending.pointPurchases.avgPurchase}</p>\n                <p className=\"text-xs text-muted-foreground\">Per transaction</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Last 30 Days</p>\n                <p className=\"text-2xl font-bold text-green-600\">${parseFloat(stats.spending.last30Days.pointPurchases).toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">Recent sales</p>\n              </div>\n            </div>\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Points sales represent direct platform revenue</span>\n                <Badge variant=\"outline\" className=\"bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300\">\n                  Direct Revenue\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Revenue & Spending Analysis */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Revenue Breakdown */}\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              Revenue Breakdown\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              {['bounty_posting', 'bounty_completion', 'deposit'].map((source) => {\n                const sourceRevenue = stats.revenue.data.filter(r => r.source === source);\n                const sourceTotal = sourceRevenue.reduce((sum, r) => sum + parseFloat(r.amount), 0);\n                const percentage = stats.revenue.transactionCount > 0 \n                  ? ((sourceRevenue.length / stats.revenue.transactionCount) * 100).toFixed(1)\n                  : '0';\n\n                const sourceLabel = source === 'bounty_posting' ? 'Bounty Posting' \n                  : source === 'bounty_completion' ? 'Bounty Completion' \n                  : 'Deposits';\n\n                return (\n                  <div key={source} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{sourceLabel}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {sourceRevenue.length} transactions ({percentage}%)\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-green-600\">${sourceTotal.toFixed(2)}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">Average Fee per Transaction</span>\n                <span className=\"font-bold text-green-600\">${stats.revenue.avgPerTransaction}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Spending Analytics */}\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <ShoppingCart className=\"h-5 w-5\" />\n              User Spending Analytics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Point Purchases</p>\n                <p className=\"text-2xl font-bold text-blue-600\">${parseFloat(stats.spending.pointPurchases.total).toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">{stats.spending.pointPurchases.count} purchases</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Withdrawals</p>\n                <p className=\"text-2xl font-bold text-red-600\">${parseFloat(stats.spending.withdrawals.total).toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">{stats.spending.withdrawals.count} actual withdrawals</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Avg Point Purchase</p>\n                <p className=\"text-2xl font-bold\">${stats.spending.pointPurchases.avgPurchase}</p>\n              </div>\n              {stats.spending.boosts && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium\">Boost Spending</p>\n                  <p className=\"text-2xl font-bold text-purple-600\">${parseFloat(stats.spending.boosts.total || '0').toLocaleString()}</p>\n                  <p className=\"text-xs text-muted-foreground\">{stats.spending.boosts.count || 0} bounty boosts</p>\n                </div>\n              )}\n            </div>\n            <div className=\"pt-4 border-t space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Total User Spending</span>\n                <span className=\"font-bold text-red-600\">${parseFloat(stats.spending.totalUserSpent).toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Last 30 Days - Points</span>\n                <span className=\"font-bold text-blue-600\">${parseFloat(stats.spending.last30Days.pointPurchases).toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Last 30 Days - Other</span>\n                <span className=\"font-bold text-red-600\">${parseFloat(stats.spending.last30Days.spending).toLocaleString()}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Transaction Analytics */}\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Transaction Analytics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Total Volume</p>\n                <p className=\"text-2xl font-bold\">${parseFloat(stats.transactions.totalVolume).toLocaleString()}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Total Count</p>\n                <p className=\"text-2xl font-bold\">{stats.transactions.total}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Earnings</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.transactions.deposits}</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Spendings</p>\n                <p className=\"text-2xl font-bold text-red-600\">{stats.transactions.withdrawals}</p>\n              </div>\n            </div>\n            <div className=\"pt-4 border-t\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-muted-foreground\">Average Transaction Size</span>\n                <span className=\"font-bold\">${stats.transactions.avgTransactionSize}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Game Analytics */}\n      {stats.gameStats && (\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Gamepad2 className=\"h-5 w-5\" />\n              Arcade Game Analytics\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Total Games Played</p>\n                <p className=\"text-2xl font-bold\">{stats.gameStats.totalGamesPlayed.toLocaleString()}</p>\n                <p className=\"text-xs text-muted-foreground\">Across all arcade games</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Points Earned from Games</p>\n                <p className=\"text-2xl font-bold text-purple-600\">{stats.gameStats.totalPointsEarned.toLocaleString()} ⭐</p>\n                <p className=\"text-xs text-muted-foreground\">Total points awarded</p>\n              </div>\n              <div className=\"space-y-2\">\n                <p className=\"text-sm font-medium\">Most Popular Game</p>\n                <p className=\"text-2xl font-bold\">{stats.gameStats.mostPopularGames[0]?.name || 'N/A'}</p>\n                <p className=\"text-xs text-muted-foreground\">{stats.gameStats.mostPopularGames[0]?.plays || 0} plays</p>\n              </div>\n            </div>\n            {stats.gameStats.mostPopularGames.length > 0 && (\n              <div className=\"pt-4 border-t\">\n                <h4 className=\"text-sm font-semibold mb-3\">Top 5 Games</h4>\n                <div className=\"space-y-2\">\n                  {stats.gameStats.mostPopularGames.slice(0, 5).map((game, index) => (\n                    <div key={game.name} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-accent/50\">\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"w-6 h-6 p-0 flex items-center justify-center\">\n                          {index + 1}\n                        </Badge>\n                        <span className=\"font-medium\">{game.name}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-bold\">{game.plays} plays</p>\n                        <p className=\"text-xs text-muted-foreground\">{game.pointsEarned} pts earned</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Top Performers */}\n      {stats.topPerformers && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <Card className=\"theme-transition\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-base\">\n                <Trophy className=\"h-4 w-4 text-yellow-500\" />\n                Top Earners\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {stats.topPerformers.topEarners.slice(0, 5).map((user, index) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-accent/50\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-lg\">{index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `${index + 1}.`}</span>\n                      <span className=\"text-sm font-medium truncate max-w-[120px]\">{user.name}</span>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-green-600\">\n                      ${user.earned}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"theme-transition\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-base\">\n                <Wallet className=\"h-4 w-4 text-blue-500\" />\n                Top Spenders\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {stats.topPerformers.topSpenders.slice(0, 5).map((user, index) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-accent/50\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-lg\">{index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `${index + 1}.`}</span>\n                      <span className=\"text-sm font-medium truncate max-w-[120px]\">{user.name}</span>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-blue-600\">\n                      ${user.spent}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"theme-transition\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-base\">\n                <UserCheck className=\"h-4 w-4 text-purple-500\" />\n                Most Active Users\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {stats.topPerformers.mostActive.slice(0, 5).map((user, index) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-2 rounded-lg hover:bg-accent/50\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-lg\">{index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `${index + 1}.`}</span>\n                      <span className=\"text-sm font-medium truncate max-w-[120px]\">{user.name}</span>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-purple-600\">\n                      {user.actions} actions\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* User Engagement Metrics */}\n      {stats.engagement && (\n        <Card className=\"theme-transition\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              User Engagement Metrics\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium\">Daily Active</p>\n                <p className=\"text-2xl font-bold\">{stats.engagement.dailyActiveUsers}</p>\n                <p className=\"text-xs text-muted-foreground\">users today</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium\">Weekly Active</p>\n                <p className=\"text-2xl font-bold\">{stats.engagement.weeklyActiveUsers}</p>\n                <p className=\"text-xs text-muted-foreground\">last 7 days</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium\">Monthly Active</p>\n                <p className=\"text-2xl font-bold\">{stats.engagement.monthlyActiveUsers}</p>\n                <p className=\"text-xs text-muted-foreground\">last 30 days</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium\">Retention Rate</p>\n                <p className=\"text-2xl font-bold\">{stats.engagement.retentionRate}%</p>\n                <p className=\"text-xs text-muted-foreground\">7-day retention</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium\">Avg Session</p>\n                <p className=\"text-2xl font-bold\">{stats.engagement.avgSessionLength}</p>\n                <p className=\"text-xs text-muted-foreground\">minutes</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm font-medium\">Bounce Rate</p>\n                <p className=\"text-2xl font-bold\">{stats.engagement.bounceRate}%</p>\n                <p className=\"text-xs text-muted-foreground\">single page visits</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recent Activity Feed */}\n      <Card className=\"theme-transition\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5\" />\n            Recent Platform Activity\n          </CardTitle>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => window.location.reload()}\n            className=\"gap-2\"\n          >\n            <RefreshCw className=\"h-3 w-3\" />\n            Refresh\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {stats.activity.length === 0 ? (\n            <div className=\"text-center p-6 text-muted-foreground\">\n              <Activity className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No recent activity</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {stats.activity.slice(0, 20).map((activity) => (\n                <div\n                  key={activity.id}\n                  className=\"flex items-center gap-3 p-3 border rounded-lg\"\n                  data-testid={`activity-${activity.id}`}\n                >\n                  <span className=\"text-2xl\" role=\"img\">\n                    {getActivityIcon(activity.type)}\n                  </span>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">{activity.description}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(activity.createdAt).toLocaleString()}\n                    </p>\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {activity.type.replace('_', ' ')}\n                  </Badge>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* Stats Detail Modal */}\n      <CreatorStatsModal \n        isOpen={modalOpen}\n        onClose={() => {\n          setModalOpen(false);\n          setModalType(null);\n        }}\n        type={modalType}\n        title={modalTitle}\n      />\n    </div>\n  );\n}","size_bytes":37468},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { LogIn, Shield, Zap, Users } from \"lucide-react\";\nimport Tutorial from \"@/components/Tutorial\";\nimport { Browser } from \"@capacitor/browser\";\nimport { Capacitor } from \"@capacitor/core\";\n\nexport default function Login() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showTutorial, setShowTutorial] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async () => {\n    setIsLoading(true);\n    try {\n      if (Capacitor.isNativePlatform()) {\n        // Use in-app browser for mobile app\n        await Browser.open({\n          url: window.location.origin + \"/auth\",\n          windowName: \"_self\"\n        });\n      } else {\n        // Use normal redirect for web\n        window.location.href = \"/auth\";\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      setIsLoading(false);\n      toast({\n        title: \"Login Error\",\n        description: \"Failed to open login. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDemoLogin = () => {\n    setShowTutorial(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pocket-red/5 via-background to-pocket-gold/5 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-6\">\n        {/* App Header */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"text-4xl mb-2\">🪙</div>\n          <h1 className=\"text-3xl font-bold text-pocket-red\">Pocket Bounty</h1>\n          <p className=\"text-muted-foreground\">\n            Sign in to start earning and posting bounties\n          </p>\n        </div>\n\n        {/* Main Login Card */}\n        <Card className=\"theme-transition shadow-lg\">\n          <CardHeader className=\"text-center space-y-1\">\n            <CardTitle className=\"text-2xl\">Welcome Back</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Sign in to access your account and continue your journey\n            </p>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Primary Login Button */}\n            <Button \n              onClick={handleLogin}\n              disabled={isLoading}\n              className=\"w-full bg-pocket-red hover:bg-pocket-red/90 text-white py-3 text-lg font-semibold\"\n              data-testid=\"button-login-primary\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n                  Signing In...\n                </div>\n              ) : (\n                <div className=\"flex items-center gap-2\">\n                  <LogIn className=\"h-5 w-5\" />\n                  Sign In with Replit\n                </div>\n              )}\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-background px-2 text-muted-foreground\">\n                  New to Pocket Bounty?\n                </span>\n              </div>\n            </div>\n\n            {/* Create Account Link */}\n            <Button \n              variant=\"outline\" \n              className=\"w-full py-3\"\n              onClick={() => window.location.href = \"/create-account\"}\n              data-testid=\"button-create-account-link\"\n            >\n              Create Your Account\n            </Button>\n\n            {/* Demo Section */}\n            <div className=\"pt-4 border-t\">\n              <p className=\"text-xs text-muted-foreground text-center mb-3\">\n                Want to explore first?\n              </p>\n              <Button \n                variant=\"ghost\" \n                className=\"w-full text-sm\"\n                onClick={handleDemoLogin}\n                data-testid=\"button-demo-mode\"\n              >\n                View Demo Features\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Features Preview */}\n        <Card className=\"theme-transition\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-3 text-center\">What You'll Get</h3>\n            <div className=\"grid grid-cols-1 gap-3\">\n              <div className=\"flex items-center gap-3 p-2 rounded-lg bg-green-50 dark:bg-green-900/20\">\n                <Zap className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <p className=\"font-medium text-sm\">Instant Earnings</p>\n                  <p className=\"text-xs text-muted-foreground\">Complete tasks and get paid</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-3 p-2 rounded-lg bg-blue-50 dark:bg-blue-900/20\">\n                <Users className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"font-medium text-sm\">Social Network</p>\n                  <p className=\"text-xs text-muted-foreground\">Connect with other users</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-3 p-2 rounded-lg bg-purple-50 dark:bg-purple-900/20\">\n                <Shield className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <p className=\"font-medium text-sm\">Secure Payments</p>\n                  <p className=\"text-xs text-muted-foreground\">Protected by Stripe</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex justify-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              🔒 Secure\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              ⚡ Fast\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              🎮 Fun\n            </Badge>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            Powered by Replit • Secure authentication\n          </p>\n        </div>\n      </div>\n      \n      {showTutorial && (\n        <Tutorial onClose={() => setShowTutorial(false)} />\n      )}\n    </div>\n  );\n}","size_bytes":6763},"server/middleware/rateLimiter.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n}\n\nconst rateLimitStore = new Map<string, RateLimitEntry>();\n\n// Clean up expired entries every minute\nsetInterval(() => {\n  const now = Date.now();\n  rateLimitStore.forEach((entry, key) => {\n    if (entry.resetTime < now) {\n      rateLimitStore.delete(key);\n    }\n  });\n}, 60000);\n\nexport function createRateLimiter(maxRequests: number = 100, windowMs: number = 60000) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const identifier = req.ip || (req as any).connection?.remoteAddress || \"unknown\";\n    const now = Date.now();\n    \n    let entry = rateLimitStore.get(identifier);\n    \n    if (!entry || entry.resetTime < now) {\n      entry = {\n        count: 1,\n        resetTime: now + windowMs\n      };\n      rateLimitStore.set(identifier, entry);\n    } else {\n      entry.count++;\n      \n      if (entry.count > maxRequests) {\n        res.status(429).json({\n          message: \"Too many requests, please try again later\",\n          retryAfter: Math.ceil((entry.resetTime - now) / 1000)\n        });\n        return;\n      }\n    }\n    \n    res.setHeader(\"X-RateLimit-Limit\", maxRequests.toString());\n    res.setHeader(\"X-RateLimit-Remaining\", (maxRequests - entry.count).toString());\n    res.setHeader(\"X-RateLimit-Reset\", new Date(entry.resetTime).toISOString());\n    \n    next();\n  };\n}\n\n// Specialized rate limiters for different endpoints\nexport const apiRateLimiter = createRateLimiter(100, 60000); // 100 requests per minute\nexport const authRateLimiter = createRateLimiter(5, 60000); // 5 auth attempts per minute\nexport const paymentRateLimiter = createRateLimiter(10, 60000); // 10 payment operations per minute","size_bytes":1773},"server/middleware/validation.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { z } from \"zod\";\n\nexport function validateRequest(schema: z.ZodSchema) {\n  return async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const validated = await schema.parseAsync(req.body);\n      req.body = validated;\n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          message: \"Validation error\",\n          errors: error.errors.map(e => ({\n            field: e.path.join(\".\"),\n            message: e.message\n          }))\n        });\n      } else {\n        res.status(500).json({ message: \"Internal validation error\" });\n      }\n    }\n  };\n}\n\n// Common validation schemas\nexport const amountSchema = z.object({\n  amount: z.string()\n    .regex(/^\\d+(\\.\\d{1,2})?$/, \"Invalid amount format\")\n    .refine(val => parseFloat(val) > 0, \"Amount must be positive\")\n    .refine(val => parseFloat(val) <= 10000, \"Amount exceeds maximum limit\")\n});\n\nexport const bountyCreateSchema = z.object({\n  title: z.string().min(5).max(255),\n  description: z.string().min(20).max(5000),\n  category: z.string().min(1).max(100),\n  reward: z.string().regex(/^\\d+(\\.\\d{1,2})?$/),\n  duration: z.number().min(1).max(90),\n  tags: z.array(z.string()).optional()\n});\n\nexport const messageSchema = z.object({\n  content: z.string().min(1).max(1000)\n});\n\nexport const paginationSchema = z.object({\n  page: z.number().min(1).default(1),\n  limit: z.number().min(1).max(100).default(20),\n  sortBy: z.string().optional(),\n  order: z.enum([\"asc\", \"desc\"]).default(\"desc\")\n});","size_bytes":1598},"server/utils/cache.ts":{"content":"interface CacheEntry<T> {\n  data: T;\n  expiresAt: number;\n}\n\nexport class MemoryCache<T = any> {\n  private cache = new Map<string, CacheEntry<T>>();\n  private defaultTTL: number;\n\n  constructor(defaultTTL: number = 60000) { // 1 minute default\n    this.defaultTTL = defaultTTL;\n    \n    // Clean up expired entries every minute\n    setInterval(() => this.cleanup(), 60000);\n  }\n\n  set(key: string, value: T, ttl?: number): void {\n    const expiresAt = Date.now() + (ttl || this.defaultTTL);\n    this.cache.set(key, { data: value, expiresAt });\n  }\n\n  get(key: string): T | undefined {\n    const entry = this.cache.get(key);\n    \n    if (!entry) return undefined;\n    \n    if (entry.expiresAt < Date.now()) {\n      this.cache.delete(key);\n      return undefined;\n    }\n    \n    return entry.data;\n  }\n\n  has(key: string): boolean {\n    return this.get(key) !== undefined;\n  }\n\n  delete(key: string): void {\n    this.cache.delete(key);\n  }\n\n  clear(): void {\n    this.cache.clear();\n  }\n\n  private cleanup(): void {\n    const now = Date.now();\n    this.cache.forEach((entry, key) => {\n      if (entry.expiresAt < now) {\n        this.cache.delete(key);\n      }\n    });\n  }\n}\n\n// Specialized caches for different data types\nexport const userCache = new MemoryCache(5 * 60 * 1000); // 5 minutes\nexport const bountyCache = new MemoryCache(2 * 60 * 1000); // 2 minutes\nexport const activityCache = new MemoryCache(60 * 1000); // 1 minute","size_bytes":1430},"server/utils/logger.ts":{"content":"// Production-ready logger utility\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\nexport const logger = {\n  info: (message: string, ...args: any[]) => {\n    if (isDevelopment) {\n      console.log(`[INFO] ${new Date().toISOString()}: ${message}`, ...args);\n    }\n  },\n  \n  error: (message: string, error?: any) => {\n    console.error(`[ERROR] ${new Date().toISOString()}: ${message}`, error);\n  },\n  \n  warn: (message: string, ...args: any[]) => {\n    if (isDevelopment) {\n      console.warn(`[WARN] ${new Date().toISOString()}: ${message}`, ...args);\n    }\n  },\n  \n  debug: (message: string, ...args: any[]) => {\n    if (isDevelopment) {\n      console.debug(`[DEBUG] ${new Date().toISOString()}: ${message}`, ...args);\n    }\n  }\n};\n\nexport default logger;","size_bytes":771},"client/src/components/DemoIndicator.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useDemo } from \"@/contexts/DemoContext\";\nimport { Eye, X } from \"lucide-react\";\n\nexport default function DemoIndicator() {\n  const { isDemoMode, setDemoMode } = useDemo();\n\n  if (!isDemoMode) return null;\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50\">\n      <div className=\"bg-orange-100 dark:bg-orange-900/50 border border-orange-200 dark:border-orange-800 rounded-lg p-3 shadow-lg\">\n        <div className=\"flex items-center gap-2\">\n          <Eye className=\"h-4 w-4 text-orange-600\" />\n          <span className=\"text-sm font-medium text-orange-800 dark:text-orange-200\">\n            Demo Mode\n          </span>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-6 w-6 p-0 text-orange-600 hover:bg-orange-200 dark:hover:bg-orange-800/50\"\n            onClick={() => setDemoMode(false)}\n            data-testid=\"button-exit-demo\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n        <p className=\"text-xs text-orange-700 dark:text-orange-300 mt-1\">\n          Exploring with sample data • Withdrawals locked\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":1252},"client/src/components/DemoLockOverlay.tsx":{"content":"import { Lock, AlertTriangle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DemoLockOverlayProps {\n  action: string;\n  onClose?: () => void;\n}\n\nexport default function DemoLockOverlay({ action, onClose }: DemoLockOverlayProps) {\n  const { toast } = useToast();\n\n  const handleUpgrade = () => {\n    toast({\n      title: \"Demo Mode Active\",\n      description: \"Sign up for a real account to access all features\",\n    });\n    if (onClose) onClose();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center w-16 h-16 bg-orange-100 dark:bg-orange-900/30 rounded-full mx-auto mb-4\">\n            <Lock className=\"h-8 w-8 text-orange-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">Demo Mode Limitation</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            <strong>{action}</strong> is not available in demo mode. \n            This feature requires a real account to prevent actual transactions.\n          </p>\n          <div className=\"flex items-center gap-2 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg mb-6\">\n            <AlertTriangle className=\"h-4 w-4 text-blue-600\" />\n            <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n              You can explore all other features with sample data\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={onClose}\n              data-testid=\"button-demo-continue\"\n            >\n              Continue Demo\n            </Button>\n            <Button\n              className=\"flex-1\"\n              onClick={() => window.location.href = \"/api/login\"}\n              data-testid=\"button-demo-upgrade\"\n            >\n              Get Real Account\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2200},"client/src/components/Tutorial.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useDemo } from \"@/contexts/DemoContext\";\nimport { navigateToLogin } from \"@/lib/navigation\";\nimport { \n  ArrowLeft, \n  ArrowRight, \n  X, \n  DollarSign, \n  Users, \n  Star, \n  MessageCircle, \n  Trophy,\n  Zap,\n  Shield,\n  PlusCircle,\n  CheckCircle,\n  CreditCard,\n  Gamepad2\n} from \"lucide-react\";\n\ninterface TutorialProps {\n  onClose: () => void;\n}\n\nconst tutorialSteps = [\n  {\n    id: 1,\n    title: \"Welcome to the Chaos! 🎉\",\n    description: \"Where weird meets wallet-friendly\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-4\">🤪</div>\n          <p className=\"text-muted-foreground\">\n            This isn't your typical work platform. Here, you get paid for the random stuff you're already good at!\n          </p>\n        </div>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg text-center\">\n            <DollarSign className=\"h-8 w-8 mx-auto text-green-600 mb-2\" />\n            <p className=\"text-sm font-medium\">Quick Cash</p>\n          </div>\n          <div className=\"p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg text-center\">\n            <Gamepad2 className=\"h-8 w-8 mx-auto text-purple-600 mb-2\" />\n            <p className=\"text-sm font-medium\">Have Fun</p>\n          </div>\n        </div>\n      </div>\n    )\n  },\n  {\n    id: 2,\n    title: \"The Bounty Hunt Begins! 🎯\",\n    description: \"It's like treasure hunting, but for your skills\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"p-4 border rounded-lg bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <Trophy className=\"h-5 w-5 text-purple-600\" />\n            <h3 className=\"font-semibold\">Real Bounty Example</h3>\n          </div>\n          <h4 className=\"font-medium mb-2\">Rate my outfit for a first date 👗</h4>\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            Help me pick between 3 outfits! Just tell me which looks best and why. Takes 2 minutes max.\n          </p>\n          <div className=\"flex items-center justify-between\">\n            <Badge className=\"bg-green-600\">Reward: $8.00</Badge>\n            <Badge variant=\"outline\">💵 Quick Cash</Badge>\n          </div>\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          <p><strong>1.</strong> Find something that sounds fun (or weird)</p>\n          <p><strong>2.</strong> Jump in if you can do it</p>\n          <p><strong>3.</strong> Do the thing!</p>\n          <p><strong>4.</strong> Cash hits your account ⚡</p>\n        </div>\n      </div>\n    )\n  },\n  {\n    id: 3,\n    title: \"Got Something Weird? Post It! 🎲\",\n    description: \"Turn your random problems into someone's payday\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"p-4 border rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <PlusCircle className=\"h-5 w-5 text-pocket-red\" />\n            <h3 className=\"font-semibold\">Your Bounty Creation</h3>\n          </div>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Title:</span>\n              <span>Help me name my pet rock 🪨</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Reward:</span>\n              <span className=\"text-green-600\">$12.00</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Range:</span>\n              <span>💵 Quick Cash</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Duration:</span>\n              <span>1 day</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg border border-orange-200 dark:border-orange-800\">\n          <h4 className=\"font-semibold text-orange-800 dark:text-orange-200 text-sm mb-2\">💰 How Payment Works:</h4>\n          <ul className=\"text-xs text-orange-700 dark:text-orange-300 space-y-1\">\n            <li>• Full amount charged upfront (held safely in escrow)</li>\n            <li>• If someone completes it → they get paid instantly!</li>\n            <li>• If NO ONE takes it after 3 days → auto-refund minus fee:</li>\n            <li className=\"ml-4\">→ Under $250: 5% fee</li>\n            <li className=\"ml-4\">→ $250+: Only 3.5% fee (better deal!)</li>\n            <li>• No surprises, no hidden costs!</li>\n          </ul>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          From $5 mini-tasks to $500 adventures - anything goes here!\n        </p>\n      </div>\n    )\n  },\n  {\n    id: 4,\n    title: \"Secure Payments\",\n    description: \"Get paid safely with Stripe\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-full\">\n            <CreditCard className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <Shield className=\"h-5 w-5 text-green-600\" />\n            <div>\n              <p className=\"font-medium text-sm\">Bank-Level Security</p>\n              <p className=\"text-xs text-muted-foreground\">Powered by Stripe</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <Zap className=\"h-5 w-5 text-orange-600\" />\n            <div>\n              <p className=\"font-medium text-sm\">Instant Payouts</p>\n              <p className=\"text-xs text-muted-foreground\">Withdraw to bank or card</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n            <DollarSign className=\"h-5 w-5 text-purple-600\" />\n            <div>\n              <p className=\"font-medium text-sm\">Low Fees</p>\n              <p className=\"text-xs text-muted-foreground\">5% only on completion</p>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n          <p className=\"text-sm text-center\">\n            Platform only earns when you do - fair and transparent!\n          </p>\n        </div>\n      </div>\n    )\n  },\n  {\n    id: 5,\n    title: \"Social Features\",\n    description: \"Connect, communicate, and build your reputation\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"p-3 border rounded-lg text-center\">\n            <MessageCircle className=\"h-6 w-6 mx-auto text-blue-600 mb-2\" />\n            <p className=\"text-sm font-medium\">Real-time Chat</p>\n            <p className=\"text-xs text-muted-foreground\">Instant messaging</p>\n          </div>\n          <div className=\"p-3 border rounded-lg text-center\">\n            <Star className=\"h-6 w-6 mx-auto text-yellow-600 mb-2\" />\n            <p className=\"text-sm font-medium\">Reviews & Ratings</p>\n            <p className=\"text-xs text-muted-foreground\">Build your reputation</p>\n          </div>\n        </div>\n        <div className=\"p-4 border rounded-lg\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 flex items-center justify-center text-white text-sm font-bold\">\n              J\n            </div>\n            <div>\n              <p className=\"font-medium text-sm\">John Designer</p>\n              <div className=\"flex items-center gap-1\">\n                <Star className=\"h-3 w-3 text-yellow-500 fill-current\" />\n                <span className=\"text-xs text-muted-foreground\">4.9 (127 reviews)</span>\n              </div>\n            </div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">\n            \"Great experience! Fast communication and high-quality work.\"\n          </p>\n        </div>\n      </div>\n    )\n  },\n  {\n    id: 6,\n    title: \"Gamification & Fun\",\n    description: \"Level up and earn points while working\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"p-4 bg-purple-50 dark:bg-purple-900/20 rounded-full\">\n            <Gamepad2 className=\"h-8 w-8 text-purple-600\" />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-orange-600\">Level 5</div>\n            <p className=\"text-xs text-muted-foreground\">Your current level</p>\n          </div>\n          <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">250 pts</div>\n            <p className=\"text-xs text-muted-foreground\">Points earned</p>\n          </div>\n        </div>\n        <div className=\"p-3 border rounded-lg\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Gamepad2 className=\"h-4 w-4 text-purple-600\" />\n            <span className=\"font-medium text-sm\">Mini-Games</span>\n          </div>\n          <p className=\"text-xs text-muted-foreground mb-2\">\n            Play Flappy Bird to earn extra points between bounties!\n          </p>\n          <Button size=\"sm\" variant=\"outline\" className=\"w-full\">\n            🐦 Play Now\n          </Button>\n        </div>\n        <div className=\"bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg\">\n          <p className=\"text-sm text-center\">\n            Earn points for completing tasks, posting bounties, and playing games!\n          </p>\n        </div>\n      </div>\n    )\n  },\n  {\n    id: 7,\n    title: \"Add to Home Screen! 📱\",\n    description: \"Turn Pocket Bounty into a native app on your phone\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-4\">📱</div>\n          <p className=\"text-muted-foreground mb-4\">\n            Add Pocket Bounty to your home screen for instant access to weird bounties!\n          </p>\n        </div>\n        <div className=\"space-y-3\">\n          <div className=\"p-4 border rounded-lg bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20\">\n            <h4 className=\"font-semibold mb-2\">📱 On iPhone:</h4>\n            <ol className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>1. Tap the Share button (⬆️) in Safari</li>\n              <li>2. Scroll down and tap \"Add to Home Screen\"</li>\n              <li>3. Tap \"Add\" and boom! 🎉</li>\n            </ol>\n          </div>\n          <div className=\"p-4 border rounded-lg bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20\">\n            <h4 className=\"font-semibold mb-2\">🤖 On Android:</h4>\n            <ol className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>1. Tap the menu (⋮) in Chrome</li>\n              <li>2. Select \"Add to Home Screen\"</li>\n              <li>3. Confirm and you're set! ⚡</li>\n            </ol>\n          </div>\n        </div>\n        <div className=\"bg-pocket-gold/10 border border-pocket-gold/20 p-3 rounded-lg\">\n          <p className=\"text-sm text-center font-medium\">\n            💡 With the app on your home screen, you'll never miss a weird bounty again!\n          </p>\n        </div>\n      </div>\n    )\n  },\n  {\n    id: 8,\n    title: \"Ready to Get Started?\",\n    description: \"Join thousands of users earning money on Pocket Bounty\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <CheckCircle className=\"h-16 w-16 mx-auto text-green-600 mb-4\" />\n          <h3 className=\"font-bold text-lg mb-2\">You're All Set!</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            You now understand how Pocket Bounty works. Ready to start earning?\n          </p>\n        </div>\n        <div className=\"grid grid-cols-3 gap-3 text-center\">\n          <div>\n            <div className=\"text-xl font-bold text-green-600\">$10K+</div>\n            <div className=\"text-xs text-muted-foreground\">Paid Out</div>\n          </div>\n          <div>\n            <div className=\"text-xl font-bold text-blue-600\">500+</div>\n            <div className=\"text-xs text-muted-foreground\">Active Users</div>\n          </div>\n          <div>\n            <div className=\"text-xl font-bold text-purple-600\">4.9★</div>\n            <div className=\"text-xs text-muted-foreground\">Rating</div>\n          </div>\n        </div>\n        <div className=\"space-y-3 pt-4\">\n          <Button \n            className=\"w-full bg-green-600 hover:bg-green-700 text-white mb-2\"\n            onClick={() => navigateToLogin()}\n            data-testid=\"button-tutorial-demo\"\n          >\n            Try Demo Mode\n          </Button>\n          <Button \n            variant=\"outline\"\n            className=\"w-full\"\n            onClick={() => navigateToLogin()}\n            data-testid=\"button-tutorial-signup\"\n          >\n            Sign Up for Real Account\n          </Button>\n          <p className=\"text-xs text-center text-muted-foreground\">\n            Demo mode: Explore with sample data • Real mode: Start earning immediately\n          </p>\n        </div>\n      </div>\n    )\n  }\n];\n\nexport default function Tutorial({ onClose }: TutorialProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const { setDemoMode } = useDemo();\n  const currentStepData = tutorialSteps[currentStep];\n  const progress = ((currentStep + 1) / tutorialSteps.length) * 100;\n\n  const handleNext = () => {\n    if (currentStep < tutorialSteps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSkip = () => {\n    setCurrentStep(tutorialSteps.length - 1);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n      <Card className=\"w-full max-w-lg max-h-[90vh] overflow-y-auto theme-transition\">\n        <CardHeader className=\"relative\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              Step {currentStep + 1} of {tutorialSteps.length}\n            </Badge>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={onClose}\n              data-testid=\"button-close-tutorial\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <Progress value={progress} className=\"mb-4\" />\n          <CardTitle className=\"text-xl\">{currentStepData.title}</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">{currentStepData.description}</p>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {currentStepData.content}\n          \n          <div className=\"flex items-center justify-between pt-4 border-t\">\n            <Button \n              variant=\"outline\" \n              onClick={handlePrevious}\n              disabled={currentStep === 0}\n              data-testid=\"button-tutorial-previous\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Previous\n            </Button>\n            \n            <div className=\"flex gap-2\">\n              {currentStep < tutorialSteps.length - 1 && (\n                <Button \n                  variant=\"ghost\" \n                  onClick={handleSkip}\n                  data-testid=\"button-tutorial-skip\"\n                >\n                  Skip to End\n                </Button>\n              )}\n              \n              {currentStep < tutorialSteps.length - 1 ? (\n                <Button \n                  onClick={handleNext}\n                  data-testid=\"button-tutorial-next\"\n                >\n                  Next\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              ) : (\n                <Button \n                  onClick={onClose}\n                  className=\"bg-pocket-gold hover:bg-pocket-gold/90 text-black\"\n                  data-testid=\"button-tutorial-finish\"\n                >\n                  Get Started!\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17037},"client/src/contexts/DemoContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface DemoContextType {\n  isDemoMode: boolean;\n  setDemoMode: (enabled: boolean) => void;\n  demoUser: any;\n  demoBounties: any[];\n  demoMessages: any[];\n  demoTransactions: any[];\n  demoPaymentMethods: any[];\n}\n\nconst DemoContext = createContext<DemoContextType | undefined>(undefined);\n\n// Sample demo data\nconst demoUser = {\n  id: \"demo-user-123\",\n  email: \"demo@pocketbounty.com\",\n  firstName: \"Alex\",\n  lastName: \"Demo\",\n  handle: \"@alexdemo\",\n  bio: \"Freelance designer and developer with 5+ years experience. Love creating beautiful, functional solutions for businesses of all sizes.\",\n  skills: \"UI/UX Design, React, JavaScript, Figma, Photography, Content Writing\",\n  experience: \"Expert level (5+ years)\",\n  profileImageUrl: null,\n  balance: \"847.50\",\n  lifetimeEarned: \"2,340.75\",\n  points: 1250,\n  level: 8,\n  rating: \"4.9\",\n  reviewCount: 47,\n  createdAt: \"2024-01-15T10:30:00Z\",\n  updatedAt: \"2024-12-20T15:45:00Z\"\n};\n\nconst demoBounties = [\n  {\n    id: \"bounty-001\",\n    title: \"Design Modern Logo for Tech Startup\",\n    description: \"Looking for a clean, modern logo for our AI-powered productivity app 'FlowState'. Should convey innovation, efficiency, and trust. We prefer minimalist designs with bold typography. Please provide 3 concepts in vector format (AI/SVG). Company colors: #2563EB (blue) and #7C3AED (purple), but open to other suggestions.\",\n    category: \"Design\",\n    reward: \"125.00\",\n    status: \"open\",\n    authorId: \"user-456\",\n    authorName: \"Sarah Chen\",\n    authorRating: \"4.8\",\n    tags: \"logo, branding, vector, minimalist\",\n    createdAt: \"2024-12-19T09:15:00Z\",\n    expiresAt: \"2024-12-26T09:15:00Z\",\n    applicants: 12,\n    timeLeft: \"6 days\"\n  },\n  {\n    id: \"bounty-002\", \n    title: \"Write Product Descriptions (10 Items)\",\n    description: \"Need compelling product descriptions for our handmade jewelry collection. Each description should be 100-150 words, SEO-optimized, and highlight the craftsmanship and materials. Target audience is women 25-45 interested in unique, sustainable jewelry. Include key selling points and emotional connection.\",\n    category: \"Writing\",\n    reward: \"75.00\",\n    status: \"in_progress\",\n    authorId: \"user-789\",\n    authorName: \"Maria Rodriguez\",\n    authorRating: \"4.9\",\n    tags: \"copywriting, SEO, ecommerce, jewelry\",\n    createdAt: \"2024-12-18T14:30:00Z\",\n    expiresAt: \"2024-12-23T14:30:00Z\",\n    applicants: 8,\n    timeLeft: \"4 days\",\n    claimedBy: \"demo-user-123\",\n    claimedAt: \"2024-12-19T10:00:00Z\"\n  },\n  {\n    id: \"bounty-003\",\n    title: \"Social Media Content Calendar (1 Month)\",\n    description: \"Create a comprehensive social media content calendar for Instagram and TikTok for a sustainable fashion brand. Include post types, captions, hashtag suggestions, and optimal posting times. Focus on Gen Z audience with themes around sustainability, style, and self-expression. 30 posts total (15 per platform).\",\n    category: \"Marketing\", \n    reward: \"200.00\",\n    status: \"completed\",\n    authorId: \"user-321\",\n    authorName: \"Jake Wilson\",\n    authorRating: \"4.7\",\n    tags: \"social media, content strategy, sustainability, fashion\",\n    createdAt: \"2024-12-10T11:00:00Z\",\n    expiresAt: \"2024-12-17T11:00:00Z\",\n    completedAt: \"2024-12-16T16:30:00Z\",\n    applicants: 15,\n    claimedBy: \"demo-user-123\",\n    rating: 5,\n    review: \"Outstanding work! Alex delivered exactly what we needed with creative ideas and perfect timing.\"\n  },\n  {\n    id: \"bounty-004\",\n    title: \"Python Script for Data Analysis\",\n    description: \"Need a Python script to analyze customer purchase data from CSV files. Script should generate insights like top products, seasonal trends, customer segments, and create visualizations (charts/graphs). Include proper documentation and requirements.txt. Data involves ~50k records with purchase history, demographics, and product categories.\",\n    category: \"Programming\",\n    reward: \"180.00\",\n    status: \"open\",\n    authorId: \"user-654\",\n    authorName: \"David Kim\",\n    authorRating: \"4.9\",\n    tags: \"python, data analysis, pandas, matplotlib, visualization\",\n    createdAt: \"2024-12-20T08:45:00Z\",\n    expiresAt: \"2024-12-27T08:45:00Z\",\n    applicants: 6,\n    timeLeft: \"7 days\"\n  },\n  {\n    id: \"bounty-005\",\n    title: \"Photography: Product Shots (20 Items)\",\n    description: \"Professional product photography for our artisanal candle collection. Need high-quality images for e-commerce: white background shots, lifestyle shots with props, and detail shots of textures. Include basic editing (color correction, background removal). All items are candles in jars with different scents and colors.\",\n    category: \"Photography\",\n    reward: \"160.00\",\n    status: \"open\", \n    authorId: \"user-987\",\n    authorName: \"Emma Thompson\",\n    authorRating: \"4.6\",\n    tags: \"product photography, e-commerce, lighting, editing\",\n    createdAt: \"2024-12-19T16:20:00Z\",\n    expiresAt: \"2024-12-24T16:20:00Z\",\n    applicants: 4,\n    timeLeft: \"4 days\"\n  }\n];\n\nconst demoMessages = [\n  {\n    id: \"msg-001\",\n    threadId: \"thread-bounty-002\",\n    senderId: \"user-789\",\n    senderName: \"Maria Rodriguez\",\n    content: \"Hi Alex! I reviewed your portfolio and I'm impressed with your writing samples. The jewelry descriptions project is yours if you're interested. When can you start?\",\n    timestamp: \"2024-12-19T09:30:00Z\",\n    type: \"text\"\n  },\n  {\n    id: \"msg-002\", \n    threadId: \"thread-bounty-002\",\n    senderId: \"demo-user-123\",\n    senderName: \"Alex Demo\",\n    content: \"Thank you so much! I'm very excited to work on this project. I can start immediately and have the first 3 descriptions ready by tomorrow. Could you share the product details and any brand guidelines?\",\n    timestamp: \"2024-12-19T09:45:00Z\",\n    type: \"text\"\n  },\n  {\n    id: \"msg-003\",\n    threadId: \"thread-bounty-002\", \n    senderId: \"user-789\",\n    senderName: \"Maria Rodriguez\",\n    content: \"Perfect! I'll send you our brand guide and product photos. Looking forward to seeing your creative touch on these descriptions.\",\n    timestamp: \"2024-12-19T10:15:00Z\",\n    type: \"text\"\n  },\n  {\n    id: \"msg-004\",\n    threadId: \"thread-general-001\",\n    senderId: \"user-456\",\n    senderName: \"Sarah Chen\",\n    content: \"Hey Alex! Saw your logo design work - absolutely stunning! Would love to discuss a potential collaboration for our upcoming rebrand project. Are you available for a quick call this week?\",\n    timestamp: \"2024-12-20T14:20:00Z\",\n    type: \"text\"\n  }\n];\n\nconst demoTransactions = [\n  {\n    id: \"txn-001\",\n    type: \"earning\",\n    amount: \"190.00\",\n    description: \"Completed bounty: Social Media Content Calendar (after $10.00 platform fee)\",\n    status: \"completed\",\n    createdAt: \"2024-12-16T16:35:00Z\",\n    bountyTitle: \"Social Media Content Calendar (1 Month)\"\n  },\n  {\n    id: \"txn-002\",\n    type: \"earning\", \n    amount: \"142.50\",\n    description: \"Completed bounty: Website Copywriting (after $7.50 platform fee)\",\n    status: \"completed\",\n    createdAt: \"2024-12-14T11:20:00Z\",\n    bountyTitle: \"Website Copywriting\"\n  },\n  {\n    id: \"txn-003\",\n    type: \"withdrawal\",\n    amount: \"300.00\",\n    description: \"Withdrawal to Bank Account ****1234\",\n    status: \"completed\",\n    createdAt: \"2024-12-13T09:45:00Z\"\n  },\n  {\n    id: \"txn-004\",\n    type: \"deposit\",\n    amount: \"50.00\", \n    description: \"Added funds via Credit Card ****5678\",\n    status: \"completed\",\n    createdAt: \"2024-12-10T15:30:00Z\"\n  },\n  {\n    id: \"txn-005\",\n    type: \"earning\",\n    amount: \"66.50\",\n    description: \"Completed bounty: Logo Design (after $3.50 platform fee)\",\n    status: \"completed\", \n    createdAt: \"2024-12-08T13:15:00Z\",\n    bountyTitle: \"Logo Design\"\n  }\n];\n\nconst demoPaymentMethods = [\n  {\n    id: \"pm-001\",\n    stripePaymentMethodId: \"pm_demo123\",\n    brand: \"visa\",\n    last4: \"4242\",\n    expiryMonth: 12,\n    expiryYear: 2027,\n    isDefault: true\n  },\n  {\n    id: \"pm-002\", \n    stripePaymentMethodId: \"pm_demo456\",\n    brand: \"mastercard\",\n    last4: \"5555\",\n    expiryMonth: 8,\n    expiryYear: 2026,\n    isDefault: false\n  }\n];\n\nexport function DemoProvider({ children }: { children: ReactNode }) {\n  const [isDemoMode, setIsDemoMode] = useState(() => {\n    // Check localStorage on initialization\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('pocketbounty_demo_mode') === 'true';\n    }\n    return false;\n  });\n\n  const setDemoMode = (enabled: boolean) => {\n    setIsDemoMode(enabled);\n    if (enabled) {\n      // Add demo mode indicator to localStorage\n      localStorage.setItem('pocketbounty_demo_mode', 'true');\n    } else {\n      localStorage.removeItem('pocketbounty_demo_mode');\n      // Force a refresh of user data when exiting demo mode\n      window.location.reload();\n    }\n  };\n\n  const value: DemoContextType = {\n    isDemoMode,\n    setDemoMode,\n    demoUser,\n    demoBounties,\n    demoMessages,\n    demoTransactions,\n    demoPaymentMethods\n  };\n\n  return (\n    <DemoContext.Provider value={value}>\n      {children}\n    </DemoContext.Provider>\n  );\n}\n\nexport function useDemo() {\n  const context = useContext(DemoContext);\n  if (context === undefined) {\n    throw new Error('useDemo must be used within a DemoProvider');\n  }\n  return context;\n}","size_bytes":9285},"client/src/hooks/useBounties.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useDemo } from \"@/contexts/DemoContext\";\nimport type { Bounty } from \"@shared/schema\";\n\nexport function useBounties() {\n  const { isDemoMode, demoBounties } = useDemo();\n  \n  const { data: realBounties = [], isLoading } = useQuery<Bounty[]>({\n    queryKey: [\"/api/bounties\"],\n    retry: false,\n    enabled: !isDemoMode,\n  });\n\n  return {\n    bounties: isDemoMode ? demoBounties : realBounties,\n    isLoading: isDemoMode ? false : isLoading,\n  };\n}","size_bytes":506},"client/src/hooks/usePaymentMethods.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useDemo } from \"@/contexts/DemoContext\";\nimport type { PaymentMethod } from \"@shared/schema\";\n\nexport function usePaymentMethods() {\n  const { isDemoMode, demoPaymentMethods } = useDemo();\n  \n  const { data: realPaymentMethods = [], isLoading, isError, refetch } = useQuery<PaymentMethod[]>({\n    queryKey: [\"/api/payments/methods\"],\n    retry: 1,\n    enabled: !isDemoMode,\n    staleTime: 5 * 60 * 1000 // Consider data fresh for 5 minutes\n  });\n\n  return {\n    paymentMethods: (isDemoMode ? demoPaymentMethods : realPaymentMethods) as PaymentMethod[],\n    isLoading: isDemoMode ? false : isLoading,\n    isError: isDemoMode ? false : isError,\n    refetch,\n  };\n}","size_bytes":721},"client/src/hooks/useTransactions.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useDemo } from \"@/contexts/DemoContext\";\n\nexport function useTransactions() {\n  const { isDemoMode, demoTransactions } = useDemo();\n  \n  const { data: realTransactions = [], isLoading } = useQuery({\n    queryKey: [\"/api/user/transactions\"],\n    retry: false,\n    enabled: !isDemoMode,\n  });\n\n  return {\n    transactions: isDemoMode ? demoTransactions : realTransactions,\n    isLoading: isDemoMode ? false : isLoading,\n  };\n}","size_bytes":483},"client/src/utils/performance.ts":{"content":"// Performance optimization utilities\n\n// Debounce function for search and input handlers\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    \n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n// Throttle function for scroll and resize handlers\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return function executedFunction(this: any, ...args: Parameters<T>) {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n}\n\n// Memoize expensive computations\nexport function memoize<T extends (...args: any[]) => any>(\n  func: T\n): T {\n  const cache = new Map();\n  \n  return (function(this: any, ...args: Parameters<T>) {\n    const key = JSON.stringify(args);\n    \n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    \n    const result = func.apply(this, args);\n    cache.set(key, result);\n    \n    // Limit cache size to prevent memory leaks\n    if (cache.size > 100) {\n      const firstKey = cache.keys().next().value;\n      cache.delete(firstKey);\n    }\n    \n    return result;\n  }) as T;\n}\n\n// Optimize image loading with intersection observer\nexport function lazyLoadImages(selector: string = 'img[data-src]') {\n  const images = document.querySelectorAll<HTMLImageElement>(selector);\n  \n  if ('IntersectionObserver' in window) {\n    const imageObserver = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          const img = entry.target as HTMLImageElement;\n          if (img.dataset.src) {\n            img.src = img.dataset.src;\n            img.removeAttribute('data-src');\n            imageObserver.unobserve(img);\n          }\n        }\n      });\n    });\n    \n    images.forEach(img => imageObserver.observe(img));\n  } else {\n    // Fallback for older browsers\n    images.forEach(img => {\n      if (img.dataset.src) {\n        img.src = img.dataset.src;\n      }\n    });\n  }\n}\n\n// Batch DOM updates for better performance\nexport function batchUpdate(updates: (() => void)[]) {\n  requestAnimationFrame(() => {\n    updates.forEach(update => update());\n  });\n}","size_bytes":2508},"client/src/components/PWAInstallPrompt.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { X, Download, Smartphone } from \"lucide-react\";\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;\n}\n\ninterface PWAInstallPromptProps {\n  onClose?: () => void;\n  showCloseButton?: boolean;\n  className?: string;\n}\n\nexport default function PWAInstallPrompt({ \n  onClose, \n  showCloseButton = true,\n  className = \"\"\n}: PWAInstallPromptProps) {\n  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);\n  const [showPrompt, setShowPrompt] = useState(false);\n\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: Event) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Save the event so it can be triggered later\n      setDeferredPrompt(e as BeforeInstallPromptEvent);\n      setShowPrompt(true);\n    };\n\n    const handleAppInstalled = () => {\n      // Hide the install prompt when app is installed\n      setShowPrompt(false);\n      setDeferredPrompt(null);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const handleInstallClick = async () => {\n    if (!deferredPrompt) return;\n\n    // Show the install prompt\n    deferredPrompt.prompt();\n\n    // Wait for the user to respond to the prompt\n    const { outcome } = await deferredPrompt.userChoice;\n    \n    if (outcome === 'accepted') {\n      console.log('User accepted the install prompt');\n    } else {\n      console.log('User dismissed the install prompt');\n    }\n\n    // Clear the deferredPrompt so it can only be used once\n    setDeferredPrompt(null);\n    setShowPrompt(false);\n  };\n\n  const handleClose = () => {\n    setShowPrompt(false);\n    onClose?.();\n  };\n\n  // Don't show if no install prompt is available or user already dismissed\n  if (!showPrompt || !deferredPrompt) {\n    return null;\n  }\n\n  return (\n    <Card className={`theme-transition border-pocket-gold/20 shadow-lg ${className}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"p-2 bg-pocket-gold/10 rounded-lg\">\n            <Smartphone className=\"h-5 w-5 text-pocket-gold\" />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-sm mb-1\">Get the Pocket Bounty App! 📱</h3>\n            <p className=\"text-xs text-muted-foreground mb-3\">\n              Add to your home screen for instant access to weird bounties and faster notifications!\n            </p>\n            <div className=\"flex gap-2\">\n              <Button \n                size=\"sm\" \n                onClick={handleInstallClick}\n                className=\"bg-pocket-gold hover:bg-pocket-gold/90 text-black\"\n                data-testid=\"button-install-pwa\"\n              >\n                <Download className=\"h-3 w-3 mr-1\" />\n                Add to Home Screen\n              </Button>\n              {showCloseButton && (\n                <Button \n                  size=\"sm\" \n                  variant=\"ghost\" \n                  onClick={handleClose}\n                  data-testid=\"button-close-install-prompt\"\n                >\n                  Maybe Later\n                </Button>\n              )}\n            </div>\n          </div>\n          {showCloseButton && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={handleClose}\n              className=\"p-1 h-auto\"\n              data-testid=\"button-close-install-prompt-x\"\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4052},"client/src/pages/Referrals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Copy, Share2, Users, Gift, CheckCircle2 } from \"lucide-react\";\n\ninterface ReferralStats {\n  referralCount: number;\n  referrals: Array<{\n    id: string;\n    firstName: string | null;\n    lastName: string | null;\n    handle: string | null;\n    createdAt: Date;\n  }>;\n  milestones: Array<{\n    count: number;\n    points: number;\n    reached: boolean;\n  }>;\n}\n\ninterface ReferralCode {\n  referralCode: string;\n  referralCount: number;\n  shareUrl: string;\n}\n\nexport default function Referrals() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [copied, setCopied] = useState(false);\n\n  const { data: referralCode, isLoading: codeLoading } = useQuery<ReferralCode>({\n    queryKey: [\"/api/referral/code\"],\n    enabled: !!user,\n  });\n\n  const { data: stats, isLoading: statsLoading } = useQuery<ReferralStats>({\n    queryKey: [\"/api/referral/stats\"],\n    enabled: !!user,\n  });\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      toast({\n        title: \"Copied!\",\n        description: \"Referral link copied to clipboard\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Please copy the link manually\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const shareNatively = async () => {\n    if (navigator.share && referralCode) {\n      try {\n        await navigator.share({\n          title: \"Join Pocket Bounty!\",\n          text: \"Join me on Pocket Bounty - turn your weird problems into someone's payday! 🪙\",\n          url: referralCode.shareUrl,\n        });\n      } catch (err) {\n        // Fallback to copy\n        copyToClipboard(referralCode.shareUrl);\n      }\n    } else if (referralCode) {\n      copyToClipboard(referralCode.shareUrl);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"text-center text-muted-foreground mt-8\">\n        Please log in to view your referrals\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold text-pocket-gold mb-2\">🎯 Share & Earn</h1>\n        <p className=\"text-muted-foreground\">\n          Share Pocket Bounty with friends and earn bonus points!\n        </p>\n      </div>\n\n      {/* Referral Code Card */}\n      <Card className=\"theme-transition\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Share2 className=\"h-5 w-5 text-pocket-red\" />\n            Your Referral Code\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {codeLoading ? (\n            <div className=\"text-center text-muted-foreground\">Loading your referral code...</div>\n          ) : referralCode ? (\n            <>\n              <div className=\"flex items-center gap-2\">\n                <Input \n                  value={referralCode.referralCode} \n                  readOnly \n                  className=\"font-mono text-lg text-center bg-muted\"\n                  data-testid=\"input-referral-code\"\n                />\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => copyToClipboard(referralCode.referralCode)}\n                  data-testid=\"button-copy-code\"\n                >\n                  {copied ? <CheckCircle2 className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"text-sm text-muted-foreground\">Share this link:</div>\n                <div className=\"flex items-center gap-2\">\n                  <Input \n                    value={referralCode.shareUrl} \n                    readOnly \n                    className=\"text-xs bg-muted\"\n                    data-testid=\"input-share-url\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => copyToClipboard(referralCode.shareUrl)}\n                    data-testid=\"button-copy-url\"\n                  >\n                    {copied ? <CheckCircle2 className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <Button \n                className=\"w-full bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                onClick={shareNatively}\n                data-testid=\"button-share-referral\"\n              >\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Share Referral Link\n              </Button>\n            </>\n          ) : (\n            <div className=\"text-center text-muted-foreground\">Failed to load referral code</div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Stats Card */}\n      <Card className=\"theme-transition\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5 text-blue-500\" />\n            Your Referral Stats\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {statsLoading ? (\n            <div className=\"text-center text-muted-foreground\">Loading stats...</div>\n          ) : stats ? (\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"text-3xl font-bold text-pocket-gold\">\n                  {stats.referralCount}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {stats.referralCount === 1 ? \"Person\" : \"People\"} Referred\n                </div>\n              </div>\n\n              {/* Milestones */}\n              <div className=\"space-y-3\">\n                <h3 className=\"font-semibold flex items-center gap-2\">\n                  <Gift className=\"h-4 w-4\" />\n                  Point Milestones\n                </h3>\n                <div className=\"grid gap-2\">\n                  {stats.milestones.map((milestone) => (\n                    <div \n                      key={milestone.count}\n                      className={`flex items-center justify-between p-3 rounded-lg border ${\n                        milestone.reached \n                          ? \"bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800\" \n                          : \"bg-muted/50\"\n                      }`}\n                      data-testid={`milestone-${milestone.count}`}\n                    >\n                      <div className=\"flex items-center gap-2\">\n                        {milestone.reached ? (\n                          <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <div className=\"h-4 w-4 rounded-full border-2 border-muted-foreground/30\" />\n                        )}\n                        <span className=\"text-sm\">\n                          {milestone.count} referral{milestone.count > 1 ? \"s\" : \"\"}\n                        </span>\n                      </div>\n                      <Badge \n                        variant={milestone.reached ? \"default\" : \"secondary\"}\n                        className={milestone.reached ? \"bg-green-600 text-white\" : \"\"}\n                      >\n                        +{milestone.points} points\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Referral List */}\n              {stats.referrals.length > 0 && (\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-semibold\">People You've Referred</h3>\n                  <div className=\"space-y-2\">\n                    {stats.referrals.map((referral) => (\n                      <div \n                        key={referral.id}\n                        className=\"flex items-center justify-between p-2 bg-muted/50 rounded-lg\"\n                        data-testid={`referral-${referral.id}`}\n                      >\n                        <div>\n                          <div className=\"font-medium text-sm\">\n                            {referral.firstName || referral.lastName \n                              ? `${referral.firstName || \"\"} ${referral.lastName || \"\"}`.trim()\n                              : referral.handle || \"Anonymous User\"\n                            }\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            Joined {new Date(referral.createdAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +10 ⭐\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center text-muted-foreground\">Failed to load stats</div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* How It Works */}\n      <Card className=\"theme-transition border-orange-200 dark:border-orange-800\">\n        <CardHeader>\n          <CardTitle className=\"text-orange-800 dark:text-orange-200\">\n            🎯 How Referrals Work\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"text-sm text-orange-700 dark:text-orange-300 space-y-2\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"font-semibold\">1 referral:</span>\n              <span>+10 bonus points</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"font-semibold\">5 referrals:</span>\n              <span>+50 bonus points</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"font-semibold\">10 referrals:</span>\n              <span>+100 bonus points</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"font-semibold\">20 referrals:</span>\n              <span>+200 bonus points</span>\n            </div>\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-3 p-2 bg-orange-50 dark:bg-orange-900/20 rounded\">\n            💡 Points are awarded when someone signs up using your referral code. \n            Use points to post bounties or save them up!\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11032},"client/src/pages/PointsStore.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { ShoppingCart, Star, Zap, Crown, Gem } from \"lucide-react\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\ninterface PointPackage {\n  id: string;\n  points: number;\n  price: number;\n  label: string;\n  popular?: boolean;\n}\n\ninterface PurchaseResponse {\n  clientSecret: string;\n  package: PointPackage;\n}\n\nconst PackageIcon = ({ packageId }: { packageId: string }) => {\n  const iconProps = { className: \"h-6 w-6\" };\n  \n  switch (packageId) {\n    case \"test\":\n      return <Star {...iconProps} className=\"h-6 w-6 text-gray-500\" />;\n    case \"starter\":\n      return <Star {...iconProps} className=\"h-6 w-6 text-yellow-500\" />;\n    case \"basic\":\n      return <Zap {...iconProps} className=\"h-6 w-6 text-blue-500\" />;\n    case \"popular\":\n      return <Crown {...iconProps} className=\"h-6 w-6 text-purple-500\" />;\n    case \"premium\":\n      return <Gem {...iconProps} className=\"h-6 w-6 text-green-500\" />;\n    case \"mega\":\n      return <Crown {...iconProps} className=\"h-6 w-6 text-orange-500\" />;\n    case \"ultimate\":\n      return <Gem {...iconProps} className=\"h-6 w-6 text-red-500\" />;\n    case \"supreme\":\n      return <Crown {...iconProps} className=\"h-6 w-6 text-gold-500\" />;\n    default:\n      return <Star {...iconProps} />;\n  }\n};\n\nconst CheckoutForm = ({ selectedPackage, onSuccess, onCancel }: { \n  selectedPackage: PointPackage;\n  onSuccess: () => void;\n  onCancel: () => void;\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const confirmPurchaseMutation = useMutation({\n    mutationFn: async (paymentIntentId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/points/confirm-purchase\", { paymentIntentId });\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Purchase Successful! 🎉\",\n        description: data.message || \"Points added successfully!\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Failed to complete purchase\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: window.location.origin,\n        },\n        redirect: 'if_required',\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else if (paymentIntent && paymentIntent.status === 'succeeded') {\n        // Payment succeeded, confirm the purchase on our backend\n        console.log(\"Payment succeeded, attempting confirmation...\");\n        console.log(\"Payment Intent ID:\", paymentIntent.id);\n        confirmPurchaseMutation.mutate(paymentIntent.id);\n      } else {\n        console.log(\"Payment status:\", paymentIntent?.status);\n      }\n    } catch (err: any) {\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Card className=\"max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <PackageIcon packageId={selectedPackage.id} />\n          Complete Purchase\n        </CardTitle>\n        <div className=\"text-center\">\n          <div className=\"text-2xl font-bold text-pocket-gold\">\n            {selectedPackage.points} ⭐ Points\n          </div>\n          <div className=\"text-lg text-muted-foreground\">\n            ${selectedPackage.price.toFixed(2)}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <PaymentElement />\n          <div className=\"flex gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={onCancel}\n              disabled={isProcessing}\n              data-testid=\"button-cancel-purchase\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1 bg-pocket-red hover:bg-pocket-red-dark text-white\"\n              disabled={!stripe || isProcessing || confirmPurchaseMutation.isPending}\n              data-testid=\"button-complete-purchase\"\n            >\n              {isProcessing || confirmPurchaseMutation.isPending ? \"Processing...\" : `Pay $${selectedPackage.price.toFixed(2)}`}\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function PointsStore() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedPackage, setSelectedPackage] = useState<PointPackage | null>(null);\n  const [purchaseData, setPurchaseData] = useState<PurchaseResponse | null>(null);\n\n  const { data: packages, isLoading } = useQuery<PointPackage[]>({\n    queryKey: [\"/api/points/packages\"],\n    enabled: !!user,\n  });\n\n  const purchaseMutation = useMutation<PurchaseResponse, Error, string>({\n    mutationFn: async (packageId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/points/purchase\", { packageId });\n      return response.json();\n    },\n    onSuccess: (data: PurchaseResponse) => {\n      setPurchaseData(data);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Failed to initiate purchase\",\n        variant: \"destructive\",\n      });\n      setSelectedPackage(null);\n    }\n  });\n\n  const handlePurchaseClick = (pkg: PointPackage) => {\n    setSelectedPackage(pkg);\n    purchaseMutation.mutate(pkg.id);\n  };\n\n  const handlePurchaseSuccess = () => {\n    setSelectedPackage(null);\n    setPurchaseData(null);\n  };\n\n  const handlePurchaseCancel = () => {\n    setSelectedPackage(null);\n    setPurchaseData(null);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"text-center text-muted-foreground mt-8\">\n        Please log in to purchase points\n      </div>\n    );\n  }\n\n  // Show checkout form if we have purchase data\n  if (selectedPackage && purchaseData) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-pocket-gold mb-2\">⭐ Points Store</h1>\n          <p className=\"text-muted-foreground\">Complete your purchase</p>\n        </div>\n        \n        <Elements stripe={stripePromise} options={{ clientSecret: purchaseData.clientSecret }}>\n          <CheckoutForm \n            selectedPackage={selectedPackage}\n            onSuccess={handlePurchaseSuccess}\n            onCancel={handlePurchaseCancel}\n          />\n        </Elements>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold text-pocket-gold mb-2\">⭐ Points Store</h1>\n        <p className=\"text-muted-foreground\">\n          Buy points to post more bounties and unlock features!\n        </p>\n        <div className=\"mt-2\">\n          <span className=\"text-sm text-muted-foreground\">Current balance: </span>\n          <span className=\"font-semibold text-pocket-gold\">{user.points || 0} ⭐</span>\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center text-muted-foreground\">Loading packages...</div>\n      ) : packages ? (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {packages.map((pkg) => (\n            <Card \n              key={pkg.id} \n              className={`relative theme-transition ${\n                pkg.popular \n                  ? \"border-pocket-red ring-2 ring-pocket-red/20\" \n                  : \"hover:border-pocket-gold/50\"\n              }`}\n              data-testid={`package-${pkg.id}`}\n            >\n              {pkg.popular && (\n                <Badge \n                  className=\"absolute -top-2 left-1/2 transform -translate-x-1/2 bg-pocket-red text-white\"\n                >\n                  Most Popular\n                </Badge>\n              )}\n              \n              <CardHeader className=\"text-center\">\n                <div className=\"flex justify-center mb-2\">\n                  <PackageIcon packageId={pkg.id} />\n                </div>\n                <CardTitle className=\"text-lg\">{pkg.label}</CardTitle>\n                <div className=\"space-y-1\">\n                  <div className=\"text-3xl font-bold text-pocket-gold\">\n                    {pkg.points} ⭐\n                  </div>\n                  <div className=\"text-2xl font-semibold\">\n                    ${pkg.price.toFixed(2)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    ${(pkg.price / pkg.points).toFixed(3)} per point\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                <Button\n                  className=\"w-full bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                  onClick={() => handlePurchaseClick(pkg)}\n                  disabled={purchaseMutation.isPending}\n                  data-testid={`button-buy-${pkg.id}`}\n                >\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  {purchaseMutation.isPending && selectedPackage?.id === pkg.id \n                    ? \"Processing...\" \n                    : \"Buy Now\"\n                  }\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center text-muted-foreground\">Failed to load packages</div>\n      )}\n\n      {/* Info Section */}\n      <Card className=\"theme-transition border-blue-200 dark:border-blue-800\">\n        <CardHeader>\n          <CardTitle className=\"text-blue-800 dark:text-blue-200 flex items-center gap-2\">\n            <Star className=\"h-5 w-5\" />\n            How Points Work\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"text-sm text-blue-700 dark:text-blue-300 space-y-2\">\n            <div className=\"flex items-start gap-2\">\n              <span className=\"font-semibold\">Post Bounties:</span>\n              <span>Use 5 points to post any bounty</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"font-semibold\">Earn More:</span>\n              <span>Play Flappy Bird or refer friends</span>\n            </div>\n            <div className=\"flex items-start gap-2\">\n              <span className=\"font-semibold\">Safe & Secure:</span>\n              <span>Payments processed securely by Stripe</span>\n            </div>\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-3 p-2 bg-blue-50 dark:bg-blue-900/20 rounded\">\n            💡 Points never expire and can be used anytime. Bigger packages offer better value per point!\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12218},"client/src/components/Game2048.tsx":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ntype Board = number[][];\n\ninterface GameStats {\n  score: number;\n  bestScore: number;\n  moves: number;\n}\n\nconst BOARD_SIZE = 4;\nconst WIN_TILE = 2048;\n\nexport default function Game2048() {\n  const [board, setBoard] = useState<Board>(() => initializeBoard());\n  const [gameStats, setGameStats] = useState<GameStats>({\n    score: 0,\n    bestScore: parseInt(localStorage.getItem(\"2048-best-score\") || \"0\", 10),\n    moves: 0,\n  });\n  const [gameWon, setGameWon] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [animationKey, setAnimationKey] = useState(0);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `2048 game - scored ${gameStats.score} points`,\n      });\n    },\n    onSuccess: (_, points) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${points} points from your 2048 game!`,\n      });\n    },\n  });\n\n  function initializeBoard(): Board {\n    const newBoard = Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(0));\n    addRandomTile(newBoard);\n    addRandomTile(newBoard);\n    return newBoard;\n  }\n\n  function addRandomTile(board: Board): Board {\n    const emptyCells: [number, number][] = [];\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        if (board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n    \n    if (emptyCells.length > 0) {\n      const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    \n    return board;\n  }\n\n  function moveRow(row: number[], direction: 'left' | 'right'): { newRow: number[]; scoreGain: number; moved: boolean } {\n    let scoreGain = 0;\n    let moved = false;\n    \n    // Filter out zeros\n    let filteredRow = row.filter(cell => cell !== 0);\n    \n    // Reverse if moving right\n    if (direction === 'right') {\n      filteredRow = filteredRow.reverse();\n    }\n    \n    // Merge tiles\n    const mergedRow = [];\n    let i = 0;\n    while (i < filteredRow.length) {\n      if (i < filteredRow.length - 1 && filteredRow[i] === filteredRow[i + 1]) {\n        const mergedValue = filteredRow[i] * 2;\n        mergedRow.push(mergedValue);\n        scoreGain += mergedValue;\n        i += 2;\n      } else {\n        mergedRow.push(filteredRow[i]);\n        i++;\n      }\n    }\n    \n    // Add zeros and reverse back if needed\n    let finalRow;\n    if (direction === 'right') {\n      finalRow = [...Array(BOARD_SIZE - mergedRow.length).fill(0), ...mergedRow.reverse()];\n    } else {\n      finalRow = [...mergedRow, ...Array(BOARD_SIZE - mergedRow.length).fill(0)];\n    }\n    \n    if (JSON.stringify(row) !== JSON.stringify(finalRow)) {\n      moved = true;\n    }\n    \n    return { newRow: finalRow, scoreGain, moved };\n  }\n\n  function move(direction: 'left' | 'right' | 'up' | 'down'): void {\n    let newBoard = [...board.map(row => [...row])];\n    let totalScore = 0;\n    let anyMoved = false;\n    \n    if (direction === 'left' || direction === 'right') {\n      // Move rows horizontally\n      for (let i = 0; i < BOARD_SIZE; i++) {\n        const { newRow, scoreGain, moved } = moveRow(newBoard[i], direction);\n        newBoard[i] = newRow;\n        totalScore += scoreGain;\n        if (moved) anyMoved = true;\n      }\n    } else {\n      // Move columns vertically\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        const column = newBoard.map(row => row[j]);\n        const { newRow, scoreGain, moved } = moveRow(column, direction === 'up' ? 'left' : 'right');\n        for (let i = 0; i < BOARD_SIZE; i++) {\n          newBoard[i][j] = newRow[i];\n        }\n        totalScore += scoreGain;\n        if (moved) anyMoved = true;\n      }\n    }\n    \n    if (anyMoved) {\n      addRandomTile(newBoard);\n      setBoard(newBoard);\n      setGameStats(prev => ({\n        ...prev,\n        score: prev.score + totalScore,\n        moves: prev.moves + 1,\n      }));\n      setAnimationKey(prev => prev + 1);\n      \n      // Check for win condition\n      if (!gameWon && newBoard.some(row => row.some(cell => cell >= WIN_TILE))) {\n        setGameWon(true);\n        const finalScore = gameStats.score + totalScore;\n        const pointsEarned = Math.floor(finalScore / 50); // Better reward for winning\n        if (pointsEarned > 0) {\n          awardPointsMutation.mutate(pointsEarned);\n        }\n        toast({\n          title: \"🎉 You Won!\",\n          description: `You reached 2048! Earned ${pointsEarned} points! Keep playing for more.`,\n        });\n      }\n      \n      // Check for game over\n      if (isGameOver(newBoard)) {\n        setGameOver(true);\n        const finalScore = gameStats.score + totalScore;\n        const pointsEarned = Math.floor(finalScore / 100); // Still decent points for trying\n        if (pointsEarned > 0) {\n          awardPointsMutation.mutate(pointsEarned);\n        }\n        toast({\n          title: \"Game Over\",\n          description: `Final score: ${finalScore}. You earned ${pointsEarned} points!`,\n        });\n      }\n    }\n  }\n\n  function isGameOver(board: Board): boolean {\n    // Check for empty cells\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        if (board[i][j] === 0) return false;\n      }\n    }\n    \n    // Check for possible merges\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let j = 0; j < BOARD_SIZE; j++) {\n        const current = board[i][j];\n        if (\n          (i < BOARD_SIZE - 1 && board[i + 1][j] === current) ||\n          (j < BOARD_SIZE - 1 && board[i][j + 1] === current)\n        ) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  }\n\n  function resetGame() {\n    const newBoard = initializeBoard();\n    setBoard(newBoard);\n    setGameStats(prev => ({\n      score: 0,\n      bestScore: Math.max(prev.bestScore, prev.score),\n      moves: 0,\n    }));\n    setGameWon(false);\n    setGameOver(false);\n    setAnimationKey(0);\n  }\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  // Save best score to localStorage\n  useEffect(() => {\n    if (gameStats.score > gameStats.bestScore) {\n      localStorage.setItem(\"2048-best-score\", gameStats.score.toString());\n    }\n  }, [gameStats.score, gameStats.bestScore]);\n\n  // Handle movement for both keyboard and mobile\n  const handleMove = useCallback((direction: \"left\" | \"right\" | \"up\" | \"down\") => {\n    if (gameOver) return;\n    move(direction);\n  }, [gameOver]);\n\n  const handleKeyPress = useCallback((e: { key: string }) => {\n    if (gameOver) return;\n    \n    switch (e.key) {\n      case 'ArrowLeft':\n      case 'a':\n      case 'A':\n        handleMove('left');\n        break;\n      case 'ArrowRight':\n      case 'd':\n      case 'D':\n        handleMove('right');\n        break;\n      case 'ArrowUp':\n      case 'w':\n      case 'W':\n        handleMove('up');\n        break;\n      case 'ArrowDown':\n      case 's':\n      case 'S':\n        handleMove('down');\n        break;\n    }\n  }, [gameOver, handleMove]);\n\n  // Keyboard controls\n  useEffect(() => {\n    const keyboardHandler = (e: KeyboardEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      handleKeyPress({ key: e.key });\n    };\n\n    if (!gameOver) {\n      document.addEventListener('keydown', keyboardHandler, { capture: true });\n      return () => document.removeEventListener('keydown', keyboardHandler, { capture: true });\n    }\n  }, [gameOver, handleKeyPress]);\n\n  function getTileColor(value: number): string {\n    const colors: Record<number, string> = {\n      2: \"bg-slate-100 text-slate-800\",\n      4: \"bg-slate-200 text-slate-800\",\n      8: \"bg-orange-200 text-orange-800\",\n      16: \"bg-orange-300 text-orange-900\",\n      32: \"bg-orange-400 text-white\",\n      64: \"bg-orange-500 text-white\",\n      128: \"bg-yellow-300 text-yellow-900\",\n      256: \"bg-yellow-400 text-yellow-900\",\n      512: \"bg-yellow-500 text-white\",\n      1024: \"bg-red-400 text-white\",\n      2048: \"bg-red-500 text-white\",\n    };\n    \n    return colors[value] || \"bg-red-600 text-white\";\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <div className=\"relative inline-block\">\n          <h2 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-orange-400 to-red-600 bg-clip-text text-transparent\">🔢 2048</h2>\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-orange-400 to-red-600 rounded-lg blur opacity-20 animate-pulse\"></div>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          Merge tiles and reach the ultimate 2048 goal!\n        </p>\n      </div>\n\n      {/* Game Stats */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\" data-testid=\"badge-2048-score\">\n              Score: <span className=\"font-bold\">{gameStats.score}</span>\n            </Badge>\n            <Badge variant=\"outline\" data-testid=\"badge-2048-best\">\n              Best: <span className=\"font-bold\">{gameStats.bestScore}</span>\n            </Badge>\n            <Badge variant=\"outline\" data-testid=\"badge-2048-moves\">\n              Moves: <span className=\"font-bold\">{gameStats.moves}</span>\n            </Badge>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={resetGame}\n            data-testid=\"button-2048-reset\"\n          >\n            New Game\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Game Board */}\n      <Card className=\"theme-transition shadow-2xl border-2 border-orange-500/20\">\n        <CardContent className=\"p-4 bg-gradient-to-br from-orange-50/50 to-red-50/50 dark:from-orange-950/20 dark:to-red-950/20\">\n          <div \n            className=\"grid grid-cols-4 gap-3 bg-gradient-to-br from-orange-200 to-red-200 dark:from-orange-900/50 dark:to-red-900/50 p-4 rounded-xl max-w-80 mx-auto focus:outline-none focus:ring-4 focus:ring-orange-500/50 shadow-inner border border-orange-300 dark:border-orange-700\"\n            data-testid=\"board-2048\"\n            tabIndex={0}\n            key={animationKey}\n          >\n            {board.map((row, i) =>\n              row.map((cell, j) => (\n                <div\n                  key={`${i}-${j}`}\n                  className={`\n                    w-16 h-16 rounded flex items-center justify-center font-bold text-sm\n                    transition-all duration-150 ease-in-out\n                    ${cell === 0 \n                      ? \"bg-slate-200 dark:bg-slate-600\" \n                      : `${getTileColor(cell)} transform scale-105`\n                    }\n                  `}\n                  data-testid={`tile-${i}-${j}`}\n                >\n                  {cell !== 0 && cell}\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* Touch Controls for Mobile */}\n          <div className=\"grid grid-cols-3 gap-2 mt-4 max-w-48 mx-auto\">\n            <div></div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onPointerDown={() => move('up')}\n              data-testid=\"button-2048-up\"\n            >\n              ↑\n            </Button>\n            <div></div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onPointerDown={() => move('left')}\n              data-testid=\"button-2048-left\"\n            >\n              ←\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onPointerDown={() => move('down')}\n              data-testid=\"button-2048-down\"\n            >\n              ↓\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onPointerDown={() => move('right')}\n              data-testid=\"button-2048-right\"\n            >\n              →\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Game Status */}\n      {(gameWon || gameOver) && (\n        <Card className=\"theme-transition border-pocket-gold\">\n          <CardContent className=\"p-4 text-center\">\n            {gameWon && !gameOver && (\n              <div className=\"space-y-2\">\n                <div className=\"text-xl font-bold text-pocket-gold\">🎉 You Won!</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  You reached 2048! Continue playing for a higher score.\n                </div>\n              </div>\n            )}\n            {gameOver && (\n              <div className=\"space-y-2\">\n                <div className=\"text-xl font-bold text-red-500\">Game Over!</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  Final Score: {gameStats.score}\n                </div>\n                <Button\n                  onClick={resetGame}\n                  className=\"mt-2\"\n                  data-testid=\"button-2048-play-again\"\n                >\n                  Play Again\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Instructions */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3\">\n          <div className=\"text-xs text-muted-foreground text-center space-y-1\">\n            <div><strong>HOW TO PLAY:</strong> Use arrow keys to move tiles.</div>\n            <div>When two tiles with the same number touch, they merge into one!</div>\n            <div><strong>POINTS:</strong> Win = 1 point per 50 score, Game Over = 1 point per 100 score</div>\n          </div>\n        </CardContent>\n      </Card>\n      {/* Mobile Controls */}\n      <div className=\"flex justify-center gap-8 sm:hidden\">\n        {/* Directional Pad */}\n        <div className=\"relative\">\n          <div className=\"grid grid-cols-3 gap-1 w-32 h-32\">\n            {/* Top */}\n            <div></div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={() => handleKeyPress({ key: 'ArrowUp' } as KeyboardEvent)}\n              onClick={() => handleKeyPress({ key: 'ArrowUp' } as KeyboardEvent)}\n              disabled={gameOver}\n            >\n              ↑\n            </Button>\n            <div></div>\n            \n            {/* Middle */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={() => handleKeyPress({ key: 'ArrowLeft' } as KeyboardEvent)}\n              onClick={() => handleKeyPress({ key: 'ArrowLeft' } as KeyboardEvent)}\n              disabled={gameOver}\n            >\n              ←\n            </Button>\n            <div className=\"w-10 h-10 flex items-center justify-center text-xs text-muted-foreground\">2048</div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={() => handleKeyPress({ key: 'ArrowRight' } as KeyboardEvent)}\n              onClick={() => handleKeyPress({ key: 'ArrowRight' } as KeyboardEvent)}\n              disabled={gameOver}\n            >\n              →\n            </Button>\n            \n            {/* Bottom */}\n            <div></div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={() => handleKeyPress({ key: 'ArrowDown' } as KeyboardEvent)}\n              onClick={() => handleKeyPress({ key: 'ArrowDown' } as KeyboardEvent)}\n              disabled={gameOver}\n            >\n              ↓\n            </Button>\n            <div></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17272},"client/src/pages/Arcade.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport FlappyGame from \"./FlappyGame\";\nimport Game2048 from \"@/components/Game2048\";\nimport SnakeGame from \"@/components/SnakeGame\";\nimport SpaceInvaders from \"@/components/SpaceInvaders\";\nimport MemoryMatch from \"@/components/MemoryMatch\";\nimport Breakout from \"@/components/Breakout\";\nimport WhackAMole from \"@/components/WhackAMole\";\nimport TetrisGame from \"@/components/TetrisGame\";\nimport SimonSays from \"@/components/SimonSays\";\nimport ConnectFour from \"@/components/ConnectFour\";\nimport AsteroidsGame from \"@/components/AsteroidsGame\";\nimport PacManGame from \"@/components/PacManGame\";\nimport RacingGame from \"@/components/RacingGame\";\n\nexport default function Arcade() {\n  const [activeGame, setActiveGame] = useState(\"overview\");\n\n  if (activeGame === \"flappy\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <FlappyGame />\n      </div>\n    );\n  }\n\n  if (activeGame === \"2048\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <Game2048 />\n      </div>\n    );\n  }\n\n  if (activeGame === \"snake\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <SnakeGame />\n      </div>\n    );\n  }\n\n  if (activeGame === \"space-invaders\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <SpaceInvaders />\n      </div>\n    );\n  }\n\n  if (activeGame === \"memory-match\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <MemoryMatch />\n      </div>\n    );\n  }\n\n  if (activeGame === \"breakout\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <Breakout />\n      </div>\n    );\n  }\n\n  if (activeGame === \"whack-a-mole\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <WhackAMole />\n      </div>\n    );\n  }\n\n  if (activeGame === \"tetris\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <TetrisGame />\n      </div>\n    );\n  }\n\n  if (activeGame === \"simon-says\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <SimonSays />\n      </div>\n    );\n  }\n\n  if (activeGame === \"connect-four\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <ConnectFour />\n      </div>\n    );\n  }\n\n  if (activeGame === \"asteroids\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <AsteroidsGame />\n      </div>\n    );\n  }\n\n  if (activeGame === \"pacman\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <PacManGame />\n      </div>\n    );\n  }\n\n  if (activeGame === \"racing\") {\n    return (\n      <div className=\"min-h-screen\">\n        <div className=\"flex items-center justify-between p-4\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setActiveGame(\"overview\")}\n            data-testid=\"button-back-to-arcade\"\n          >\n            ← Back to Arcade\n          </Button>\n        </div>\n        <RacingGame />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h1 className=\"text-2xl font-bold mb-2\">🎮 Arcade</h1>\n        <p className=\"text-sm text-muted-foreground\">\n          Play games to earn bonus points! Choose your favorite game below.\n        </p>\n      </div>\n\n      {/* Game Selection */}\n      <div className=\"grid gap-4\">\n        {/* Flappy Bird */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"flappy\")}\n          data-testid=\"card-flappy-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🐤</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Flappy Bounty</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Navigate through pipes and earn points for your high scores!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 5 score\n                  </span>\n                  <span className=\"text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded\">\n                    Arcade Classic\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* 2048 */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"2048\")}\n          data-testid=\"card-2048-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🔢</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">2048</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Combine number tiles to reach 2048 and earn big points!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    Win: 1 point per 50 score\n                  </span>\n                  <span className=\"text-xs bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200 px-2 py-1 rounded\">\n                    Brain Training\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Snake Game */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"snake\")}\n          data-testid=\"card-snake-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🐍</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Snake</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Classic snake game - eat food to grow and avoid hitting yourself!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 3 score\n                  </span>\n                  <span className=\"text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded\">\n                    Classic Arcade\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Space Invaders */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"space-invaders\")}\n          data-testid=\"card-space-invaders-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🚀</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Space Invaders</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Defend Earth from waves of alien invaders!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 10 score\n                  </span>\n                  <span className=\"text-xs bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 px-2 py-1 rounded\">\n                    Action Shooter\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Memory Match */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"memory-match\")}\n          data-testid=\"card-memory-match-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🧠</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Memory Match</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Test your memory by matching pairs of cards!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    Points for speed\n                  </span>\n                  <span className=\"text-xs bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 px-2 py-1 rounded\">\n                    Brain Training\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Breakout */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"breakout\")}\n          data-testid=\"card-breakout-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🧱</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Breakout</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Break all the bricks with your bouncing ball!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 15 score\n                  </span>\n                  <span className=\"text-xs bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-200 px-2 py-1 rounded\">\n                    Skill Game\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Whack-a-Mole */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"whack-a-mole\")}\n          data-testid=\"card-whack-a-mole-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🔨</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Whack-a-Mole</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Hit the moles as fast as you can for points!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 8 score\n                  </span>\n                  <span className=\"text-xs bg-pink-100 dark:bg-pink-900 text-pink-800 dark:text-pink-200 px-2 py-1 rounded\">\n                    Reaction Game\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tetris */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"tetris\")}\n          data-testid=\"card-tetris-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🧩</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Tetris</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Clear lines by arranging falling blocks perfectly!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 25 score\n                  </span>\n                  <span className=\"text-xs bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200 px-2 py-1 rounded\">\n                    Puzzle Classic\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Simon Says */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"simon-says\")}\n          data-testid=\"card-simon-says-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🎵</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Simon Says</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Repeat the color sequence to test your memory!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 6 score\n                  </span>\n                  <span className=\"text-xs bg-teal-100 dark:bg-teal-900 text-teal-800 dark:text-teal-200 px-2 py-1 rounded\">\n                    Memory Game\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Connect Four */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"connect-four\")}\n          data-testid=\"card-connect-four-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🔴</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Connect Four</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Drop pieces to get four in a row against the AI!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    Points for wins\n                  </span>\n                  <span className=\"text-xs bg-cyan-100 dark:bg-cyan-900 text-cyan-800 dark:text-cyan-200 px-2 py-1 rounded\">\n                    Strategy Game\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Asteroids */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"asteroids\")}\n          data-testid=\"card-asteroids-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🚀</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Asteroids</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Pilot a spaceship and destroy asteroids in space!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 12 score\n                  </span>\n                  <span className=\"text-xs bg-violet-100 dark:bg-violet-900 text-violet-800 dark:text-violet-200 px-2 py-1 rounded\">\n                    Space Shooter\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Pac-Man */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"pacman\")}\n          data-testid=\"card-pacman-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">👻</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Pac-Man</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Navigate the maze, collect dots, and avoid ghosts!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 18 score\n                  </span>\n                  <span className=\"text-xs bg-amber-100 dark:bg-amber-900 text-amber-800 dark:text-amber-200 px-2 py-1 rounded\">\n                    Maze Game\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Racing Game */}\n        <Card \n          className=\"theme-transition cursor-pointer hover:bg-accent/50 transition-colors\"\n          onClick={() => setActiveGame(\"racing\")}\n          data-testid=\"card-racing-game\"\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-4xl\">🏎️</div>\n              <div className=\"flex-1\">\n                <h3 className=\"font-bold text-lg\">Racing</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Drive fast, avoid traffic, and manage your fuel!\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <span className=\"text-xs bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 px-2 py-1 rounded\">\n                    1 point per 22 score\n                  </span>\n                  <span className=\"text-xs bg-emerald-100 dark:bg-emerald-900 text-emerald-800 dark:text-emerald-200 px-2 py-1 rounded\">\n                    Racing Game\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-pocket-gold\">\n                <span className=\"text-xl\">→</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Arcade Stats */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-bold mb-3\">🏆 Your Best Scores</h3>\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"flappy-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Flappy</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"2048-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">2048</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"snake-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Snake</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"space-invaders-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Space</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"memory-match-best-score\") === \"999\" ? \"--\" : localStorage.getItem(\"memory-match-best-score\") || \"--\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Memory</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"breakout-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Breakout</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"whack-a-mole-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Whack</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"tetris-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Tetris</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"simon-says-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Simon</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"connect-four-wins\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Connect4</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"asteroids-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Asteroids</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"pacman-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Pac-Man</div>\n            </div>\n            <div>\n              <div className=\"text-lg font-bold text-pocket-gold\">\n                {localStorage.getItem(\"racing-best-score\") || \"0\"}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Racing</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Game Tips */}\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-bold mb-3\">💡 Pro Tips</h3>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div>• <strong>Action Games:</strong> Space Invaders, Asteroids - Stay mobile!</div>\n            <div>• <strong>Puzzle Games:</strong> Tetris, 2048 - Think ahead and plan moves</div>\n            <div>• <strong>Memory Games:</strong> Simon Says, Memory Match - Focus and concentrate</div>\n            <div>• <strong>Classic Games:</strong> Snake, Pac-Man - Learn the patterns</div>\n            <div>• <strong>Skill Games:</strong> Breakout, Racing - Practice makes perfect</div>\n            <div>• <strong>Points:</strong> All games award ⭐ based on your performance!</div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":28462},"client/src/components/FeedbackButton.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageCircle, Bug, Lightbulb } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function FeedbackButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [feedbackType, setFeedbackType] = useState<\"bug\" | \"feedback\" | \"suggestion\">(\"feedback\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const sendFeedbackMutation = useMutation({\n    mutationFn: async (data: { message: string; type: string }) => {\n      return apiRequest(\"POST\", \"/api/feedback\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Feedback Sent! 📬\",\n        description: \"Thanks for your feedback! Dallas will get back to you soon.\",\n      });\n      setMessage(\"\");\n      setIsOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages/threads\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Please Log In\",\n          description: \"You need to be logged in to send feedback.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSend = () => {\n    if (!message.trim()) return;\n    \n    const typePrefix = {\n      bug: \"🐛 Bug Report: \",\n      feedback: \"💭 Feedback: \",\n      suggestion: \"💡 Suggestion: \"\n    }[feedbackType];\n\n    sendFeedbackMutation.mutate({\n      message: `${typePrefix}${message.trim()}`,\n      type: feedbackType\n    });\n  };\n\n  if (!user) {\n    return (\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        className=\"fixed bottom-20 right-4 z-50 bg-pocket-red hover:bg-pocket-red-dark text-white border-pocket-red shadow-lg\"\n        onClick={() => {\n          toast({\n            title: \"Please Log In\",\n            description: \"You need to be logged in to send feedback to the creator.\",\n            variant: \"default\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/api/login\";\n          }, 1500);\n        }}\n        data-testid=\"button-feedback-login\"\n      >\n        <MessageCircle className=\"h-4 w-4 mr-2\" />\n        💬 Talk to Creator\n      </Button>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"fixed bottom-20 right-4 z-50 bg-pocket-red hover:bg-pocket-red-dark text-white border-pocket-red shadow-lg\"\n          data-testid=\"button-feedback\"\n        >\n          <MessageCircle className=\"h-4 w-4 mr-2\" />\n          💬 Talk to Creator\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"h-5 w-5 text-pocket-red\" />\n            Send Feedback to Dallas\n          </DialogTitle>\n          <DialogDescription>\n            Found a bug? Have a suggestion? Want to give feedback? Dallas Abbott (the creator) would love to hear from you!\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Button\n              variant={feedbackType === \"feedback\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFeedbackType(\"feedback\")}\n              className=\"flex-1\"\n            >\n              <MessageCircle className=\"h-4 w-4 mr-1\" />\n              Feedback\n            </Button>\n            <Button\n              variant={feedbackType === \"bug\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFeedbackType(\"bug\")}\n              className=\"flex-1\"\n            >\n              <Bug className=\"h-4 w-4 mr-1\" />\n              Bug Report\n            </Button>\n            <Button\n              variant={feedbackType === \"suggestion\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFeedbackType(\"suggestion\")}\n              className=\"flex-1\"\n            >\n              <Lightbulb className=\"h-4 w-4 mr-1\" />\n              Suggestion\n            </Button>\n          </div>\n\n          <Textarea\n            placeholder={\n              feedbackType === \"bug\" \n                ? \"Describe the bug you found - what happened and what you expected to happen...\"\n                : feedbackType === \"suggestion\"\n                ? \"What feature or improvement would you like to see...\"\n                : \"Share your thoughts about the app...\"\n            }\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            rows={4}\n            className=\"resize-none\"\n            data-testid=\"textarea-feedback-message\"\n          />\n\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-xs text-muted-foreground\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                💬 Chat with creator\n              </Badge>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsOpen(false)}\n                disabled={sendFeedbackMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSend}\n                disabled={!message.trim() || sendFeedbackMutation.isPending}\n                className=\"bg-pocket-red hover:bg-pocket-red-dark\"\n                data-testid=\"button-send-feedback\"\n              >\n                {sendFeedbackMutation.isPending ? \"Sending...\" : \"Send\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6465},"client/src/pages/CreatorInbox.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { ArrowLeft, MessageCircle, Bug, Lightbulb, Users, Clock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatDate } from \"@/lib/utils\";\n\nexport default function CreatorInbox() {\n  const [selectedThread, setSelectedThread] = useState<any>(null);\n  const [messageText, setMessageText] = useState(\"\");\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if user is the creator (Dallas Abbott)\n  if (!user || user.id !== \"46848986\") {\n    return (\n      <div className=\"text-center text-muted-foreground mt-8\">\n        <MessageCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n        <h3 className=\"text-lg font-medium mb-2\">Creator Access Only</h3>\n        <p>This inbox is only accessible to the app creator.</p>\n      </div>\n    );\n  }\n\n  const { data: feedbackThreads = [], isLoading: threadsLoading } = useQuery({\n    queryKey: [\"/api/creator/feedback-threads\"],\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery({\n    queryKey: [\"/api/messages/threads\", selectedThread?.id],\n    enabled: !!selectedThread?.id,\n  });\n\n  // WebSocket for real-time messages\n  useWebSocket({\n    onMessage: (data) => {\n      if (data.type === \"new_message\") {\n        queryClient.invalidateQueries({ queryKey: [\"/api/creator/feedback-threads\"] });\n        if (selectedThread?.id === data.threadId) {\n          queryClient.invalidateQueries({ \n            queryKey: [\"/api/messages/threads\", selectedThread.id] \n          });\n        }\n      }\n    },\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      return apiRequest(\"POST\", \"/api/messages\", {\n        threadId: selectedThread.id,\n        content,\n      });\n    },\n    onSuccess: () => {\n      setMessageText(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/messages/threads\", selectedThread.id] \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/creator/feedback-threads\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!messageText.trim()) return;\n    sendMessageMutation.mutate(messageText.trim());\n  };\n\n  const getFeedbackIcon = (message: string) => {\n    if (message.includes(\"🐛 Bug Report:\")) return <Bug className=\"h-4 w-4 text-red-500\" />;\n    if (message.includes(\"💡 Suggestion:\")) return <Lightbulb className=\"h-4 w-4 text-yellow-500\" />;\n    return <MessageCircle className=\"h-4 w-4 text-blue-500\" />;\n  };\n\n  const getFeedbackType = (message: string) => {\n    if (message.includes(\"🐛 Bug Report:\")) return { label: \"Bug\", color: \"destructive\" as const };\n    if (message.includes(\"💡 Suggestion:\")) return { label: \"Suggestion\", color: \"secondary\" as const };\n    return { label: \"Feedback\", color: \"default\" as const };\n  };\n\n  if (threadsLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"h-6 bg-muted rounded w-48 animate-pulse\"></div>\n          <div className=\"h-8 bg-muted rounded w-16 animate-pulse\"></div>\n        </div>\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className=\"bg-card border border-border rounded-xl p-4 animate-pulse\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"h-10 w-10 bg-muted rounded-full\"></div>\n              <div className=\"flex-1 space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-32\"></div>\n                <div className=\"h-3 bg-muted rounded w-48\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (selectedThread) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setSelectedThread(null)}\n            data-testid=\"button-back-to-inbox\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Inbox\n          </Button>\n          <div className=\"flex items-center gap-2\">\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={selectedThread.otherUser?.profileImageUrl} />\n              <AvatarFallback>\n                {selectedThread.otherUser?.firstName?.charAt(0) || 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <p className=\"font-medium text-sm\">\n                {selectedThread.otherUser?.firstName} {selectedThread.otherUser?.lastName}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                @{selectedThread.otherUser?.handle || 'user'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <Card className=\"h-[400px] flex flex-col\">\n          <CardContent className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {messagesLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className={`flex ${i % 2 === 0 ? 'justify-start' : 'justify-end'}`}>\n                    <div className=\"bg-muted rounded-lg p-3 max-w-[70%] animate-pulse\">\n                      <div className=\"h-4 bg-muted-foreground/20 rounded w-32\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              messages.map((message: any) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.senderId === user.id ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div className={`rounded-lg p-3 max-w-[70%] ${\n                    message.senderId === user.id\n                      ? 'bg-pocket-red text-white'\n                      : 'bg-muted'\n                  }`}>\n                    <div className=\"flex items-start gap-2\">\n                      {message.senderId !== user.id && getFeedbackIcon(message.content)}\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm\">{message.content}</p>\n                        <p className={`text-xs mt-1 ${\n                          message.senderId === user.id ? 'text-white/70' : 'text-muted-foreground'\n                        }`}>\n                          {formatDate(message.createdAt)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </CardContent>\n          \n          <div className=\"p-4 border-t\">\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Reply to user...\"\n                value={messageText}\n                onChange={(e) => setMessageText(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}\n                data-testid=\"input-creator-reply\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!messageText.trim() || sendMessageMutation.isPending}\n                className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                data-testid=\"button-send-creator-reply\"\n              >\n                Send\n              </Button>\n            </div>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-lg font-bold flex items-center gap-2\">\n            <MessageCircle className=\"h-5 w-5 text-pocket-red\" />\n            Creator Inbox\n          </h2>\n          <p className=\"text-sm text-muted-foreground\">\n            User feedback, bug reports, and suggestions\n          </p>\n        </div>\n        <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n          <Users className=\"h-3 w-3\" />\n          {feedbackThreads.length} conversations\n        </Badge>\n      </div>\n\n      {feedbackThreads.length === 0 ? (\n        <Card className=\"text-center py-8\">\n          <CardContent>\n            <MessageCircle className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground/50\" />\n            <h3 className=\"text-lg font-medium mb-2\">No feedback yet</h3>\n            <p className=\"text-muted-foreground\">\n              When users send feedback, bug reports, or suggestions, they'll appear here.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-3\">\n          {feedbackThreads.map((thread: any) => {\n            const feedbackType = getFeedbackType(thread.lastMessage?.content || \"\");\n            return (\n              <Card\n                key={thread.id}\n                className=\"cursor-pointer transition-colors hover:bg-muted/50\"\n                onClick={() => setSelectedThread(thread)}\n                data-testid={`thread-${thread.id}`}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarImage src={thread.otherUser?.profileImageUrl} />\n                      <AvatarFallback>\n                        {thread.otherUser?.firstName?.charAt(0) || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <p className=\"font-medium text-sm\">\n                          {thread.otherUser?.firstName} {thread.otherUser?.lastName}\n                        </p>\n                        <Badge variant={feedbackType.color} className=\"text-xs\">\n                          {feedbackType.label}\n                        </Badge>\n                        {!thread.lastMessage?.readAt && thread.lastMessage?.senderId !== user.id && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">New</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground truncate\">\n                        {thread.lastMessage?.content || \"No messages yet\"}\n                      </p>\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatDate(thread.lastMessageAt)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11829},"client/public/pwa-fixes.js":{"content":"// PWA Input Fixes for iOS Safari standalone mode\n(function() {\n  'use strict';\n  \n  // Check if running as PWA\n  const isStandalone = window.navigator.standalone || window.matchMedia('(display-mode: standalone)').matches;\n  \n  // Apply fixes when DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', applyFixes);\n  } else {\n    applyFixes();\n  }\n  \n  function applyFixes() {\n    // Fix all current and future inputs\n    fixAllInputs();\n    observeNewInputs();\n    \n    // Additional viewport fix for iOS\n    if (isStandalone) {\n      document.addEventListener('touchstart', function() {}, { passive: true });\n    }\n  }\n  \n  function fixAllInputs() {\n    const inputs = document.querySelectorAll('input[type=\"text\"], input[type=\"tel\"], input[type=\"number\"], input[type=\"email\"], input[type=\"password\"]');\n    inputs.forEach(fixSingleInput);\n  }\n  \n  function fixSingleInput(input) {\n    // Set font size to prevent iOS zoom\n    if (!input.dataset.pwaFixed) {\n      input.dataset.pwaFixed = 'true';\n      \n      // Ensure 16px font size minimum\n      const computedStyle = window.getComputedStyle(input);\n      const fontSize = parseInt(computedStyle.fontSize);\n      if (fontSize < 16) {\n        input.style.fontSize = '16px';\n      }\n      \n      // Remove any autocorrect/autocapitalize that might interfere\n      input.setAttribute('autocorrect', 'off');\n      input.setAttribute('autocapitalize', 'off');\n      input.setAttribute('spellcheck', 'false');\n      \n      // Special handling for numeric inputs\n      if (input.type === 'tel' || input.pattern === '[0-9]*\\\\.?[0-9]*') {\n        // Ensure pattern is set\n        if (!input.pattern) {\n          input.pattern = '[0-9]*\\\\.?[0-9]*';\n        }\n      }\n      \n      // Touch event to ensure keyboard shows\n      input.addEventListener('touchend', function(e) {\n        e.preventDefault();\n        const target = e.target;\n        setTimeout(function() {\n          target.focus();\n          target.click();\n        }, 0);\n      }, { passive: false });\n      \n      // Focus event to ensure visibility\n      input.addEventListener('focus', function() {\n        // Scroll into view after keyboard appears\n        setTimeout(function() {\n          input.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }, 300);\n      });\n    }\n  }\n  \n  function observeNewInputs() {\n    const observer = new MutationObserver(function(mutations) {\n      mutations.forEach(function(mutation) {\n        mutation.addedNodes.forEach(function(node) {\n          if (node.nodeType === 1) { // Element node\n            if (node.tagName === 'INPUT') {\n              fixSingleInput(node);\n            } else if (node.querySelectorAll) {\n              const inputs = node.querySelectorAll('input');\n              inputs.forEach(fixSingleInput);\n            }\n          }\n        });\n      });\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  \n  // Additional iOS-specific fixes\n  if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {\n    // Prevent double-tap zoom\n    let lastTouchEnd = 0;\n    document.addEventListener('touchend', function(event) {\n      const now = Date.now();\n      if (now - lastTouchEnd <= 300) {\n        event.preventDefault();\n      }\n      lastTouchEnd = now;\n    }, { passive: false });\n    \n    // Fix viewport on orientation change\n    window.addEventListener('orientationchange', function() {\n      setTimeout(function() {\n        window.scrollTo(0, 0);\n      }, 500);\n    });\n  }\n})();","size_bytes":3568},"client/src/lib/pwaUtils.ts":{"content":"// PWA utility functions to handle standalone mode issues\n\nexport const isPWAStandalone = (): boolean => {\n  return window.matchMedia('(display-mode: standalone)').matches ||\n         (window.navigator as any).standalone === true ||\n         document.referrer.includes('android-app://');\n};\n\nexport const fixPWAInputs = (): void => {\n  // Apply fixes for both PWA and regular mobile browsers\n  const applyInputFix = (input: Element) => {\n    const element = input as HTMLInputElement;\n    \n    // Prevent zoom on focus (iOS issue)\n    element.addEventListener('focus', () => {\n      const viewport = document.querySelector('meta[name=viewport]') as HTMLMetaElement;\n      if (viewport) {\n        viewport.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';\n      }\n    });\n    \n    // Restore zoom after blur\n    element.addEventListener('blur', () => {\n      const viewport = document.querySelector('meta[name=viewport]') as HTMLMetaElement;\n      if (viewport) {\n        viewport.content = 'width=device-width, initial-scale=1.0';\n      }\n    });\n    \n    // Force proper focus on click for inputs with inputMode\n    if (element.hasAttribute('inputMode')) {\n      element.addEventListener('click', (e) => {\n        e.preventDefault();\n        element.focus();\n        element.select();\n      });\n      \n      element.addEventListener('touchstart', (e) => {\n        setTimeout(() => {\n          element.focus();\n          element.click();\n        }, 50);\n      }, { passive: true });\n    }\n  };\n  \n  // Apply to existing inputs\n  document.querySelectorAll('input, textarea, select').forEach(applyInputFix);\n  \n  // Apply to dynamically added inputs\n  const observer = new MutationObserver((mutations) => {\n    mutations.forEach((mutation) => {\n      mutation.addedNodes.forEach((node: any) => {\n        if (node.nodeType === 1) {\n          if (node.tagName === 'INPUT' || node.tagName === 'TEXTAREA' || node.tagName === 'SELECT') {\n            applyInputFix(node);\n          }\n          if (node.querySelectorAll) {\n            node.querySelectorAll('input, textarea, select').forEach(applyInputFix);\n          }\n        }\n      });\n    });\n  });\n  \n  observer.observe(document.body, {\n    childList: true,\n    subtree: true\n  });\n};\n\nexport const enablePWAKeyboard = (): void => {\n  // Force keyboard to show on mobile PWA and browsers\n  document.addEventListener('touchend', (e) => {\n    const target = e.target as HTMLElement;\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {\n      setTimeout(() => {\n        target.focus();\n        if (target.tagName === 'INPUT') {\n          (target as HTMLInputElement).click();\n        }\n      }, 100);\n    }\n  });\n  \n  // Special handling for number/decimal inputs\n  document.addEventListener('click', (e) => {\n    const target = e.target as HTMLElement;\n    if (target.tagName === 'INPUT') {\n      const input = target as HTMLInputElement;\n      if (input.getAttribute('inputMode') === 'decimal' || input.getAttribute('inputMode') === 'numeric') {\n        input.focus();\n        input.select();\n      }\n    }\n  });\n};","size_bytes":3118},"client/public/service-worker.js":{"content":"// PWA Service Worker for better offline support and input handling\nself.addEventListener('install', (event) => {\n  console.log('Service Worker installed');\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker activated');\n  event.waitUntil(clients.claim());\n});\n\n// Cache important assets\nself.addEventListener('fetch', (event) => {\n  // For now, just pass through all requests\n  // This ensures the service worker is active and can help with PWA features\n  event.respondWith(fetch(event.request));\n});","size_bytes":554},"client/src/components/PWAInput.tsx":{"content":"import { forwardRef, InputHTMLAttributes, useEffect, useRef, useState } from 'react';\n\ninterface PWAInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n}\n\nconst PWAInput = forwardRef<HTMLInputElement, PWAInputProps>(\n  ({ label, className = '', onClick, onFocus, ...props }, ref) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [isFocused, setIsFocused] = useState(false);\n    \n    useEffect(() => {\n      const input = inputRef.current || (ref as any)?.current;\n      if (!input) return;\n      \n      // Completely override all input behaviors for PWA\n      const handleInteraction = (e: Event) => {\n        // Don't prevent default for actual typing\n        if (e.type === 'input' || e.type === 'change') return;\n        \n        e.stopPropagation();\n        \n        // Remove any readonly attributes\n        input.removeAttribute('readonly');\n        input.removeAttribute('disabled');\n        \n        // Multiple attempts to focus\n        requestAnimationFrame(() => {\n          input.focus();\n          input.click();\n          \n          // Try setting selection range\n          setTimeout(() => {\n            try {\n              if (input.value) {\n                input.setSelectionRange(input.value.length, input.value.length);\n              }\n            } catch {}\n          }, 50);\n        });\n      };\n      \n      // Add listeners for all possible interaction events\n      ['mousedown', 'touchstart', 'click', 'focus'].forEach(event => {\n        input.addEventListener(event, handleInteraction, true);\n      });\n      \n      return () => {\n        ['mousedown', 'touchstart', 'click', 'focus'].forEach(event => {\n          input.removeEventListener(event, handleInteraction, true);\n        });\n      };\n    }, []);\n    \n    const handleClick = (e: React.MouseEvent<HTMLInputElement>) => {\n      const input = inputRef.current;\n      if (input) {\n        input.focus();\n        setTimeout(() => input?.focus(), 100);\n      }\n      onClick?.(e);\n    };\n    \n    const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n      setIsFocused(true);\n      onFocus?.(e);\n    };\n    \n    return (\n      <>\n        {label && (\n          <label \n            htmlFor={props.id} \n            className=\"block text-sm font-medium mb-1\"\n            onClick={() => {\n              const input = inputRef.current;\n              if (input) {\n                input.focus();\n                input.click();\n              }\n            }}\n          >\n            {label}\n          </label>\n        )}\n        <input\n          ref={inputRef}\n          onClick={handleClick}\n          onFocus={handleFocus}\n          onBlur={() => setIsFocused(false)}\n          className={`flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          spellCheck=\"false\"\n          data-pwa-input=\"true\"\n          {...props}\n        />\n      </>\n    );\n  }\n);\n\nPWAInput.displayName = 'PWAInput';\n\nexport default PWAInput;","size_bytes":3348},"client/src/components/PWAInputFix.tsx":{"content":"import { useEffect } from 'react';\n\nexport default function PWAInputFix() {\n  useEffect(() => {\n    // Aggressive PWA input fix\n    const fixInputs = () => {\n      const inputs = document.querySelectorAll('input, textarea, select');\n      inputs.forEach((input: any) => {\n        // Remove any readonly attributes\n        input.removeAttribute('readonly');\n        \n        // Add multiple event listeners to ensure keyboard shows\n        ['click', 'touchstart', 'touchend', 'focus'].forEach(eventType => {\n          input.addEventListener(eventType, (e: Event) => {\n            e.stopPropagation();\n            setTimeout(() => {\n              input.focus();\n              input.click();\n              // Force selection for better keyboard activation\n              if (input.select) input.select();\n            }, 0);\n          }, { passive: false });\n        });\n        \n        // Special handling for inputs with inputMode\n        if (input.getAttribute('inputMode')) {\n          input.setAttribute('contenteditable', 'true');\n          input.style.webkitUserSelect = 'text';\n          input.style.userSelect = 'text';\n        }\n      });\n    };\n    \n    // Run immediately\n    fixInputs();\n    \n    // Run again after a delay to catch dynamically added inputs\n    setTimeout(fixInputs, 500);\n    setTimeout(fixInputs, 1000);\n    \n    // Watch for new inputs\n    const observer = new MutationObserver(() => {\n      setTimeout(fixInputs, 100);\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n    \n    return () => observer.disconnect();\n  }, []);\n  \n  return null;\n}","size_bytes":1625},"client/src/components/BoostDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Rocket, Clock, Coins } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface BoostDialogProps {\n  bountyId: string;\n  userPoints: number;\n  onClose: () => void;\n}\n\ninterface BoostOption {\n  level: number;\n  points: number;\n  hours: number;\n  title: string;\n  description: string;\n  color: string;\n}\n\nconst boostOptions: BoostOption[] = [\n  {\n    level: 1,\n    points: 2,\n    hours: 6,\n    title: \"Basic Boost\",\n    description: \"2x visibility for 6 hours\",\n    color: \"bg-blue-500\"\n  },\n  {\n    level: 2,\n    points: 5,\n    hours: 12,\n    title: \"Power Boost\",\n    description: \"3x visibility for 12 hours\",\n    color: \"bg-purple-500\"\n  },\n  {\n    level: 3,\n    points: 10,\n    hours: 24,\n    title: \"Mega Boost\",\n    description: \"4x visibility for 24 hours\",\n    color: \"bg-orange-500\"\n  }\n];\n\nexport default function BoostDialog({ bountyId, userPoints, onClose }: BoostDialogProps) {\n  const [selectedLevel, setSelectedLevel] = useState<number | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const boostMutation = useMutation({\n    mutationFn: async (level: number) => {\n      return apiRequest(\"POST\", `/api/bounties/boost/${bountyId}`, { boostLevel: level });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Bounty Boosted! 🚀\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bounties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Boost Failed\",\n        description: error.message || \"Failed to boost bounty. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBoost = () => {\n    if (selectedLevel) {\n      boostMutation.mutate(selectedLevel);\n    }\n  };\n\n  const selectedOption = boostOptions.find(opt => opt.level === selectedLevel);\n\n  return (\n    <Dialog open={true} onOpenChange={() => onClose()}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Rocket className=\"h-5 w-5\" />\n            Boost Your Bounty\n          </DialogTitle>\n          <DialogDescription>\n            Increase visibility and get more applicants by boosting your bounty to the top of the feed.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-3 bg-secondary/50 rounded-lg\">\n            <span className=\"text-sm font-medium\">Your Points</span>\n            <div className=\"flex items-center gap-1\">\n              <Coins className=\"h-4 w-4 text-pocket-gold\" />\n              <span className=\"font-bold\">{userPoints}</span>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            {boostOptions.map((option) => (\n              <button\n                key={option.level}\n                onClick={() => setSelectedLevel(option.level)}\n                disabled={userPoints < option.points}\n                className={`w-full p-4 rounded-lg border-2 transition-all text-left ${\n                  selectedLevel === option.level\n                    ? \"border-pocket-red bg-pocket-red/10\"\n                    : userPoints < option.points\n                    ? \"border-gray-200 bg-gray-50 opacity-50 cursor-not-allowed\"\n                    : \"border-gray-200 hover:border-gray-300\"\n                }`}\n                data-testid={`boost-option-${option.level}`}\n              >\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <h4 className=\"font-semibold flex items-center gap-2\">\n                      {option.title}\n                      <Badge className={`${option.color} text-white`}>\n                        Level {option.level}\n                      </Badge>\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {option.description}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"flex items-center gap-1 font-bold\">\n                      <Coins className=\"h-4 w-4 text-pocket-gold\" />\n                      {option.points}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                  <span className=\"flex items-center gap-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    {option.hours} hours\n                  </span>\n                  <span>\n                    {option.level + 1}x visibility\n                  </span>\n                </div>\n              </button>\n            ))}\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"flex-1\"\n              disabled={boostMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleBoost}\n              disabled={!selectedLevel || boostMutation.isPending}\n              className=\"flex-1 bg-pocket-red hover:bg-pocket-red-dark text-white\"\n              data-testid=\"button-confirm-boost\"\n            >\n              {boostMutation.isPending ? (\n                \"Boosting...\"\n              ) : selectedOption ? (\n                `Boost for ${selectedOption.points} Points`\n              ) : (\n                \"Select a Boost\"\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6096},"client/src/components/CreatorStatsModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport { \n  User, \n  DollarSign, \n  Calendar, \n  TrendingUp, \n  Activity,\n  CreditCard,\n  ArrowUpRight,\n  ArrowDownRight\n} from \"lucide-react\";\n\ninterface StatsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  type: 'users' | 'revenue' | 'bounties' | 'points' | 'spending' | null;\n  title: string;\n}\n\ninterface ModalDetailsData {\n  users?: any[];\n  transactions?: any[];\n  purchases?: any[];\n  bounties?: any[];\n  spending?: any[];\n}\n\nexport function CreatorStatsModal({ isOpen, onClose, type, title }: StatsModalProps) {\n  const [activeTab, setActiveTab] = useState(\"list\");\n\n  const { data: details, isLoading, error } = useQuery<ModalDetailsData | null>({\n    queryKey: [`/api/creator/details/${type}`],\n    enabled: isOpen && type !== null,\n    queryFn: async () => {\n      if (!type) return null;\n      const response = await apiRequest(\"GET\", `/api/creator/details/${type}`);\n      const data = await response.json() as ModalDetailsData;\n      console.log(`Modal data for ${type}:`, data);\n      return data;\n    },\n    retry: false\n  });\n\n  if (!type) return null;\n\n  const renderUsersList = () => {\n    if (!details?.users) return <div className=\"text-center p-6 text-muted-foreground\">No users found</div>;\n    return (\n      <div className=\"space-y-2\">\n        {details.users.map((user: any) => (\n          <div key={user.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white font-bold\">\n                {user.firstName?.[0] || user.email[0].toUpperCase()}\n              </div>\n              <div>\n                <div className=\"font-medium\">{user.firstName} {user.lastName}</div>\n                <div className=\"text-sm text-muted-foreground\">{user.handle || user.email}</div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold\">{user.points} pts</div>\n              <div className=\"text-sm text-green-600\">{formatCurrency(user.balance)}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                Joined {formatDate(user.createdAt)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderRevenueList = () => {\n    if (!details?.transactions) return <div className=\"text-center p-6 text-muted-foreground\">No transactions found</div>;\n    return (\n      <div className=\"space-y-2\">\n        {details.transactions.map((transaction: any) => (\n          <div key={transaction.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-full ${\n                transaction.source === 'platform_fee' ? 'bg-green-100 text-green-600' : \n                transaction.source === 'point_purchase' ? 'bg-blue-100 text-blue-600' : \n                'bg-gray-100 text-gray-600'\n              }`}>\n                {transaction.source === 'platform_fee' ? <DollarSign className=\"h-4 w-4\" /> : <CreditCard className=\"h-4 w-4\" />}\n              </div>\n              <div>\n                <div className=\"font-medium\">{transaction.description}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {transaction.userName || 'Unknown User'}\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold text-green-600\">+{formatCurrency(transaction.amount)}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {formatDate(transaction.createdAt)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderPointsPurchases = () => {\n    if (!details?.purchases) return <div className=\"text-center p-6 text-muted-foreground\">No purchases found</div>;\n    return (\n      <div className=\"space-y-2\">\n        {details.purchases.map((purchase: any) => (\n          <div key={purchase.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 rounded-full bg-blue-100 text-blue-600\">\n                <CreditCard className=\"h-4 w-4\" />\n              </div>\n              <div>\n                <div className=\"font-medium\">{purchase.userName}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {purchase.userEmail}\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold text-blue-600\">{formatCurrency(purchase.amount)}</div>\n              <div className=\"text-sm\">{purchase.points} points</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {formatDate(purchase.createdAt)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderBountiesList = () => {\n    if (!details?.bounties) return <div className=\"text-center p-6 text-muted-foreground\">No bounties found</div>;\n    return (\n      <div className=\"space-y-2\">\n        {details.bounties.map((bounty: any) => (\n          <div key={bounty.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n            <div className=\"flex-1\">\n              <div className=\"font-medium\">{bounty.title}</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Posted by {bounty.authorName || 'Unknown'}\n              </div>\n              <div className=\"flex gap-2 mt-1\">\n                <Badge variant={bounty.status === 'active' ? 'default' : 'secondary'}>\n                  {bounty.status}\n                </Badge>\n                {bounty.boostLevel > 0 && (\n                  <Badge className=\"bg-purple-100 text-purple-700\">\n                    Boost L{bounty.boostLevel}\n                  </Badge>\n                )}\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold text-green-600\">{formatCurrency(bounty.reward)}</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {formatDate(bounty.createdAt)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const renderSpendingBreakdown = () => {\n    if (!details?.spending) return <div className=\"text-center p-6 text-muted-foreground\">No spending found</div>;\n    return (\n      <div className=\"space-y-2\">\n        {details.spending.map((spend: any) => (\n          <div key={spend.id} className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-accent/50 transition-colors\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`p-2 rounded-full ${\n                spend.type === 'withdrawal' ? 'bg-red-100 text-red-600' : \n                spend.type === 'deposit' ? 'bg-green-100 text-green-600' : \n                spend.type === 'boost' ? 'bg-purple-100 text-purple-600' :\n                'bg-gray-100 text-gray-600'\n              }`}>\n                {spend.type === 'withdrawal' ? <ArrowUpRight className=\"h-4 w-4\" /> : \n                 spend.type === 'deposit' ? <ArrowDownRight className=\"h-4 w-4\" /> :\n                 <Activity className=\"h-4 w-4\" />}\n              </div>\n              <div>\n                <div className=\"font-medium\">{spend.userName}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {spend.description}\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className={`font-bold ${\n                spend.type === 'withdrawal' ? 'text-red-600' : \n                spend.type === 'deposit' ? 'text-green-600' : \n                'text-purple-600'\n              }`}>\n                {spend.type === 'withdrawal' ? '-' : '+'}{formatCurrency(spend.amount)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {formatDate(spend.createdAt)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  const getContent = () => {\n    if (isLoading) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      );\n    }\n\n    if (error) {\n      return (\n        <div className=\"flex flex-col items-center justify-center h-64 text-center\">\n          <div className=\"text-red-500 mb-2\">❌ Error loading data</div>\n          <div className=\"text-sm text-muted-foreground\">{error.message}</div>\n          <div className=\"text-xs text-muted-foreground mt-2\">Make sure you're logged in as a creator</div>\n        </div>\n      );\n    }\n\n    if (!details) {\n      return (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-muted-foreground\">No data available</div>\n        </div>\n      );\n    }\n\n    switch (type) {\n      case 'users':\n        return renderUsersList();\n      case 'revenue':\n        return renderRevenueList();\n      case 'points':\n        return renderPointsPurchases();\n      case 'bounties':\n        return renderBountiesList();\n      case 'spending':\n        return renderSpendingBreakdown();\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[80vh]\">\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n        </DialogHeader>\n        <ScrollArea className=\"h-[60vh] pr-4\">\n          {getContent()}\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10504},"client/src/components/AsteroidsGame.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Ship extends Position {\n  angle: number;\n  velocity: Position;\n  thrust: boolean;\n}\n\ninterface Bullet extends Position {\n  id: number;\n  velocity: Position;\n  life: number;\n}\n\ninterface Asteroid extends Position {\n  id: number;\n  velocity: Position;\n  size: number;\n  angle: number;\n  rotationSpeed: number;\n}\n\ninterface GameState {\n  ship: Ship;\n  bullets: Bullet[];\n  asteroids: Asteroid[];\n  score: number;\n  lives: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n  level: number;\n}\n\nconst CANVAS_WIDTH = 600;\nconst CANVAS_HEIGHT = 400;\nconst SHIP_SIZE = 12;\nconst ASTEROID_SIZES = [40, 25, 15];\n\nexport default function AsteroidsGame() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    ship: { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2, angle: 0, velocity: { x: 0, y: 0 }, thrust: false },\n    bullets: [],\n    asteroids: [],\n    score: 0,\n    lives: 3,\n    gameStatus: \"waiting\",\n    level: 1,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"asteroids-best-score\") || \"0\", 10);\n  });\n\n  const keysRef = useRef<{ [key: string]: boolean }>({});\n  const bulletIdRef = useRef(0);\n  const asteroidIdRef = useRef(0);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Asteroids - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 12)} points!`,\n      });\n    },\n  });\n\n  const wrapPosition = useCallback((pos: Position): Position => {\n    return {\n      x: ((pos.x % CANVAS_WIDTH) + CANVAS_WIDTH) % CANVAS_WIDTH,\n      y: ((pos.y % CANVAS_HEIGHT) + CANVAS_HEIGHT) % CANVAS_HEIGHT,\n    };\n  }, []);\n\n  const createAsteroids = useCallback((level: number) => {\n    const asteroids: Asteroid[] = [];\n    const count = Math.min(4 + level, 12);\n    \n    for (let i = 0; i < count; i++) {\n      asteroids.push({\n        id: asteroidIdRef.current++,\n        x: Math.random() * CANVAS_WIDTH,\n        y: Math.random() * CANVAS_HEIGHT,\n        velocity: {\n          x: (Math.random() - 0.5) * 2,\n          y: (Math.random() - 0.5) * 2,\n        },\n        size: ASTEROID_SIZES[0],\n        angle: Math.random() * Math.PI * 2,\n        rotationSpeed: (Math.random() - 0.5) * 0.1,\n      });\n    }\n    \n    return asteroids;\n  }, []);\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      ship: { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2, angle: 0, velocity: { x: 0, y: 0 }, thrust: false },\n      bullets: [],\n      asteroids: createAsteroids(1),\n      score: 0,\n      lives: 3,\n      gameStatus: \"waiting\",\n      level: 1,\n    });\n  }, [createAsteroids]);\n\n  const shoot = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n      \n      const bullet: Bullet = {\n        id: bulletIdRef.current++,\n        x: prev.ship.x + Math.cos(prev.ship.angle) * SHIP_SIZE,\n        y: prev.ship.y + Math.sin(prev.ship.angle) * SHIP_SIZE,\n        velocity: {\n          x: Math.cos(prev.ship.angle) * 8,\n          y: Math.sin(prev.ship.angle) * 8,\n        },\n        life: 60, // 1 second at 60 FPS\n      };\n\n      return {\n        ...prev,\n        bullets: [...prev.bullets, bullet],\n      };\n    });\n  }, []);\n\n  const gameLoop = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      let newState = { ...prev };\n\n      // Update ship\n      let thrust = keysRef.current['ArrowUp'] || keysRef.current['w'] || keysRef.current['W'];\n      let turnLeft = keysRef.current['ArrowLeft'] || keysRef.current['a'] || keysRef.current['A'];\n      let turnRight = keysRef.current['ArrowRight'] || keysRef.current['d'] || keysRef.current['D'];\n\n      if (turnLeft) newState.ship.angle -= 0.1;\n      if (turnRight) newState.ship.angle += 0.1;\n\n      if (thrust) {\n        const thrustPower = 0.3;\n        newState.ship.velocity.x += Math.cos(newState.ship.angle) * thrustPower;\n        newState.ship.velocity.y += Math.sin(newState.ship.angle) * thrustPower;\n        newState.ship.thrust = true;\n      } else {\n        newState.ship.thrust = false;\n      }\n\n      // Apply friction\n      newState.ship.velocity.x *= 0.98;\n      newState.ship.velocity.y *= 0.98;\n\n      // Update ship position\n      newState.ship.x += newState.ship.velocity.x;\n      newState.ship.y += newState.ship.velocity.y;\n      newState.ship = { ...newState.ship, ...wrapPosition(newState.ship) };\n\n      // Update bullets\n      newState.bullets = newState.bullets\n        .map(bullet => ({\n          ...bullet,\n          x: bullet.x + bullet.velocity.x,\n          y: bullet.y + bullet.velocity.y,\n          life: bullet.life - 1,\n        }))\n        .map(bullet => ({ ...bullet, ...wrapPosition(bullet) }))\n        .filter(bullet => bullet.life > 0);\n\n      // Update asteroids\n      newState.asteroids = newState.asteroids.map(asteroid => {\n        const newPos = wrapPosition({\n          x: asteroid.x + asteroid.velocity.x,\n          y: asteroid.y + asteroid.velocity.y,\n        });\n        return {\n          ...asteroid,\n          x: newPos.x,\n          y: newPos.y,\n          angle: asteroid.angle + asteroid.rotationSpeed,\n        };\n      });\n\n      // Check bullet-asteroid collisions\n      newState.bullets.forEach(bullet => {\n        newState.asteroids.forEach(asteroid => {\n          const dx = bullet.x - asteroid.x;\n          const dy = bullet.y - asteroid.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          \n          if (distance < asteroid.size / 2) {\n            // Hit!\n            newState.bullets = newState.bullets.filter(b => b.id !== bullet.id);\n            newState.asteroids = newState.asteroids.filter(a => a.id !== asteroid.id);\n            \n            // Score points\n            newState.score += ASTEROID_SIZES.indexOf(asteroid.size) === 0 ? 20 : \n                           ASTEROID_SIZES.indexOf(asteroid.size) === 1 ? 50 : 100;\n            \n            // Break asteroid into smaller pieces\n            if (asteroid.size > ASTEROID_SIZES[ASTEROID_SIZES.length - 1]) {\n              const newSize = ASTEROID_SIZES[ASTEROID_SIZES.indexOf(asteroid.size) + 1];\n              \n              for (let i = 0; i < 2; i++) {\n                newState.asteroids.push({\n                  id: asteroidIdRef.current++,\n                  x: asteroid.x,\n                  y: asteroid.y,\n                  velocity: {\n                    x: (Math.random() - 0.5) * 4,\n                    y: (Math.random() - 0.5) * 4,\n                  },\n                  size: newSize,\n                  angle: Math.random() * Math.PI * 2,\n                  rotationSpeed: (Math.random() - 0.5) * 0.15,\n                });\n              }\n            }\n          }\n        });\n      });\n\n      // Check ship-asteroid collisions\n      newState.asteroids.forEach(asteroid => {\n        const dx = newState.ship.x - asteroid.x;\n        const dy = newState.ship.y - asteroid.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance < (asteroid.size / 2 + SHIP_SIZE / 2)) {\n          newState.lives -= 1;\n          if (newState.lives <= 0) {\n            newState.gameStatus = \"gameover\";\n          } else {\n            // Reset ship position\n            newState.ship = { \n              x: CANVAS_WIDTH / 2, \n              y: CANVAS_HEIGHT / 2, \n              angle: 0, \n              velocity: { x: 0, y: 0 },\n              thrust: false \n            };\n          }\n        }\n      });\n\n      // Check if level complete\n      if (newState.asteroids.length === 0) {\n        newState.level += 1;\n        newState.asteroids = createAsteroids(newState.level);\n        newState.score += 100; // Level bonus\n        toast({\n          title: `Level ${newState.level - 1} Complete!`,\n          description: \"+100 bonus points!\",\n        });\n      }\n\n      return newState;\n    });\n  }, [wrapPosition, createAsteroids, toast]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#000011\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw stars\n    ctx.fillStyle = \"#ffffff\";\n    for (let i = 0; i < 100; i++) {\n      const x = (i * 37) % CANVAS_WIDTH;\n      const y = (i * 43) % CANVAS_HEIGHT;\n      ctx.fillRect(x, y, 1, 1);\n    }\n\n    // Draw ship\n    ctx.save();\n    ctx.translate(gameState.ship.x, gameState.ship.y);\n    ctx.rotate(gameState.ship.angle);\n    \n    ctx.strokeStyle = \"#ffffff\";\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    ctx.moveTo(SHIP_SIZE, 0);\n    ctx.lineTo(-SHIP_SIZE / 2, -SHIP_SIZE / 2);\n    ctx.lineTo(-SHIP_SIZE / 4, 0);\n    ctx.lineTo(-SHIP_SIZE / 2, SHIP_SIZE / 2);\n    ctx.closePath();\n    ctx.stroke();\n\n    // Draw thrust\n    if (gameState.ship.thrust) {\n      ctx.strokeStyle = \"#ff4400\";\n      ctx.beginPath();\n      ctx.moveTo(-SHIP_SIZE / 4, -3);\n      ctx.lineTo(-SHIP_SIZE, 0);\n      ctx.lineTo(-SHIP_SIZE / 4, 3);\n      ctx.stroke();\n    }\n    \n    ctx.restore();\n\n    // Draw bullets\n    ctx.fillStyle = \"#ffffff\";\n    gameState.bullets.forEach(bullet => {\n      ctx.beginPath();\n      ctx.arc(bullet.x, bullet.y, 2, 0, Math.PI * 2);\n      ctx.fill();\n    });\n\n    // Draw asteroids\n    gameState.asteroids.forEach(asteroid => {\n      ctx.save();\n      ctx.translate(asteroid.x, asteroid.y);\n      ctx.rotate(asteroid.angle);\n      \n      ctx.strokeStyle = \"#888888\";\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      \n      const points = 8;\n      for (let i = 0; i < points; i++) {\n        const angle = (i / points) * Math.PI * 2;\n        const radius = asteroid.size / 2 + Math.sin(angle * 3) * (asteroid.size / 8);\n        const x = Math.cos(angle) * radius;\n        const y = Math.sin(angle) * radius;\n        \n        if (i === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      }\n      \n      ctx.closePath();\n      ctx.stroke();\n      ctx.restore();\n    });\n\n    // Draw UI\n    ctx.fillStyle = \"#ffffff\";\n    ctx.font = \"16px Arial\";\n    ctx.fillText(`Score: ${gameState.score}`, 10, 25);\n    ctx.fillText(`Lives: ${gameState.lives}`, 10, 45);\n    ctx.fillText(`Level: ${gameState.level}`, 10, 65);\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(gameLoop, 1000 / 60);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameLoop]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"asteroids-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 12);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      keysRef.current[e.key] = true;\n      if (e.key === ' ' && gameState.gameStatus === \"playing\") {\n        e.preventDefault();\n        shoot();\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      keysRef.current[e.key] = false;\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, [gameState.gameStatus, shoot]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">🚀 Asteroids</h2>\n        <p className=\"text-sm text-muted-foreground\">Destroy asteroids and survive in space!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-2\">\n          <div className=\"relative bg-gradient-to-b from-purple-900 to-black rounded-lg overflow-hidden\">\n            <canvas\n              ref={canvasRef}\n              width={CANVAS_WIDTH}\n              height={CANVAS_HEIGHT}\n              className=\"w-full h-80\"\n              data-testid=\"canvas-asteroids\"\n            />\n            \n            {gameState.gameStatus !== \"playing\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-white bg-black/50\">\n                <div className=\"text-center\">\n                  {gameState.gameStatus === \"waiting\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">🚀 Ready for Space Combat?</div>\n                      <div className=\"text-sm mb-1\">Arrow keys or WASD to move</div>\n                      <div className=\"text-sm\">Space to shoot</div>\n                    </>\n                  )}\n                  \n                  {gameState.gameStatus === \"gameover\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">Game Over!</div>\n                      <div className=\"text-sm mb-2\">Final Score: {gameState.score}</div>\n                      <div className=\"text-sm mb-2\">Level Reached: {gameState.level}</div>\n                      {gameState.score > bestScore && (\n                        <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\">Best: {bestScore}</Badge>\n            <Badge variant=\"outline\">Level: {gameState.level}</Badge>\n            <Badge variant=\"outline\">Lives: {gameState.lives}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Arrow keys or WASD to rotate and thrust</li>\n            <li>• Space bar to shoot asteroids</li>\n            <li>• Large asteroids break into smaller ones</li>\n            <li>• Clear all asteroids to advance levels</li>\n            <li>• Earn 1 ⭐ for every 12 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n      {/* Mobile Controls */}\n      <div className=\"flex justify-center gap-4 sm:hidden\">\n        <div className=\"flex flex-col gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"h-12 w-12 p-0\"\n            onTouchStart={() => { keysRef.current['ArrowUp'] = true; setTimeout(() => keysRef.current['ArrowUp'] = false, 100); }}\n            onClick={() => { keysRef.current['ArrowUp'] = true; setTimeout(() => keysRef.current['ArrowUp'] = false, 100); }}\n          >\n            ↑\n          </Button>\n          <div className=\"flex gap-1\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-12 w-12 p-0\"\n              onTouchStart={() => { keysRef.current['ArrowLeft'] = true; setTimeout(() => keysRef.current['ArrowLeft'] = false, 100); }}\n              onClick={() => { keysRef.current['ArrowLeft'] = true; setTimeout(() => keysRef.current['ArrowLeft'] = false, 100); }}\n            >\n              ←\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-12 w-12 p-0\"\n              onTouchStart={() => { keysRef.current['ArrowRight'] = true; setTimeout(() => keysRef.current['ArrowRight'] = false, 100); }}\n              onClick={() => { keysRef.current['ArrowRight'] = true; setTimeout(() => keysRef.current['ArrowRight'] = false, 100); }}\n            >\n              →\n            </Button>\n          </div>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"h-16 w-16 rounded-full bg-orange-500 hover:bg-orange-600 text-white\"\n          onTouchStart={() => { keysRef.current['Space'] = true; setTimeout(() => keysRef.current['Space'] = false, 100); }}\n          onClick={() => { keysRef.current['Space'] = true; setTimeout(() => keysRef.current['Space'] = false, 100); }}\n        >\n          🚀\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":18090},"client/src/components/Breakout.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Brick extends Position {\n  id: number;\n  destroyed: boolean;\n  color: string;\n}\n\ninterface GameState {\n  paddle: Position;\n  ball: Position & { dx: number; dy: number };\n  bricks: Brick[];\n  score: number;\n  lives: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\" | \"victory\";\n  level: number;\n}\n\nconst CANVAS_WIDTH = 600;\nconst CANVAS_HEIGHT = 400;\nconst PADDLE_WIDTH = 80;\nconst PADDLE_HEIGHT = 10;\nconst BALL_SIZE = 8;\nconst BRICK_WIDTH = 60;\nconst BRICK_HEIGHT = 20;\nconst ROWS = 5;\nconst COLS = 9;\n\nexport default function Breakout() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    paddle: { x: CANVAS_WIDTH / 2 - PADDLE_WIDTH / 2, y: CANVAS_HEIGHT - 30 },\n    ball: { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2, dx: 3, dy: -3 },\n    bricks: [],\n    score: 0,\n    lives: 3,\n    gameStatus: \"waiting\",\n    level: 1,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"breakout-best-score\") || \"0\", 10);\n  });\n\n  const keysRef = useRef<{ [key: string]: boolean }>({});\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Breakout - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 15)} points!`,\n      });\n    },\n  });\n\n  const createBricks = useCallback((level: number) => {\n    const bricks: Brick[] = [];\n    const colors = ['#ff6b6b', '#ffd93d', '#6bcf7f', '#4ecdc4', '#45b7d1'];\n    \n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLS; col++) {\n        bricks.push({\n          id: row * COLS + col,\n          x: col * (BRICK_WIDTH + 5) + 35,\n          y: row * (BRICK_HEIGHT + 5) + 50,\n          destroyed: false,\n          color: colors[row % colors.length],\n        });\n      }\n    }\n    return bricks;\n  }, []);\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      paddle: { x: CANVAS_WIDTH / 2 - PADDLE_WIDTH / 2, y: CANVAS_HEIGHT - 30 },\n      ball: { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2, dx: 3, dy: -3 },\n      bricks: createBricks(1),\n      score: 0,\n      lives: 3,\n      gameStatus: \"waiting\",\n      level: 1,\n    });\n  }, [createBricks]);\n\n  const gameLoop = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      let newState = { ...prev };\n\n      // Move paddle\n      if (keysRef.current['ArrowLeft'] && newState.paddle.x > 0) {\n        newState.paddle = { ...newState.paddle, x: newState.paddle.x - 6 };\n      }\n      if (keysRef.current['ArrowRight'] && newState.paddle.x < CANVAS_WIDTH - PADDLE_WIDTH) {\n        newState.paddle = { ...newState.paddle, x: newState.paddle.x + 6 };\n      }\n\n      // Move ball\n      newState.ball = {\n        ...newState.ball,\n        x: newState.ball.x + newState.ball.dx,\n        y: newState.ball.y + newState.ball.dy,\n      };\n\n      // Ball collision with walls\n      if (newState.ball.x <= 0 || newState.ball.x >= CANVAS_WIDTH - BALL_SIZE) {\n        newState.ball.dx = -newState.ball.dx;\n      }\n      if (newState.ball.y <= 0) {\n        newState.ball.dy = -newState.ball.dy;\n      }\n\n      // Ball collision with paddle\n      if (\n        newState.ball.y + BALL_SIZE >= newState.paddle.y &&\n        newState.ball.x + BALL_SIZE >= newState.paddle.x &&\n        newState.ball.x <= newState.paddle.x + PADDLE_WIDTH &&\n        newState.ball.dy > 0\n      ) {\n        const hitPos = (newState.ball.x - newState.paddle.x) / PADDLE_WIDTH;\n        const angle = (hitPos - 0.5) * Math.PI / 3; // Max 60 degrees\n        const speed = 4;\n        newState.ball.dx = Math.sin(angle) * speed;\n        newState.ball.dy = -Math.cos(angle) * speed;\n      }\n\n      // Ball collision with bricks\n      newState.bricks = newState.bricks.map(brick => {\n        if (\n          !brick.destroyed &&\n          newState.ball.x + BALL_SIZE >= brick.x &&\n          newState.ball.x <= brick.x + BRICK_WIDTH &&\n          newState.ball.y + BALL_SIZE >= brick.y &&\n          newState.ball.y <= brick.y + BRICK_HEIGHT\n        ) {\n          newState.ball.dy = -newState.ball.dy;\n          newState.score += 10;\n          return { ...brick, destroyed: true };\n        }\n        return brick;\n      });\n\n      // Check victory condition\n      const activeBricks = newState.bricks.filter(b => !b.destroyed);\n      if (activeBricks.length === 0) {\n        newState.level += 1;\n        newState.bricks = createBricks(newState.level);\n        newState.score += 100; // Level bonus\n        newState.ball = { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2, dx: 3 + newState.level, dy: -3 - newState.level };\n        toast({\n          title: `Level ${newState.level - 1} Complete!`,\n          description: \"+100 bonus points!\",\n        });\n      }\n\n      // Check if ball fell off screen\n      if (newState.ball.y > CANVAS_HEIGHT) {\n        newState.lives -= 1;\n        if (newState.lives <= 0) {\n          newState.gameStatus = \"gameover\";\n        } else {\n          // Reset ball position\n          newState.ball = { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2, dx: 3, dy: -3 };\n        }\n      }\n\n      return newState;\n    });\n  }, [createBricks, toast]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#1a1a2e\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw bricks\n    gameState.bricks.forEach(brick => {\n      if (!brick.destroyed) {\n        ctx.fillStyle = brick.color;\n        ctx.fillRect(brick.x, brick.y, BRICK_WIDTH, BRICK_HEIGHT);\n        // Add shine effect\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.3)\";\n        ctx.fillRect(brick.x, brick.y, BRICK_WIDTH, 3);\n      }\n    });\n\n    // Draw paddle\n    const gradient = ctx.createLinearGradient(0, gameState.paddle.y, 0, gameState.paddle.y + PADDLE_HEIGHT);\n    gradient.addColorStop(0, \"#e74c3c\");\n    gradient.addColorStop(1, \"#c0392b\");\n    ctx.fillStyle = gradient;\n    ctx.fillRect(gameState.paddle.x, gameState.paddle.y, PADDLE_WIDTH, PADDLE_HEIGHT);\n\n    // Draw ball\n    ctx.fillStyle = \"#f1c40f\";\n    ctx.beginPath();\n    ctx.arc(gameState.ball.x, gameState.ball.y, BALL_SIZE / 2, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw UI\n    ctx.fillStyle = \"#ffffff\";\n    ctx.font = \"16px Arial\";\n    ctx.fillText(`Score: ${gameState.score}`, 10, 25);\n    ctx.fillText(`Lives: ${gameState.lives}`, 10, 45);\n    ctx.fillText(`Level: ${gameState.level}`, 10, 65);\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(gameLoop, 1000 / 60);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameLoop]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"breakout-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 15);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (gameState.gameStatus !== \"playing\") return;\n      \n      const validKeys = ['ArrowLeft', 'ArrowRight', 'a', 'A', 'd', 'D'];\n      if (validKeys.includes(e.key)) {\n        e.preventDefault();\n        e.stopPropagation();\n        keysRef.current[e.key] = true;\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      keysRef.current[e.key] = false;\n    };\n\n    if (gameState.gameStatus === \"playing\") {\n      document.addEventListener(\"keydown\", handleKeyDown, { capture: true });\n      document.addEventListener(\"keyup\", handleKeyUp, { capture: true });\n      return () => {\n        document.removeEventListener(\"keydown\", handleKeyDown, { capture: true });\n        document.removeEventListener(\"keyup\", handleKeyUp, { capture: true });\n      };\n    }\n  }, [gameState.gameStatus]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">🧱 Breakout</h2>\n        <p className=\"text-sm text-muted-foreground\">Destroy all bricks with the bouncing ball!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-2\">\n          <div \n            className=\"relative bg-gradient-to-b from-purple-900 to-black rounded-lg overflow-hidden focus:outline-none focus:ring-2 focus:ring-pocket-red\"\n            tabIndex={0}\n            data-testid=\"game-container-breakout\"\n          >\n            <canvas\n              ref={canvasRef}\n              width={CANVAS_WIDTH}\n              height={CANVAS_HEIGHT}\n              className=\"w-full h-80 cursor-crosshair\"\n              data-testid=\"canvas-breakout\"\n            />\n            \n            {gameState.gameStatus !== \"playing\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-white bg-black/50\">\n                <div className=\"text-center\">\n                  {gameState.gameStatus === \"waiting\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">🧱 Ready to Break Some Bricks?</div>\n                      <div className=\"text-sm mb-2\">Arrow keys to move paddle</div>\n                    </>\n                  )}\n                  \n                  {gameState.gameStatus === \"gameover\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">Game Over!</div>\n                      <div className=\"text-sm mb-2\">Final Score: {gameState.score}</div>\n                      <div className=\"text-sm mb-2\">Reached Level: {gameState.level}</div>\n                      {gameState.score > bestScore && (\n                        <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\">Best: {bestScore}</Badge>\n            <Badge variant=\"outline\">Level: {gameState.level}</Badge>\n            <Badge variant=\"outline\">Lives: {gameState.lives}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Arrow keys to move the paddle left and right</li>\n            <li>• Keep the ball bouncing to destroy all bricks</li>\n            <li>• Complete levels to increase difficulty</li>\n            <li>• Earn 1 ⭐ for every 15 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n\n      {/* Mobile Controls */}\n      <div className=\"flex justify-center gap-4 sm:hidden\">\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"h-16 px-8 touch-none select-none\"\n          onTouchStart={(e) => {\n            e.preventDefault();\n            setGameState(prev => ({\n              ...prev,\n              paddle: { x: Math.max(0, prev.paddle.x - 30), y: prev.paddle.y }\n            }));\n          }}\n          onMouseDown={(e) => {\n            e.preventDefault();\n            setGameState(prev => ({\n              ...prev,\n              paddle: { x: Math.max(0, prev.paddle.x - 30), y: prev.paddle.y }\n            }));\n          }}\n        >\n          ← LEFT\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"h-16 px-8 touch-none select-none\"\n          onTouchStart={(e) => {\n            e.preventDefault();\n            setGameState(prev => ({\n              ...prev,\n              paddle: { x: Math.min(CANVAS_WIDTH - PADDLE_WIDTH, prev.paddle.x + 30), y: prev.paddle.y }\n            }));\n          }}\n          onMouseDown={(e) => {\n            e.preventDefault();\n            setGameState(prev => ({\n              ...prev,\n              paddle: { x: Math.min(CANVAS_WIDTH - PADDLE_WIDTH, prev.paddle.x + 30), y: prev.paddle.y }\n            }));\n          }}\n        >\n          RIGHT →\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":14079},"client/src/components/ConnectFour.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface GameState {\n  board: string[][];\n  currentPlayer: string;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n  winner: string | null;\n  winningCells: number[][];\n  playerScore: number;\n  aiScore: number;\n  moves: number;\n}\n\nconst ROWS = 6;\nconst COLS = 7;\nconst PLAYER = \"red\";\nconst AI = \"yellow\";\n\nexport default function ConnectFour() {\n  const [gameState, setGameState] = useState<GameState>({\n    board: Array(ROWS).fill(null).map(() => Array(COLS).fill(\"\")),\n    currentPlayer: PLAYER,\n    gameStatus: \"waiting\",\n    winner: null,\n    winningCells: [],\n    playerScore: 0,\n    aiScore: 0,\n    moves: 0,\n  });\n  \n  const [totalWins, setTotalWins] = useState(() => {\n    return parseInt(localStorage.getItem(\"connect-four-wins\") || \"0\", 10);\n  });\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Connect Four - ${gameState.winner === PLAYER ? 'won' : 'lost'} game`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned points for playing Connect Four!`,\n      });\n    },\n  });\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      board: Array(ROWS).fill(null).map(() => Array(COLS).fill(\"\")),\n      currentPlayer: PLAYER,\n      gameStatus: \"waiting\",\n      winner: null,\n      winningCells: [],\n      playerScore: 0,\n      aiScore: 0,\n      moves: 0,\n    });\n  }, []);\n\n  const checkWin = useCallback((board: string[][], row: number, col: number, player: string): number[][] => {\n    const directions = [\n      [0, 1], [1, 0], [1, 1], [1, -1] // horizontal, vertical, diagonal1, diagonal2\n    ];\n\n    for (const [dr, dc] of directions) {\n      const cells = [[row, col]];\n      \n      // Check in positive direction\n      for (let i = 1; i < 4; i++) {\n        const newRow = row + dr * i;\n        const newCol = col + dc * i;\n        if (newRow >= 0 && newRow < ROWS && newCol >= 0 && newCol < COLS && board[newRow][newCol] === player) {\n          cells.push([newRow, newCol]);\n        } else {\n          break;\n        }\n      }\n      \n      // Check in negative direction\n      for (let i = 1; i < 4; i++) {\n        const newRow = row - dr * i;\n        const newCol = col - dc * i;\n        if (newRow >= 0 && newRow < ROWS && newCol >= 0 && newCol < COLS && board[newRow][newCol] === player) {\n          cells.unshift([newRow, newCol]);\n        } else {\n          break;\n        }\n      }\n      \n      if (cells.length >= 4) {\n        return cells.slice(0, 4);\n      }\n    }\n    \n    return [];\n  }, []);\n\n  const getAIMove = useCallback((board: string[][]): number => {\n    // Simple AI: try to win, then block player, then random\n    \n    // Try to win\n    for (let col = 0; col < COLS; col++) {\n      const row = getLowestEmptyRow(board, col);\n      if (row !== -1) {\n        const newBoard = board.map((r, i) => r.map((c, j) => (i === row && j === col) ? AI : c));\n        if (checkWin(newBoard, row, col, AI).length > 0) {\n          return col;\n        }\n      }\n    }\n    \n    // Try to block player\n    for (let col = 0; col < COLS; col++) {\n      const row = getLowestEmptyRow(board, col);\n      if (row !== -1) {\n        const newBoard = board.map((r, i) => r.map((c, j) => (i === row && j === col) ? PLAYER : c));\n        if (checkWin(newBoard, row, col, PLAYER).length > 0) {\n          return col;\n        }\n      }\n    }\n    \n    // Random move (prefer center)\n    const availableCols = [];\n    for (let col = 0; col < COLS; col++) {\n      if (getLowestEmptyRow(board, col) !== -1) {\n        // Prefer center columns\n        const weight = col === 3 ? 3 : (col === 2 || col === 4) ? 2 : 1;\n        for (let i = 0; i < weight; i++) {\n          availableCols.push(col);\n        }\n      }\n    }\n    \n    return availableCols[Math.floor(Math.random() * availableCols.length)] || 0;\n  }, [checkWin]);\n\n  const getLowestEmptyRow = (board: string[][], col: number): number => {\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (board[row][col] === \"\") {\n        return row;\n      }\n    }\n    return -1;\n  };\n\n  const dropPiece = useCallback((col: number) => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\" || prev.currentPlayer !== PLAYER) return prev;\n\n      const row = getLowestEmptyRow(prev.board, col);\n      if (row === -1) return prev; // Column is full\n\n      const newBoard = prev.board.map((r, i) => \n        r.map((c, j) => (i === row && j === col) ? PLAYER : c)\n      );\n\n      const winningCells = checkWin(newBoard, row, col, PLAYER);\n      const newMoves = prev.moves + 1;\n\n      if (winningCells.length > 0) {\n        // Player wins\n        const newWins = totalWins + 1;\n        setTotalWins(newWins);\n        localStorage.setItem(\"connect-four-wins\", newWins.toString());\n        \n        const pointsEarned = Math.max(5, 20 - newMoves); // More points for faster wins\n        awardPointsMutation.mutate(pointsEarned);\n        \n        toast({\n          title: \"You Win! 🎉\",\n          description: `Congratulations! You won in ${newMoves} moves!`,\n        });\n\n        return {\n          ...prev,\n          board: newBoard,\n          gameStatus: \"gameover\",\n          winner: PLAYER,\n          winningCells,\n          playerScore: prev.playerScore + 1,\n          moves: newMoves,\n        };\n      }\n\n      // Check for tie\n      const isFull = newBoard.every(row => row.every(cell => cell !== \"\"));\n      if (isFull) {\n        toast({\n          title: \"It's a Tie!\",\n          description: \"The board is full - game over!\",\n        });\n        return {\n          ...prev,\n          board: newBoard,\n          gameStatus: \"gameover\",\n          winner: null,\n          moves: newMoves,\n        };\n      }\n\n      // AI's turn\n      const aiCol = getAIMove(newBoard);\n      const aiRow = getLowestEmptyRow(newBoard, aiCol);\n      \n      if (aiRow !== -1) {\n        const aiBoard = newBoard.map((r, i) => \n          r.map((c, j) => (i === aiRow && j === aiCol) ? AI : c)\n        );\n\n        const aiWinningCells = checkWin(aiBoard, aiRow, aiCol, AI);\n        \n        if (aiWinningCells.length > 0) {\n          // AI wins\n          toast({\n            title: \"AI Wins! 🤖\",\n            description: \"Better luck next time!\",\n          });\n\n          return {\n            ...prev,\n            board: aiBoard,\n            gameStatus: \"gameover\",\n            winner: AI,\n            winningCells: aiWinningCells,\n            aiScore: prev.aiScore + 1,\n            moves: newMoves + 1,\n          };\n        }\n\n        return {\n          ...prev,\n          board: aiBoard,\n          currentPlayer: PLAYER,\n          moves: newMoves + 1,\n        };\n      }\n\n      return {\n        ...prev,\n        board: newBoard,\n        currentPlayer: PLAYER,\n        moves: newMoves,\n      };\n    });\n  }, [checkWin, getAIMove, totalWins, awardPointsMutation, toast]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  const isWinningCell = (row: number, col: number) => {\n    return gameState.winningCells.some(([winRow, winCol]) => winRow === row && winCol === col);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">🔴 Connect Four</h2>\n        <p className=\"text-sm text-muted-foreground\">Get four in a row to win!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-4\">\n          <div className=\"relative\">\n            {/* Game board */}\n            <div className=\"grid grid-cols-7 gap-2 bg-blue-600 p-4 rounded-lg mx-auto max-w-md\">\n              {Array.from({ length: ROWS }, (_, row) =>\n                Array.from({ length: COLS }, (_, col) => (\n                  <button\n                    key={`${row}-${col}`}\n                    onClick={() => dropPiece(col)}\n                    onTouchStart={(e) => {\n                      e.preventDefault();\n                      if (gameState.gameStatus === \"playing\" && gameState.currentPlayer === PLAYER) {\n                        dropPiece(col);\n                      }\n                    }}\n                    disabled={gameState.gameStatus !== \"playing\" || gameState.currentPlayer !== PLAYER}\n                    className={`aspect-square rounded-full border-2 border-blue-800 transition-all duration-200 touch-none select-none ${\n                      gameState.board[row][col] === PLAYER\n                        ? `bg-red-500 ${isWinningCell(row, col) ? 'ring-4 ring-yellow-400' : ''}`\n                        : gameState.board[row][col] === AI\n                        ? `bg-yellow-500 ${isWinningCell(row, col) ? 'ring-4 ring-red-400' : ''}`\n                        : \"bg-white hover:bg-gray-200 cursor-pointer\"\n                    } ${gameState.gameStatus !== \"playing\" || gameState.currentPlayer !== PLAYER ? \"cursor-not-allowed\" : \"\"}`}\n                    data-testid={`cell-${row}-${col}`}\n                  />\n                ))\n              )}\n            </div>\n\n            {/* Current turn indicator */}\n            {gameState.gameStatus === \"playing\" && (\n              <div className=\"mt-4 text-center\">\n                <div className=\"flex items-center justify-center gap-2\">\n                  <div className={`w-4 h-4 rounded-full ${gameState.currentPlayer === PLAYER ? 'bg-red-500' : 'bg-yellow-500'}`} />\n                  <span className=\"text-sm font-semibold\">\n                    {gameState.currentPlayer === PLAYER ? \"Your turn\" : \"AI thinking...\"}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {gameState.gameStatus !== \"playing\" && (\n            <div className=\"mt-6 text-center\">\n              {gameState.gameStatus === \"waiting\" && (\n                <>\n                  <div className=\"text-xl mb-2\">🔴 Ready to Play Connect Four?</div>\n                  <div className=\"text-sm text-muted-foreground\">Drop pieces to get four in a row!</div>\n                </>\n              )}\n              \n              {gameState.gameStatus === \"gameover\" && (\n                <>\n                  <div className=\"text-xl mb-2\">\n                    {gameState.winner === PLAYER ? \"🎉 You Win!\" : \n                     gameState.winner === AI ? \"🤖 AI Wins!\" : \"🤝 Tie Game!\"}\n                  </div>\n                  <div className=\"text-sm mb-2\">Game completed in {gameState.moves} moves</div>\n                </>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Your Wins: {gameState.playerScore}</Badge>\n            <Badge variant=\"outline\">AI Wins: {gameState.aiScore}</Badge>\n            <Badge variant=\"outline\">Total Wins: {totalWins}</Badge>\n            <Badge variant=\"outline\">Moves: {gameState.moves}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={resetGame}>New Game</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Click a column to drop your red piece</li>\n            <li>• Get four pieces in a row (any direction)</li>\n            <li>• Beat the AI to win points</li>\n            <li>• Faster wins earn more ⭐</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12622},"client/src/components/MemoryMatch.tsx":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface Card {\n  id: number;\n  symbol: string;\n  isFlipped: boolean;\n  isMatched: boolean;\n}\n\ninterface GameState {\n  cards: Card[];\n  flippedCards: number[];\n  moves: number;\n  matches: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n  timeLeft: number;\n}\n\nconst SYMBOLS = [\"🎮\", \"🎯\", \"🎲\", \"🎪\", \"🎨\", \"🎭\", \"🎸\", \"🎺\"];\nconst GAME_TIME = 120; // 2 minutes\n\nexport default function MemoryMatch() {\n  const [gameState, setGameState] = useState<GameState>({\n    cards: [],\n    flippedCards: [],\n    moves: 0,\n    matches: 0,\n    gameStatus: \"waiting\",\n    timeLeft: GAME_TIME,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"memory-match-best-score\") || \"999\", 10);\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Memory Match - completed in ${gameState.moves} moves`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `Great memory skills! You earned ${Math.max(1, Math.floor(50 / gameState.moves))} points!`,\n      });\n    },\n  });\n\n  const shuffleArray = (array: any[]) => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n\n  const createCards = useCallback(() => {\n    const cardPairs = SYMBOLS.flatMap((symbol, index) => [\n      { id: index * 2, symbol, isFlipped: false, isMatched: false },\n      { id: index * 2 + 1, symbol, isFlipped: false, isMatched: false },\n    ]);\n    return shuffleArray(cardPairs);\n  }, []);\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      cards: createCards(),\n      flippedCards: [],\n      moves: 0,\n      matches: 0,\n      gameStatus: \"waiting\",\n      timeLeft: GAME_TIME,\n    });\n  }, [createCards]);\n\n  const flipCard = useCallback((cardId: number) => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\" || prev.flippedCards.length >= 2) return prev;\n      \n      const card = prev.cards.find(c => c.id === cardId);\n      if (!card || card.isFlipped || card.isMatched) return prev;\n\n      const newCards = prev.cards.map(c =>\n        c.id === cardId ? { ...c, isFlipped: true } : c\n      );\n\n      const newFlippedCards = [...prev.flippedCards, cardId];\n\n      if (newFlippedCards.length === 2) {\n        const [firstId, secondId] = newFlippedCards;\n        const firstCard = newCards.find(c => c.id === firstId);\n        const secondCard = newCards.find(c => c.id === secondId);\n\n        const newMoves = prev.moves + 1;\n\n        if (firstCard?.symbol === secondCard?.symbol) {\n          // Match found\n          const matchedCards = newCards.map(c =>\n            c.id === firstId || c.id === secondId\n              ? { ...c, isMatched: true }\n              : c\n          );\n\n          const newMatches = prev.matches + 1;\n          const gameWon = newMatches === SYMBOLS.length;\n\n          setTimeout(() => {\n            setGameState(current => ({\n              ...current,\n              cards: matchedCards,\n              flippedCards: [],\n              moves: newMoves,\n              matches: newMatches,\n              gameStatus: gameWon ? \"gameover\" : \"playing\",\n            }));\n          }, 500);\n\n          return {\n            ...prev,\n            cards: newCards,\n            flippedCards: newFlippedCards,\n            moves: newMoves,\n          };\n        } else {\n          // No match, flip back after delay\n          setTimeout(() => {\n            setGameState(current => ({\n              ...current,\n              cards: current.cards.map(c =>\n                c.id === firstId || c.id === secondId\n                  ? { ...c, isFlipped: false }\n                  : c\n              ),\n              flippedCards: [],\n              moves: newMoves,\n            }));\n          }, 1000);\n\n          return {\n            ...prev,\n            cards: newCards,\n            flippedCards: newFlippedCards,\n            moves: newMoves,\n          };\n        }\n      }\n\n      return {\n        ...prev,\n        cards: newCards,\n        flippedCards: newFlippedCards,\n      };\n    });\n  }, []);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\" && gameState.timeLeft > 0) {\n      const timer = setInterval(() => {\n        setGameState(prev => {\n          if (prev.timeLeft <= 1) {\n            return { ...prev, timeLeft: 0, gameStatus: \"gameover\" };\n          }\n          return { ...prev, timeLeft: prev.timeLeft - 1 };\n        });\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [gameState.gameStatus, gameState.timeLeft]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const isWin = gameState.matches === SYMBOLS.length;\n      if (isWin && gameState.moves < bestScore) {\n        setBestScore(gameState.moves);\n        localStorage.setItem(\"memory-match-best-score\", gameState.moves.toString());\n      }\n      \n      if (isWin) {\n        const pointsEarned = Math.max(1, Math.floor(50 / gameState.moves));\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.moves, gameState.matches, bestScore, awardPointsMutation]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const calculateScore = () => {\n    const baseScore = gameState.matches * 10;\n    const timeBonus = gameState.timeLeft;\n    const movesPenalty = gameState.moves * 2;\n    return Math.max(0, baseScore + timeBonus - movesPenalty);\n  };\n\n  return (\n    <div ref={gameContainerRef} className={`space-y-4 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 overflow-auto' : ''}`}>\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">🧠 Memory Match</h2>\n        <p className=\"text-sm text-muted-foreground\">Match all pairs before time runs out!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-4 gap-3 max-w-lg mx-auto\">\n            {gameState.cards.map((card) => (\n              <button\n                key={card.id}\n                onClick={() => flipCard(card.id)}\n                onTouchStart={(e) => {\n                  e.preventDefault();\n                  if (gameState.gameStatus === \"playing\" && !card.isMatched) {\n                    flipCard(card.id);\n                  }\n                }}\n                disabled={gameState.gameStatus !== \"playing\" || card.isMatched}\n                className={`aspect-square rounded-lg text-2xl font-bold transition-all duration-300 touch-none select-none ${\n                  card.isFlipped || card.isMatched\n                    ? card.isMatched\n                      ? \"bg-green-200 dark:bg-green-800 text-green-800 dark:text-green-200\"\n                      : \"bg-blue-200 dark:bg-blue-800 text-blue-800 dark:text-blue-200\"\n                    : \"bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600\"\n                }`}\n                data-testid={`card-${card.id}`}\n              >\n                {(card.isFlipped || card.isMatched) ? card.symbol : \"?\"}\n              </button>\n            ))}\n          </div>\n          \n          {gameState.gameStatus !== \"playing\" && (\n            <div className=\"mt-6 text-center\">\n              {gameState.gameStatus === \"waiting\" && (\n                <>\n                  <div className=\"text-xl mb-2\">🧠 Ready to Test Your Memory?</div>\n                  <div className=\"text-sm text-muted-foreground\">Find all matching pairs in 2 minutes!</div>\n                </>\n              )}\n              \n              {gameState.gameStatus === \"gameover\" && (\n                <>\n                  <div className=\"text-xl mb-2\">\n                    {gameState.matches === SYMBOLS.length ? \"🎉 Victory!\" : \"⏰ Time's Up!\"}\n                  </div>\n                  <div className=\"text-sm mb-2\">\n                    Matches: {gameState.matches}/{SYMBOLS.length} | Moves: {gameState.moves}\n                  </div>\n                  <div className=\"text-sm mb-2\">Score: {calculateScore()}</div>\n                  {gameState.matches === SYMBOLS.length && gameState.moves < bestScore && (\n                    <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Time: {formatTime(gameState.timeLeft)}</Badge>\n            <Badge variant=\"outline\">Moves: {gameState.moves}</Badge>\n            <Badge variant=\"outline\">Matches: {gameState.matches}/{SYMBOLS.length}</Badge>\n            <Badge variant=\"outline\">Best: {bestScore === 999 ? \"--\" : bestScore} moves</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"px-2\"\n            >\n              {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Click cards to flip them over</li>\n            <li>• Find matching pairs of symbols</li>\n            <li>• Complete all matches within 2 minutes</li>\n            <li>• Fewer moves = higher score and more ⭐</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12095},"client/src/components/PacManGame.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Ghost extends Position {\n  id: number;\n  direction: Position;\n  color: string;\n  scared: boolean;\n}\n\ninterface GameState {\n  player: Position;\n  ghosts: Ghost[];\n  dots: Position[];\n  powerPellets: Position[];\n  score: number;\n  lives: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n  level: number;\n  powerMode: boolean;\n  powerModeTime: number;\n}\n\nconst GRID_SIZE = 20;\nconst CANVAS_WIDTH = 400;\nconst CANVAS_HEIGHT = 400;\nconst CELL_SIZE = CANVAS_WIDTH / GRID_SIZE;\n\nexport default function PacManGame() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    player: { x: 10, y: 15 },\n    ghosts: [],\n    dots: [],\n    powerPellets: [],\n    score: 0,\n    lives: 3,\n    gameStatus: \"waiting\",\n    level: 1,\n    powerMode: false,\n    powerModeTime: 0,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"pacman-best-score\") || \"0\", 10);\n  });\n\n  const [direction, setDirection] = useState<Position>({ x: 0, y: 0 });\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Pac-Man - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 18)} points!`,\n      });\n    },\n  });\n\n  const createMaze = useCallback(() => {\n    const dots: Position[] = [];\n    const powerPellets: Position[] = [];\n    \n    // Simple maze - create dots everywhere except walls and starting positions\n    for (let x = 1; x < GRID_SIZE - 1; x++) {\n      for (let y = 1; y < GRID_SIZE - 1; y++) {\n        // Skip walls (simple pattern)\n        if ((x % 4 === 0 && y % 4 === 0) || \n            (x === 10 && y === 15) || // player start\n            (x >= 8 && x <= 12 && y >= 8 && y <= 12)) { // ghost area\n          continue;\n        }\n        \n        // Power pellets in corners\n        if ((x === 1 && y === 1) || (x === 1 && y === GRID_SIZE - 2) ||\n            (x === GRID_SIZE - 2 && y === 1) || (x === GRID_SIZE - 2 && y === GRID_SIZE - 2)) {\n          powerPellets.push({ x, y });\n        } else {\n          dots.push({ x, y });\n        }\n      }\n    }\n    \n    return { dots, powerPellets };\n  }, []);\n\n  const createGhosts = useCallback((): Ghost[] => {\n    const colors = [\"#ff0000\", \"#ffb8ff\", \"#00ffff\", \"#ffb852\"];\n    const ghosts: Ghost[] = [];\n    \n    for (let i = 0; i < 4; i++) {\n      ghosts.push({\n        id: i,\n        x: 9 + i,\n        y: 10,\n        direction: { x: 0, y: -1 },\n        color: colors[i],\n        scared: false,\n      });\n    }\n    \n    return ghosts;\n  }, []);\n\n  const resetGame = useCallback(() => {\n    const { dots, powerPellets } = createMaze();\n    setGameState({\n      player: { x: 10, y: 15 },\n      ghosts: createGhosts(),\n      dots,\n      powerPellets,\n      score: 0,\n      lives: 3,\n      gameStatus: \"waiting\",\n      level: 1,\n      powerMode: false,\n      powerModeTime: 0,\n    });\n    setDirection({ x: 0, y: 0 });\n  }, [createMaze, createGhosts]);\n\n  const isValidMove = useCallback((pos: Position): boolean => {\n    return pos.x >= 0 && pos.x < GRID_SIZE && \n           pos.y >= 0 && pos.y < GRID_SIZE &&\n           !(pos.x % 4 === 0 && pos.y % 4 === 0); // Simple wall detection\n  }, []);\n\n  const gameLoop = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      let newState = { ...prev };\n\n      // Move player\n      if (direction.x !== 0 || direction.y !== 0) {\n        const newPlayerPos = {\n          x: newState.player.x + direction.x,\n          y: newState.player.y + direction.y,\n        };\n\n        if (isValidMove(newPlayerPos)) {\n          newState.player = newPlayerPos;\n        }\n      }\n\n      // Check dot collection\n      newState.dots = newState.dots.filter(dot => {\n        if (dot.x === newState.player.x && dot.y === newState.player.y) {\n          newState.score += 10;\n          return false;\n        }\n        return true;\n      });\n\n      // Check power pellet collection\n      newState.powerPellets = newState.powerPellets.filter(pellet => {\n        if (pellet.x === newState.player.x && pellet.y === newState.player.y) {\n          newState.score += 50;\n          newState.powerMode = true;\n          newState.powerModeTime = 300; // 5 seconds at 60 FPS\n          newState.ghosts = newState.ghosts.map(ghost => ({ ...ghost, scared: true }));\n          return false;\n        }\n        return true;\n      });\n\n      // Update power mode\n      if (newState.powerMode) {\n        newState.powerModeTime -= 1;\n        if (newState.powerModeTime <= 0) {\n          newState.powerMode = false;\n          newState.ghosts = newState.ghosts.map(ghost => ({ ...ghost, scared: false }));\n        }\n      }\n\n      // Move ghosts (simple AI)\n      newState.ghosts = newState.ghosts.map(ghost => {\n        const possibleMoves = [\n          { x: ghost.x + 1, y: ghost.y },\n          { x: ghost.x - 1, y: ghost.y },\n          { x: ghost.x, y: ghost.y + 1 },\n          { x: ghost.x, y: ghost.y - 1 },\n        ].filter(pos => isValidMove(pos));\n\n        if (possibleMoves.length > 0) {\n          let nextMove;\n          \n          if (ghost.scared) {\n            // Move away from player\n            const distances = possibleMoves.map(pos => {\n              const dx = pos.x - newState.player.x;\n              const dy = pos.y - newState.player.y;\n              return { pos, distance: Math.sqrt(dx * dx + dy * dy) };\n            });\n            nextMove = distances.sort((a, b) => b.distance - a.distance)[0].pos;\n          } else {\n            // Move towards player (simple pathfinding)\n            const distances = possibleMoves.map(pos => {\n              const dx = pos.x - newState.player.x;\n              const dy = pos.y - newState.player.y;\n              return { pos, distance: Math.sqrt(dx * dx + dy * dy) };\n            });\n            nextMove = distances.sort((a, b) => a.distance - b.distance)[0].pos;\n          }\n\n          return {\n            ...ghost,\n            x: nextMove.x,\n            y: nextMove.y,\n            direction: {\n              x: nextMove.x - ghost.x,\n              y: nextMove.y - ghost.y,\n            },\n          };\n        }\n\n        return ghost;\n      });\n\n      // Check ghost collisions\n      newState.ghosts.forEach(ghost => {\n        if (ghost.x === newState.player.x && ghost.y === newState.player.y) {\n          if (ghost.scared && newState.powerMode) {\n            // Eat ghost\n            newState.score += 200;\n            ghost.x = 10; // Reset ghost position\n            ghost.y = 10;\n            ghost.scared = false;\n          } else {\n            // Player dies\n            newState.lives -= 1;\n            if (newState.lives <= 0) {\n              newState.gameStatus = \"gameover\";\n            } else {\n              // Reset positions\n              newState.player = { x: 10, y: 15 };\n              newState.ghosts = createGhosts();\n              newState.powerMode = false;\n              newState.powerModeTime = 0;\n            }\n          }\n        }\n      });\n\n      // Check level complete\n      if (newState.dots.length === 0 && newState.powerPellets.length === 0) {\n        newState.level += 1;\n        const { dots, powerPellets } = createMaze();\n        newState.dots = dots;\n        newState.powerPellets = powerPellets;\n        newState.score += 1000; // Level bonus\n        newState.player = { x: 10, y: 15 };\n        newState.ghosts = createGhosts();\n        newState.powerMode = false;\n        newState.powerModeTime = 0;\n        \n        toast({\n          title: `Level ${newState.level - 1} Complete!`,\n          description: \"+1000 bonus points!\",\n        });\n      }\n\n      return newState;\n    });\n  }, [direction, isValidMove, createGhosts, createMaze, toast]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw maze walls\n    ctx.fillStyle = \"#0000ff\";\n    for (let x = 0; x < GRID_SIZE; x++) {\n      for (let y = 0; y < GRID_SIZE; y++) {\n        if (x % 4 === 0 && y % 4 === 0) {\n          ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        }\n      }\n    }\n\n    // Draw dots\n    ctx.fillStyle = \"#ffff00\";\n    gameState.dots.forEach(dot => {\n      ctx.beginPath();\n      ctx.arc(\n        dot.x * CELL_SIZE + CELL_SIZE / 2,\n        dot.y * CELL_SIZE + CELL_SIZE / 2,\n        2,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    });\n\n    // Draw power pellets\n    ctx.fillStyle = \"#ffffff\";\n    gameState.powerPellets.forEach(pellet => {\n      ctx.beginPath();\n      ctx.arc(\n        pellet.x * CELL_SIZE + CELL_SIZE / 2,\n        pellet.y * CELL_SIZE + CELL_SIZE / 2,\n        6,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    });\n\n    // Draw player (Pac-Man)\n    ctx.fillStyle = gameState.powerMode ? \"#ffff80\" : \"#ffff00\";\n    const playerX = gameState.player.x * CELL_SIZE + CELL_SIZE / 2;\n    const playerY = gameState.player.y * CELL_SIZE + CELL_SIZE / 2;\n    \n    ctx.beginPath();\n    ctx.arc(playerX, playerY, CELL_SIZE / 2 - 2, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Draw mouth\n    ctx.fillStyle = \"#000\";\n    ctx.beginPath();\n    ctx.moveTo(playerX, playerY);\n    ctx.arc(playerX, playerY, CELL_SIZE / 2 - 2, 0, Math.PI / 3);\n    ctx.fill();\n\n    // Draw ghosts\n    gameState.ghosts.forEach(ghost => {\n      ctx.fillStyle = ghost.scared && gameState.powerMode ? \"#0000ff\" : ghost.color;\n      const ghostX = ghost.x * CELL_SIZE + CELL_SIZE / 2;\n      const ghostY = ghost.y * CELL_SIZE + CELL_SIZE / 2;\n      \n      // Body\n      ctx.beginPath();\n      ctx.arc(ghostX, ghostY - 2, CELL_SIZE / 2 - 2, Math.PI, 0);\n      ctx.fillRect(ghostX - CELL_SIZE / 2 + 2, ghostY - 2, CELL_SIZE - 4, CELL_SIZE / 2);\n      ctx.fill();\n      \n      // Eyes\n      if (!ghost.scared) {\n        ctx.fillStyle = \"#fff\";\n        ctx.fillRect(ghostX - 4, ghostY - 6, 3, 4);\n        ctx.fillRect(ghostX + 1, ghostY - 6, 3, 4);\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(ghostX - 3, ghostY - 5, 1, 2);\n        ctx.fillRect(ghostX + 2, ghostY - 5, 1, 2);\n      }\n    });\n\n    // Draw score\n    ctx.fillStyle = \"#fff\";\n    ctx.font = \"16px Arial\";\n    ctx.fillText(`Score: ${gameState.score}`, 10, 25);\n    ctx.fillText(`Lives: ${gameState.lives}`, 10, 45);\n    ctx.fillText(`Level: ${gameState.level}`, 10, 65);\n    \n    if (gameState.powerMode) {\n      ctx.fillStyle = \"#ffff00\";\n      ctx.fillText(\"POWER MODE!\", CANVAS_WIDTH - 120, 25);\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(gameLoop, 1000 / 10); // Slower than other games\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameLoop]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"pacman-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 18);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (gameState.gameStatus !== \"playing\") return;\n\n      switch (e.key) {\n        case \"ArrowUp\":\n        case \"w\":\n        case \"W\":\n          e.preventDefault();\n          e.stopPropagation();\n          setDirection({ x: 0, y: -1 });\n          break;\n        case \"ArrowDown\":\n        case \"s\":\n        case \"S\":\n          e.preventDefault();\n          e.stopPropagation();\n          setDirection({ x: 0, y: 1 });\n          break;\n        case \"ArrowLeft\":\n        case \"a\":\n        case \"A\":\n          e.preventDefault();\n          e.stopPropagation();\n          setDirection({ x: -1, y: 0 });\n          break;\n        case \"ArrowRight\":\n        case \"d\":\n        case \"D\":\n          e.preventDefault();\n          e.stopPropagation();\n          setDirection({ x: 1, y: 0 });\n          break;\n      }\n    };\n\n    if (gameState.gameStatus === \"playing\") {\n      document.addEventListener(\"keydown\", handleKeyDown, { capture: true });\n      return () => document.removeEventListener(\"keydown\", handleKeyDown, { capture: true });\n    }\n  }, [gameState.gameStatus]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">👻 Pac-Man</h2>\n        <p className=\"text-sm text-muted-foreground\">Collect dots and avoid ghosts!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-2\">\n          <div \n            className=\"relative bg-black rounded-lg overflow-hidden focus:outline-none focus:ring-2 focus:ring-pocket-red\"\n            tabIndex={0}\n            data-testid=\"game-container-pacman\"\n          >\n            <canvas\n              ref={canvasRef}\n              width={CANVAS_WIDTH}\n              height={CANVAS_HEIGHT}\n              className=\"w-full h-96 cursor-crosshair\"\n              data-testid=\"canvas-pacman\"\n            />\n            \n            {gameState.gameStatus !== \"playing\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-white bg-black/50\">\n                <div className=\"text-center\">\n                  {gameState.gameStatus === \"waiting\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">👻 Ready to Play Pac-Man?</div>\n                      <div className=\"text-sm mb-1\">Arrow keys to move</div>\n                      <div className=\"text-sm\">Collect all dots to win!</div>\n                    </>\n                  )}\n                  \n                  {gameState.gameStatus === \"gameover\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">Game Over!</div>\n                      <div className=\"text-sm mb-2\">Final Score: {gameState.score}</div>\n                      <div className=\"text-sm mb-2\">Level Reached: {gameState.level}</div>\n                      {gameState.score > bestScore && (\n                        <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\">Best: {bestScore}</Badge>\n            <Badge variant=\"outline\">Level: {gameState.level}</Badge>\n            <Badge variant=\"outline\">Lives: {gameState.lives}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Arrow keys to move around the maze</li>\n            <li>• Collect yellow dots for points</li>\n            <li>• Power pellets make ghosts scared (blue)</li>\n            <li>• Eat scared ghosts for bonus points</li>\n            <li>• Earn 1 ⭐ for every 18 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17114},"client/src/components/RacingGame.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Car extends Position {\n  speed: number;\n  lane: number;\n}\n\ninterface Obstacle extends Position {\n  width: number;\n  height: number;\n  speed: number;\n}\n\ninterface GameState {\n  player: Car;\n  obstacles: Obstacle[];\n  score: number;\n  speed: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n  distance: number;\n  fuel: number;\n}\n\nconst CANVAS_WIDTH = 400;\nconst CANVAS_HEIGHT = 600;\nconst LANE_WIDTH = CANVAS_WIDTH / 3;\nconst CAR_WIDTH = 40;\nconst CAR_HEIGHT = 60;\n\nexport default function RacingGame() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    player: { x: LANE_WIDTH + LANE_WIDTH / 2 - CAR_WIDTH / 2, y: CANVAS_HEIGHT - 100, speed: 0, lane: 1 },\n    obstacles: [],\n    score: 0,\n    speed: 2,\n    gameStatus: \"waiting\",\n    distance: 0,\n    fuel: 100,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"racing-best-score\") || \"0\", 10);\n  });\n\n  const keysRef = useRef<{ [key: string]: boolean }>({});\n  const obstacleIdRef = useRef(0);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Racing Game - drove ${gameState.distance} meters`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 22)} points!`,\n      });\n    },\n  });\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      player: { x: LANE_WIDTH + LANE_WIDTH / 2 - CAR_WIDTH / 2, y: CANVAS_HEIGHT - 100, speed: 0, lane: 1 },\n      obstacles: [],\n      score: 0,\n      speed: 2,\n      gameStatus: \"waiting\",\n      distance: 0,\n      fuel: 100,\n    });\n  }, []);\n\n  const gameLoop = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      let newState = { ...prev };\n\n      // Handle input\n      if (keysRef.current['ArrowLeft'] && newState.player.lane > 0) {\n        newState.player.lane -= 1;\n        newState.player.x = newState.player.lane * LANE_WIDTH + LANE_WIDTH / 2 - CAR_WIDTH / 2;\n      }\n      if (keysRef.current['ArrowRight'] && newState.player.lane < 2) {\n        newState.player.lane += 1;\n        newState.player.x = newState.player.lane * LANE_WIDTH + LANE_WIDTH / 2 - CAR_WIDTH / 2;\n      }\n\n      // Update player speed and fuel\n      if (keysRef.current['ArrowUp']) {\n        newState.player.speed = Math.min(newState.player.speed + 0.2, 8);\n        newState.fuel = Math.max(0, newState.fuel - 0.3);\n      } else {\n        newState.player.speed = Math.max(newState.player.speed - 0.1, 2);\n      }\n\n      // Check fuel\n      if (newState.fuel <= 0) {\n        newState.gameStatus = \"gameover\";\n        return newState;\n      }\n\n      // Update distance and score\n      newState.distance += newState.player.speed;\n      newState.score = Math.floor(newState.distance / 10);\n\n      // Increase game speed over time\n      newState.speed = Math.min(2 + newState.score / 100, 6);\n\n      // Generate obstacles\n      if (Math.random() < 0.02 + newState.speed / 1000) {\n        const lane = Math.floor(Math.random() * 3);\n        newState.obstacles.push({\n          x: lane * LANE_WIDTH + LANE_WIDTH / 2 - 20,\n          y: -60,\n          width: 40,\n          height: 60,\n          speed: newState.speed + Math.random() * 2,\n        });\n      }\n\n      // Update obstacles\n      newState.obstacles = newState.obstacles\n        .map(obstacle => ({\n          ...obstacle,\n          y: obstacle.y + obstacle.speed,\n        }))\n        .filter(obstacle => obstacle.y < CANVAS_HEIGHT + 100);\n\n      // Check collisions\n      newState.obstacles.forEach(obstacle => {\n        if (\n          newState.player.x < obstacle.x + obstacle.width &&\n          newState.player.x + CAR_WIDTH > obstacle.x &&\n          newState.player.y < obstacle.y + obstacle.height &&\n          newState.player.y + CAR_HEIGHT > obstacle.y\n        ) {\n          newState.gameStatus = \"gameover\";\n        }\n      });\n\n      // Add fuel occasionally\n      if (newState.score > 0 && newState.score % 50 === 0 && Math.random() < 0.1) {\n        newState.fuel = Math.min(100, newState.fuel + 20);\n      }\n\n      return newState;\n    });\n  }, []);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#333\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw road\n    ctx.fillStyle = \"#666\";\n    ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\n    // Draw lane lines\n    ctx.strokeStyle = \"#fff\";\n    ctx.lineWidth = 4;\n    ctx.setLineDash([20, 20]);\n    \n    for (let i = 1; i < 3; i++) {\n      ctx.beginPath();\n      ctx.moveTo(i * LANE_WIDTH, 0);\n      ctx.lineTo(i * LANE_WIDTH, CANVAS_HEIGHT);\n      ctx.stroke();\n    }\n\n    // Draw road edges\n    ctx.setLineDash([]);\n    ctx.lineWidth = 8;\n    ctx.strokeStyle = \"#fff\";\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(0, CANVAS_HEIGHT);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(CANVAS_WIDTH, 0);\n    ctx.lineTo(CANVAS_WIDTH, CANVAS_HEIGHT);\n    ctx.stroke();\n\n    // Draw obstacles (other cars)\n    ctx.fillStyle = \"#ff4444\";\n    gameState.obstacles.forEach(obstacle => {\n      // Car body\n      ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n      \n      // Car details\n      ctx.fillStyle = \"#333\";\n      ctx.fillRect(obstacle.x + 5, obstacle.y + 10, obstacle.width - 10, 15);\n      ctx.fillRect(obstacle.x + 5, obstacle.y + 35, obstacle.width - 10, 15);\n      \n      ctx.fillStyle = \"#ff4444\";\n    });\n\n    // Draw player car\n    ctx.fillStyle = \"#44ff44\";\n    ctx.fillRect(gameState.player.x, gameState.player.y, CAR_WIDTH, CAR_HEIGHT);\n    \n    // Player car details\n    ctx.fillStyle = \"#333\";\n    ctx.fillRect(gameState.player.x + 5, gameState.player.y + 10, CAR_WIDTH - 10, 15);\n    ctx.fillRect(gameState.player.x + 5, gameState.player.y + 35, CAR_WIDTH - 10, 15);\n\n    // Draw UI\n    ctx.fillStyle = \"#fff\";\n    ctx.font = \"16px Arial\";\n    ctx.fillText(`Distance: ${Math.floor(gameState.distance)}m`, 10, 25);\n    ctx.fillText(`Score: ${gameState.score}`, 10, 45);\n    ctx.fillText(`Speed: ${Math.floor(gameState.player.speed)} mph`, 10, 65);\n\n    // Draw fuel bar\n    const fuelBarWidth = 100;\n    const fuelBarHeight = 10;\n    const fuelBarX = CANVAS_WIDTH - fuelBarWidth - 10;\n    const fuelBarY = 20;\n\n    ctx.fillStyle = \"#333\";\n    ctx.fillRect(fuelBarX, fuelBarY, fuelBarWidth, fuelBarHeight);\n    \n    ctx.fillStyle = gameState.fuel > 30 ? \"#4CAF50\" : gameState.fuel > 10 ? \"#FF9800\" : \"#F44336\";\n    ctx.fillRect(fuelBarX, fuelBarY, (gameState.fuel / 100) * fuelBarWidth, fuelBarHeight);\n    \n    ctx.strokeStyle = \"#fff\";\n    ctx.lineWidth = 2;\n    ctx.strokeRect(fuelBarX, fuelBarY, fuelBarWidth, fuelBarHeight);\n\n    ctx.fillStyle = \"#fff\";\n    ctx.font = \"12px Arial\";\n    ctx.fillText(\"FUEL\", fuelBarX, fuelBarY - 5);\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(gameLoop, 1000 / 60);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameLoop]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"racing-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 22);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      keysRef.current[e.key] = true;\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      keysRef.current[e.key] = false;\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    window.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      window.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  }, []);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">🏎️ Racing Game</h2>\n        <p className=\"text-sm text-muted-foreground\">Drive fast and avoid other cars!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-2\">\n          <div className=\"relative bg-gradient-to-b from-blue-400 to-green-600 rounded-lg overflow-hidden\">\n            <canvas\n              ref={canvasRef}\n              width={CANVAS_WIDTH}\n              height={CANVAS_HEIGHT}\n              className=\"w-full h-96\"\n              data-testid=\"canvas-racing\"\n            />\n            \n            {gameState.gameStatus !== \"playing\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-white bg-black/50\">\n                <div className=\"text-center\">\n                  {gameState.gameStatus === \"waiting\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">🏎️ Ready to Race?</div>\n                      <div className=\"text-sm mb-1\">Arrow keys to steer and accelerate</div>\n                      <div className=\"text-sm\">Watch your fuel!</div>\n                    </>\n                  )}\n                  \n                  {gameState.gameStatus === \"gameover\" && (\n                    <>\n                      <div className=\"text-xl mb-2\">Race Over!</div>\n                      <div className=\"text-sm mb-2\">Distance: {Math.floor(gameState.distance)}m</div>\n                      <div className=\"text-sm mb-2\">Final Score: {gameState.score}</div>\n                      {gameState.fuel <= 0 && (\n                        <div className=\"text-xs text-yellow-300 mt-1\">Ran out of fuel! ⛽</div>\n                      )}\n                      {gameState.score > bestScore && (\n                        <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\">Best: {bestScore}</Badge>\n            <Badge variant=\"outline\">Distance: {Math.floor(gameState.distance)}m</Badge>\n            <Badge variant=\"outline\">Fuel: {Math.floor(gameState.fuel)}%</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Race\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Left/Right arrows to change lanes</li>\n            <li>• Up arrow to accelerate (uses fuel)</li>\n            <li>• Avoid red cars and manage your fuel</li>\n            <li>• Drive as far as you can for points</li>\n            <li>• Earn 1 ⭐ for every 22 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n      {/* Mobile Controls */}\n      <div className=\"flex justify-center gap-4 sm:hidden\">\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"h-16 w-20\"\n          onTouchStart={() => { keysRef.current['ArrowLeft'] = true; setTimeout(() => keysRef.current['ArrowLeft'] = false, 100); }}\n          onClick={() => { keysRef.current['ArrowLeft'] = true; setTimeout(() => keysRef.current['ArrowLeft'] = false, 100); }}\n        >\n          ← LEFT\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"h-16 w-20\"\n          onTouchStart={() => { keysRef.current['ArrowRight'] = true; setTimeout(() => keysRef.current['ArrowRight'] = false, 100); }}\n          onClick={() => { keysRef.current['ArrowRight'] = true; setTimeout(() => keysRef.current['ArrowRight'] = false, 100); }}\n        >\n          RIGHT →\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":13669},"client/src/components/SimonSays.tsx":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface GameState {\n  sequence: number[];\n  playerSequence: number[];\n  currentStep: number;\n  showingSequence: boolean;\n  score: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\" | \"showing\";\n  round: number;\n  showingIndex: number;\n}\n\nconst COLORS = [\n  { id: 0, color: \"bg-red-500\", activeColor: \"bg-red-300\", sound: \"C4\" },\n  { id: 1, color: \"bg-blue-500\", activeColor: \"bg-blue-300\", sound: \"E4\" },\n  { id: 2, color: \"bg-green-500\", activeColor: \"bg-green-300\", sound: \"G4\" },\n  { id: 3, color: \"bg-yellow-500\", activeColor: \"bg-yellow-300\", sound: \"C5\" },\n];\n\nexport default function SimonSays() {\n  const [gameState, setGameState] = useState<GameState>({\n    sequence: [],\n    playerSequence: [],\n    currentStep: 0,\n    showingSequence: false,\n    score: 0,\n    gameStatus: \"waiting\",\n    round: 0,\n    showingIndex: 0,\n  });\n  \n  const [activeButtons, setActiveButtons] = useState<number[]>([]);\n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"simon-says-best-score\") || \"0\", 10);\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Simon Says - reached round ${gameState.round}`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 6)} points!`,\n      });\n    },\n  });\n\n  const playSound = useCallback((colorId: number) => {\n    // Simple audio feedback using Web Audio API\n    if (typeof window !== 'undefined' && 'AudioContext' in window) {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      const frequencies = { 0: 261.63, 1: 329.63, 2: 392.00, 3: 523.25 }; // C4, E4, G4, C5\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.frequency.value = frequencies[colorId as keyof typeof frequencies];\n      oscillator.type = 'square';\n      \n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.01);\n      gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.3);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 0.3);\n    }\n  }, []);\n\n  const flashButton = useCallback((colorId: number, duration: number = 600) => {\n    setActiveButtons(prev => [...prev, colorId]);\n    playSound(colorId);\n    \n    setTimeout(() => {\n      setActiveButtons(prev => prev.filter(id => id !== colorId));\n    }, duration);\n  }, [playSound]);\n\n  const addToSequence = useCallback(() => {\n    const newColor = Math.floor(Math.random() * 4);\n    setGameState(prev => ({\n      ...prev,\n      sequence: [...prev.sequence, newColor],\n      round: prev.round + 1,\n      score: prev.score + prev.round * 10,\n    }));\n  }, []);\n\n  const showSequence = useCallback(() => {\n    setGameState(prev => ({ ...prev, gameStatus: \"showing\", showingIndex: 0 }));\n    \n    const showNext = (index: number) => {\n      if (index >= gameState.sequence.length) {\n        setGameState(prev => ({ \n          ...prev, \n          gameStatus: \"playing\", \n          playerSequence: [],\n          currentStep: 0 \n        }));\n        return;\n      }\n      \n      setTimeout(() => {\n        flashButton(gameState.sequence[index]);\n        showNext(index + 1);\n      }, 800);\n    };\n    \n    showNext(0);\n  }, [gameState.sequence, flashButton]);\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      sequence: [],\n      playerSequence: [],\n      currentStep: 0,\n      showingSequence: false,\n      score: 0,\n      gameStatus: \"waiting\",\n      round: 0,\n      showingIndex: 0,\n    });\n    setActiveButtons([]);\n  }, []);\n\n  const startGame = useCallback(() => {\n    resetGame();\n    setTimeout(() => {\n      setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n      addToSequence();\n    }, 100);\n  }, [resetGame, addToSequence]);\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  const handleButtonPress = useCallback((colorId: number) => {\n    if (gameState.gameStatus !== \"playing\") return;\n    \n    flashButton(colorId, 200);\n    \n    setGameState(prev => {\n      const newPlayerSequence = [...prev.playerSequence, colorId];\n      const expectedColor = prev.sequence[prev.currentStep];\n      \n      if (colorId !== expectedColor) {\n        // Wrong color - game over\n        toast({\n          title: \"Wrong Color!\",\n          description: `You reached round ${prev.round}`,\n          variant: \"destructive\",\n        });\n        return { ...prev, gameStatus: \"gameover\" };\n      }\n      \n      const newCurrentStep = prev.currentStep + 1;\n      \n      if (newCurrentStep === prev.sequence.length) {\n        // Completed the sequence - add new color and show again\n        toast({\n          title: `Round ${prev.round} Complete!`,\n          description: \"Watch the new sequence!\",\n        });\n        \n        setTimeout(() => {\n          addToSequence();\n          setTimeout(() => showSequence(), 500);\n        }, 1000);\n        \n        return {\n          ...prev,\n          playerSequence: newPlayerSequence,\n          currentStep: newCurrentStep,\n          gameStatus: \"showing\",\n        };\n      }\n      \n      return {\n        ...prev,\n        playerSequence: newPlayerSequence,\n        currentStep: newCurrentStep,\n      };\n    });\n  }, [gameState.gameStatus, gameState.sequence, flashButton, toast, addToSequence, showSequence]);\n\n  useEffect(() => {\n    if (gameState.sequence.length > 0 && gameState.gameStatus === \"playing\" && gameState.currentStep === 0) {\n      showSequence();\n    }\n  }, [gameState.sequence, gameState.gameStatus, gameState.currentStep, showSequence]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"simon-says-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 6);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  return (\n    <div ref={gameContainerRef} className={`space-y-4 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 overflow-auto' : ''}`}>\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">🎵 Simon Says</h2>\n        <p className=\"text-sm text-muted-foreground\">Repeat the color sequence to earn points!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-2 gap-4 max-w-md mx-auto\">\n            {COLORS.map((color) => (\n              <button\n                key={color.id}\n                onClick={() => handleButtonPress(color.id)}\n                onTouchStart={(e) => {\n                  e.preventDefault();\n                  if (gameState.gameStatus === \"playing\") {\n                    handleButtonPress(color.id);\n                  }\n                }}\n                disabled={gameState.gameStatus !== \"playing\"}\n                className={`aspect-square rounded-2xl transition-all duration-200 border-4 border-gray-300 dark:border-gray-600 touch-none select-none ${\n                  activeButtons.includes(color.id)\n                    ? `${color.activeColor} scale-95 border-white`\n                    : `${color.color} hover:scale-105 shadow-lg`\n                } ${\n                  gameState.gameStatus === \"playing\" ? \"cursor-pointer\" : \"cursor-not-allowed opacity-75\"\n                }`}\n                data-testid={`simon-button-${color.id}`}\n              >\n                <div className=\"w-full h-full flex items-center justify-center text-2xl font-bold text-white drop-shadow-lg\">\n                  {color.id === 0 && \"🔴\"}\n                  {color.id === 1 && \"🔵\"}\n                  {color.id === 2 && \"🟢\"}\n                  {color.id === 3 && \"🟡\"}\n                </div>\n              </button>\n            ))}\n          </div>\n          \n          {gameState.gameStatus !== \"playing\" && gameState.gameStatus !== \"showing\" && (\n            <div className=\"mt-6 text-center\">\n              {gameState.gameStatus === \"waiting\" && (\n                <>\n                  <div className=\"text-xl mb-2\">🎵 Ready to Play Simon Says?</div>\n                  <div className=\"text-sm text-muted-foreground\">Watch the sequence, then repeat it!</div>\n                </>\n              )}\n              \n              {gameState.gameStatus === \"gameover\" && (\n                <>\n                  <div className=\"text-xl mb-2\">Game Over! 🎮</div>\n                  <div className=\"text-sm mb-2\">Final Score: {gameState.score}</div>\n                  <div className=\"text-sm mb-2\">Rounds Completed: {gameState.round - 1}</div>\n                  {gameState.score > bestScore && (\n                    <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n\n          {gameState.gameStatus === \"showing\" && (\n            <div className=\"mt-6 text-center\">\n              <div className=\"text-lg mb-2\">👀 Watch the Sequence</div>\n              <div className=\"text-sm text-muted-foreground\">Round {gameState.round}</div>\n            </div>\n          )}\n\n          {gameState.gameStatus === \"playing\" && gameState.currentStep > 0 && (\n            <div className=\"mt-6 text-center\">\n              <div className=\"text-lg mb-2\">🎯 Your Turn</div>\n              <div className=\"text-sm text-muted-foreground\">\n                Step {gameState.currentStep + 1} of {gameState.sequence.length}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\">Round: {gameState.round}</Badge>\n            <Badge variant=\"outline\">Best: {bestScore}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"px-2\"\n            >\n              {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n              disabled={gameState.gameStatus === \"showing\"}\n            >\n              {gameState.gameStatus === \"playing\" || gameState.gameStatus === \"showing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Watch the sequence of colors that flash</li>\n            <li>• Click the colors in the same order</li>\n            <li>• Each round adds one more color</li>\n            <li>• Earn 1 ⭐ for every 6 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13341},"client/src/components/SnakeGame.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface GameState {\n  snake: Position[];\n  food: Position;\n  direction: Position;\n  score: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n}\n\nconst GRID_SIZE = 20;\nconst CANVAS_SIZE = 400;\n\nexport default function SnakeGame() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    snake: [{ x: 10, y: 10 }],\n    food: { x: 15, y: 15 },\n    direction: { x: 0, y: 0 },\n    score: 0,\n    gameStatus: \"waiting\",\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"snake-best-score\") || \"0\", 10);\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Snake game - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 3)} points!`,\n      });\n    },\n  });\n\n  const generateFood = useCallback((snake: Position[]): Position => {\n    const maxPos = CANVAS_SIZE / GRID_SIZE - 1;\n    let newFood: Position;\n    do {\n      newFood = {\n        x: Math.floor(Math.random() * maxPos),\n        y: Math.floor(Math.random() * maxPos),\n      };\n    } while (snake.some(segment => segment.x === newFood.x && segment.y === newFood.y));\n    return newFood;\n  }, []);\n\n  const resetGame = useCallback(() => {\n    const initialSnake = [{ x: 10, y: 10 }];\n    setGameState({\n      snake: initialSnake,\n      food: generateFood(initialSnake),\n      direction: { x: 0, y: 0 },\n      score: 0,\n      gameStatus: \"waiting\",\n    });\n  }, [generateFood]);\n\n  const gameLoop = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      const newSnake = [...prev.snake];\n      const head = { ...newSnake[0] };\n      \n      head.x += prev.direction.x;\n      head.y += prev.direction.y;\n\n      // Check wall collision\n      const maxPos = CANVAS_SIZE / GRID_SIZE - 1;\n      if (head.x < 0 || head.x > maxPos || head.y < 0 || head.y > maxPos) {\n        return { ...prev, gameStatus: \"gameover\" };\n      }\n\n      // Check self collision\n      if (newSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n        return { ...prev, gameStatus: \"gameover\" };\n      }\n\n      newSnake.unshift(head);\n\n      let newFood: Position = prev.food;\n      let newScore = prev.score;\n\n      // Check food collision\n      if (head.x === prev.food.x && head.y === prev.food.y) {\n        newScore += 10;\n        newFood = generateFood(newSnake);\n      } else {\n        newSnake.pop();\n      }\n\n      return {\n        ...prev,\n        snake: newSnake,\n        food: newFood,\n        score: newScore,\n      };\n    });\n  }, [generateFood]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#1a1a1a\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw snake\n    ctx.fillStyle = \"#4ade80\";\n    gameState.snake.forEach((segment, index) => {\n      ctx.fillStyle = index === 0 ? \"#22c55e\" : \"#4ade80\";\n      ctx.fillRect(\n        segment.x * GRID_SIZE,\n        segment.y * GRID_SIZE,\n        GRID_SIZE - 2,\n        GRID_SIZE - 2\n      );\n    });\n\n    // Draw food\n    ctx.fillStyle = \"#ef4444\";\n    ctx.fillRect(\n      gameState.food.x * GRID_SIZE,\n      gameState.food.y * GRID_SIZE,\n      GRID_SIZE - 2,\n      GRID_SIZE - 2\n    );\n\n    // Draw grid\n    ctx.strokeStyle = \"#333\";\n    ctx.lineWidth = 1;\n    for (let i = 0; i <= CANVAS_SIZE; i += GRID_SIZE) {\n      ctx.beginPath();\n      ctx.moveTo(i, 0);\n      ctx.lineTo(i, CANVAS_SIZE);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.moveTo(0, i);\n      ctx.lineTo(CANVAS_SIZE, i);\n      ctx.stroke();\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(gameLoop, 150);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameLoop]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"snake-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 3);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      // Only handle if game is playing and focus is on game area\n      if (gameState.gameStatus !== \"playing\") return;\n      \n      const keyDirections: { [key: string]: Position } = {\n        ArrowUp: { x: 0, y: -1 },\n        ArrowDown: { x: 0, y: 1 },\n        ArrowLeft: { x: -1, y: 0 },\n        ArrowRight: { x: 1, y: 0 },\n        w: { x: 0, y: -1 },\n        s: { x: 0, y: 1 },\n        a: { x: -1, y: 0 },\n        d: { x: 1, y: 0 },\n        W: { x: 0, y: -1 },\n        S: { x: 0, y: 1 },\n        A: { x: -1, y: 0 },\n        D: { x: 1, y: 0 },\n      };\n\n      const newDirection = keyDirections[e.key];\n      if (newDirection) {\n        e.preventDefault();\n        e.stopPropagation();\n        setGameState(prev => {\n          // Prevent reverse direction\n          if (newDirection.x === -prev.direction.x && newDirection.y === -prev.direction.y) {\n            return prev;\n          }\n          return { ...prev, direction: newDirection };\n        });\n      }\n    };\n\n    if (gameState.gameStatus === \"playing\") {\n      document.addEventListener(\"keydown\", handleKeyPress, { capture: true });\n      return () => document.removeEventListener(\"keydown\", handleKeyPress, { capture: true });\n    }\n  }, [gameState.gameStatus, gameState.direction]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\", direction: { x: 1, y: 0 } }));\n  };\n\n  const handleDirectionChange = (newDirection: Position) => {\n    if (gameState.gameStatus !== \"playing\") return;\n    \n    setGameState(prev => {\n      // Prevent reverse direction\n      if (newDirection.x === -prev.direction.x && newDirection.y === -prev.direction.y) {\n        return prev;\n      }\n      return { ...prev, direction: newDirection };\n    });\n  };\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  return (\n    <div ref={gameContainerRef} className={`space-y-4 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 overflow-auto' : ''}`}>\n      <div className=\"text-center\">\n        <div className=\"relative inline-block\">\n          <h2 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-green-400 to-emerald-600 bg-clip-text text-transparent\">🐍 Snake Game</h2>\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-green-400 to-emerald-600 rounded-lg blur opacity-20 animate-pulse\"></div>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">Eat the red food to grow and become the ultimate snake!</p>\n      </div>\n\n      <Card className=\"theme-transition shadow-2xl border-2 border-green-500/20\">\n        <CardContent className=\"p-2\">\n          <div className=\"relative bg-gradient-to-br from-gray-900 via-green-900/20 to-gray-900 rounded-xl overflow-hidden shadow-inner border border-green-500/30\">\n            <div \n              className=\"relative focus:outline-none focus:ring-4 focus:ring-green-500/50 rounded-xl\"\n              tabIndex={0}\n              data-testid=\"game-container-snake\"\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-green-900/10 to-transparent rounded-xl\"></div>\n              <canvas\n                ref={canvasRef}\n                width={CANVAS_SIZE}\n                height={CANVAS_SIZE}\n                className=\"w-full h-96 cursor-crosshair relative z-10 rounded-xl\"\n                data-testid=\"canvas-snake-game\"\n              />\n            </div>\n            \n            {gameState.gameStatus !== \"playing\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-white bg-gradient-to-br from-black/80 via-green-900/60 to-black/80 backdrop-blur-sm rounded-xl\">\n                <div className=\"text-center p-6 bg-black/30 rounded-2xl border border-green-500/30 backdrop-blur-md\">\n                  {gameState.gameStatus === \"waiting\" && (\n                    <>\n                      <div className=\"text-2xl mb-4 animate-bounce\">🐍 Ready to Play?</div>\n                      <div className=\"text-sm mb-2 text-green-300\">Use arrow keys or touch controls to move</div>\n                      <div className=\"text-xs text-gray-400\">Eat food to grow and earn points!</div>\n                    </>\n                  )}\n                  \n                  {gameState.gameStatus === \"gameover\" && (\n                    <>\n                      <div className=\"text-2xl mb-4 text-red-400 animate-pulse\">💀 Game Over!</div>\n                      <div className=\"text-lg mb-2 font-bold text-green-400\">Score: {gameState.score}</div>\n                      {gameState.score > bestScore && (\n                        <div className=\"text-sm text-yellow-300 mt-2 animate-bounce\">🏆 New Best Score! 🎉</div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Mobile Controls */}\n      <div className=\"sm:hidden flex flex-col items-center gap-4\">\n        <div className=\"grid grid-cols-3 gap-2 w-48\">\n          <div></div>\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"h-16 w-16 rounded-full bg-green-100 dark:bg-green-900 border-2 border-green-300 dark:border-green-700 active:bg-green-200 dark:active:bg-green-800\"\n            onTouchStart={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: 0, y: -1 });\n            }}\n            onMouseDown={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: 0, y: -1 });\n            }}\n          >\n            <span className=\"text-2xl text-green-600 dark:text-green-400\">↑</span>\n          </Button>\n          <div></div>\n          \n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"h-16 w-16 rounded-full bg-green-100 dark:bg-green-900 border-2 border-green-300 dark:border-green-700 active:bg-green-200 dark:active:bg-green-800\"\n            onTouchStart={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: -1, y: 0 });\n            }}\n            onMouseDown={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: -1, y: 0 });\n            }}\n          >\n            <span className=\"text-2xl text-green-600 dark:text-green-400\">←</span>\n          </Button>\n          <div></div>\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"h-16 w-16 rounded-full bg-green-100 dark:bg-green-900 border-2 border-green-300 dark:border-green-700 active:bg-green-200 dark:active:bg-green-800\"\n            onTouchStart={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: 1, y: 0 });\n            }}\n            onMouseDown={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: 1, y: 0 });\n            }}\n          >\n            <span className=\"text-2xl text-green-600 dark:text-green-400\">→</span>\n          </Button>\n          \n          <div></div>\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"h-16 w-16 rounded-full bg-green-100 dark:bg-green-900 border-2 border-green-300 dark:border-green-700 active:bg-green-200 dark:active:bg-green-800\"\n            onTouchStart={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: 0, y: 1 });\n            }}\n            onMouseDown={(e) => {\n              e.preventDefault();\n              handleDirectionChange({ x: 0, y: 1 });\n            }}\n          >\n            <span className=\"text-2xl text-green-600 dark:text-green-400\">↓</span>\n          </Button>\n          <div></div>\n        </div>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-950/50 dark:to-emerald-950/50\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white border-0 shadow-md\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-yellow-500 to-amber-500 text-white border-0 shadow-md\">Best: {bestScore}</Badge>\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-blue-500 to-cyan-500 text-white border-0 shadow-md\">Length: {gameState.snake.length}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"px-2\"\n            >\n              {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Use arrow keys or on-screen controls</li>\n            <li>• Eat red food to grow and score points</li>\n            <li>• Avoid walls and your own tail</li>\n            <li>• Earn 1 ⭐ for every 3 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":16013},"client/src/components/SpaceInvaders.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Bullet extends Position {\n  id: number;\n}\n\ninterface Alien extends Position {\n  id: number;\n  alive: boolean;\n}\n\ninterface GameState {\n  player: Position;\n  bullets: Bullet[];\n  aliens: Alien[];\n  score: number;\n  lives: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\" | \"victory\";\n  wave: number;\n}\n\nconst CANVAS_WIDTH = 600;\nconst CANVAS_HEIGHT = 400;\nconst PLAYER_SPEED = 5;\nconst BULLET_SPEED = 8;\nconst ALIEN_SPEED = 0.5;\n\nexport default function SpaceInvaders() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    player: { x: CANVAS_WIDTH / 2 - 15, y: CANVAS_HEIGHT - 40 },\n    bullets: [],\n    aliens: [],\n    score: 0,\n    lives: 3,\n    gameStatus: \"waiting\",\n    wave: 1,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"space-invaders-best-score\") || \"0\", 10);\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n\n  const keysRef = useRef<{ [key: string]: boolean }>({});\n  const bulletIdRef = useRef(0);\n  const alienIdRef = useRef(0);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Space Invaders - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 10)} points!`,\n      });\n    },\n  });\n\n  const createAliens = useCallback((wave: number) => {\n    const aliens: Alien[] = [];\n    const rows = Math.min(3 + wave, 6);\n    const cols = 8;\n    \n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        aliens.push({\n          id: alienIdRef.current++,\n          x: 60 + col * 60,\n          y: 50 + row * 40,\n          alive: true,\n        });\n      }\n    }\n    return aliens;\n  }, []);\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      player: { x: CANVAS_WIDTH / 2 - 15, y: CANVAS_HEIGHT - 40 },\n      bullets: [],\n      aliens: createAliens(1),\n      score: 0,\n      lives: 3,\n      gameStatus: \"waiting\",\n      wave: 1,\n    });\n  }, [createAliens]);\n\n  const gameLoop = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      let newState = { ...prev };\n\n      // Move player\n      if (keysRef.current['ArrowLeft'] && newState.player.x > 0) {\n        newState.player = { ...newState.player, x: newState.player.x - PLAYER_SPEED };\n      }\n      if (keysRef.current['ArrowRight'] && newState.player.x < CANVAS_WIDTH - 30) {\n        newState.player = { ...newState.player, x: newState.player.x + PLAYER_SPEED };\n      }\n\n      // Move bullets\n      newState.bullets = newState.bullets\n        .map(bullet => ({ ...bullet, y: bullet.y - BULLET_SPEED }))\n        .filter(bullet => bullet.y > 0);\n\n      // Move aliens\n      newState.aliens = newState.aliens.map(alien => ({\n        ...alien,\n        y: alien.y + ALIEN_SPEED,\n      }));\n\n      // Check bullet-alien collisions\n      newState.bullets.forEach(bullet => {\n        newState.aliens.forEach(alien => {\n          if (\n            alien.alive &&\n            bullet.x > alien.x - 15 &&\n            bullet.x < alien.x + 30 &&\n            bullet.y > alien.y - 15 &&\n            bullet.y < alien.y + 30\n          ) {\n            alien.alive = false;\n            newState.score += 10;\n            newState.bullets = newState.bullets.filter(b => b.id !== bullet.id);\n          }\n        });\n      });\n\n      // Check if all aliens defeated\n      if (!newState.aliens.some(alien => alien.alive)) {\n        newState.wave += 1;\n        newState.aliens = createAliens(newState.wave);\n        newState.score += 100; // Wave bonus\n        toast({\n          title: `Wave ${newState.wave - 1} Complete!`,\n          description: \"+100 bonus points!\",\n        });\n      }\n\n      // Check if aliens reach player\n      const aliensReachedPlayer = newState.aliens.some(\n        alien => alien.alive && alien.y > CANVAS_HEIGHT - 80\n      );\n\n      if (aliensReachedPlayer) {\n        newState.lives -= 1;\n        if (newState.lives <= 0) {\n          newState.gameStatus = \"gameover\";\n        } else {\n          // Reset aliens position\n          newState.aliens = createAliens(newState.wave);\n        }\n      }\n\n      return newState;\n    });\n  }, [createAliens, toast]);\n\n  const shoot = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n      \n      const newBullet: Bullet = {\n        id: bulletIdRef.current++,\n        x: prev.player.x + 15,\n        y: prev.player.y,\n      };\n\n      return {\n        ...prev,\n        bullets: [...prev.bullets, newBullet],\n      };\n    });\n  }, []);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#000011\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw stars\n    ctx.fillStyle = \"#ffffff\";\n    for (let i = 0; i < 50; i++) {\n      ctx.fillRect(\n        Math.random() * CANVAS_WIDTH,\n        Math.random() * CANVAS_HEIGHT,\n        1, 1\n      );\n    }\n\n    // Draw player\n    ctx.fillStyle = \"#00ff00\";\n    ctx.fillRect(gameState.player.x, gameState.player.y, 30, 20);\n    ctx.fillRect(gameState.player.x + 12, gameState.player.y - 10, 6, 10);\n\n    // Draw bullets\n    ctx.fillStyle = \"#ffff00\";\n    gameState.bullets.forEach(bullet => {\n      ctx.fillRect(bullet.x, bullet.y, 2, 8);\n    });\n\n    // Draw aliens\n    gameState.aliens.forEach(alien => {\n      if (alien.alive) {\n        ctx.fillStyle = \"#ff0040\";\n        ctx.fillRect(alien.x, alien.y, 25, 20);\n        // Eyes\n        ctx.fillStyle = \"#ffffff\";\n        ctx.fillRect(alien.x + 5, alien.y + 5, 3, 3);\n        ctx.fillRect(alien.x + 17, alien.y + 5, 3, 3);\n      }\n    });\n\n    // Draw UI\n    ctx.fillStyle = \"#ffffff\";\n    ctx.font = \"16px Arial\";\n    ctx.fillText(`Score: ${gameState.score}`, 10, 25);\n    ctx.fillText(`Lives: ${gameState.lives}`, 10, 45);\n    ctx.fillText(`Wave: ${gameState.wave}`, 10, 65);\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(gameLoop, 1000 / 60);\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameLoop]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"space-invaders-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 10);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (gameState.gameStatus !== \"playing\") return;\n      \n      const validKeys = ['ArrowLeft', 'ArrowRight', ' ', 'a', 'A', 'd', 'D'];\n      if (validKeys.includes(e.key)) {\n        e.preventDefault();\n        e.stopPropagation();\n        keysRef.current[e.key] = true;\n        \n        if (e.key === ' ') {\n          shoot();\n        }\n      }\n    };\n\n    const handleKeyUp = (e: KeyboardEvent) => {\n      keysRef.current[e.key] = false;\n    };\n\n    if (gameState.gameStatus === \"playing\") {\n      document.addEventListener(\"keydown\", handleKeyDown, { capture: true });\n      document.addEventListener(\"keyup\", handleKeyUp, { capture: true });\n      return () => {\n        document.removeEventListener(\"keydown\", handleKeyDown, { capture: true });\n        document.removeEventListener(\"keyup\", handleKeyUp, { capture: true });\n      };\n    }\n  }, [gameState.gameStatus, shoot]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  const handleMobileMove = (direction: string) => {\n    if (gameState.gameStatus === \"playing\") {\n      keysRef.current[direction] = true;\n      setTimeout(() => {\n        keysRef.current[direction] = false;\n      }, 100);\n    }\n  };\n\n  const handleMobileShoot = () => {\n    if (gameState.gameStatus === \"playing\") {\n      shoot();\n    }\n  };\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  return (\n    <div ref={gameContainerRef} className={`space-y-4 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 overflow-auto' : ''}`}>\n      <div className=\"text-center\">\n        <div className=\"relative inline-block\">\n          <h2 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-cyan-400 to-blue-600 bg-clip-text text-transparent\">🚀 Space Invaders</h2>\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-cyan-400 to-blue-600 rounded-lg blur opacity-20 animate-pulse\"></div>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">Defend Earth from the alien invasion!</p>\n      </div>\n\n      <Card className=\"theme-transition shadow-2xl border-2 border-cyan-500/20\">\n        <CardContent className=\"p-2\">\n          <div \n            className=\"relative bg-gradient-to-b from-blue-900 via-cyan-900/20 to-black rounded-xl overflow-hidden focus:outline-none focus:ring-4 focus:ring-cyan-500/50 shadow-inner border border-cyan-500/30\"\n            tabIndex={0}\n            data-testid=\"game-container-space-invaders\"\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-900/10 to-transparent rounded-xl\"></div>\n            <canvas\n              ref={canvasRef}\n              width={CANVAS_WIDTH}\n              height={CANVAS_HEIGHT}\n              className=\"w-full h-80 cursor-crosshair relative z-10 rounded-lg\"\n              data-testid=\"canvas-space-invaders\"\n            />\n            \n            {gameState.gameStatus !== \"playing\" && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-white bg-gradient-to-br from-black/80 via-cyan-900/60 to-black/80 backdrop-blur-sm rounded-xl\">\n                <div className=\"text-center p-6 bg-black/30 rounded-2xl border border-cyan-500/30 backdrop-blur-md\">\n                  {gameState.gameStatus === \"waiting\" && (\n                    <>\n                      <div className=\"text-2xl mb-4 animate-bounce\">🚀 Ready for Battle?</div>\n                      <div className=\"text-sm mb-2 text-cyan-300\">Arrow keys or touch controls to move</div>\n                      <div className=\"text-sm text-blue-300\">Space bar or tap to shoot</div>\n                    </>\n                  )}\n                  \n                  {gameState.gameStatus === \"gameover\" && (\n                    <>\n                      <div className=\"text-2xl mb-4 text-red-400 animate-pulse\">💥 Game Over!</div>\n                      <div className=\"text-lg mb-2 font-bold text-cyan-400\">Final Score: {gameState.score}</div>\n                      <div className=\"text-sm mb-2 text-blue-400\">Reached Wave: {gameState.wave}</div>\n                      {gameState.score > bestScore && (\n                        <div className=\"text-sm text-yellow-300 mt-2 animate-bounce\">🏆 New Best Score! 🎉</div>\n                      )}\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center bg-gradient-to-r from-cyan-50 to-blue-50 dark:from-cyan-950/50 dark:to-blue-950/50\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-cyan-500 to-blue-500 text-white border-0 shadow-md\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-yellow-500 to-amber-500 text-white border-0 shadow-md\">Best: {bestScore}</Badge>\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-md\">Wave: {gameState.wave}</Badge>\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-red-500 to-orange-500 text-white border-0 shadow-md\">Lives: {gameState.lives}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"px-2\"\n            >\n              {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Arrow keys to move left and right</li>\n            <li>• Spacebar to shoot at aliens</li>\n            <li>• Destroy all aliens to advance waves</li>\n            <li>• Earn 1 ⭐ for every 10 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n      {/* Mobile Controls */}\n      <div className=\"flex justify-center gap-8 sm:hidden\">\n        {/* Movement Controls */}\n        <div className=\"flex gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"h-16 w-16\"\n            onTouchStart={() => handleMobileMove('ArrowLeft')}\n            onClick={() => handleMobileMove('ArrowLeft')}\n          >\n            ←\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"h-16 w-16\"\n            onTouchStart={() => handleMobileMove('ArrowRight')}\n            onClick={() => handleMobileMove('ArrowRight')}\n          >\n            →\n          </Button>\n        </div>\n        \n        {/* Shoot Button */}\n        <Button\n          variant=\"outline\"\n          size=\"lg\"\n          className=\"h-16 w-16 rounded-full bg-red-500 hover:bg-red-600 text-white\"\n          onTouchStart={handleMobileShoot}\n          onClick={handleMobileShoot}\n        >\n          🚀\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":16158},"client/src/components/TetrisGame.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface Block extends Position {\n  color: string;\n}\n\ninterface Piece {\n  blocks: Position[];\n  color: string;\n  position: Position;\n}\n\ninterface GameState {\n  grid: string[][];\n  currentPiece: Piece | null;\n  nextPiece: Piece | null;\n  score: number;\n  level: number;\n  lines: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n  dropTime: number;\n}\n\nconst GRID_WIDTH = 10;\nconst GRID_HEIGHT = 20;\nconst CELL_SIZE = 25;\n\nconst PIECES = [\n  { blocks: [[0, 0], [1, 0], [0, 1], [1, 1]], color: \"#ffff00\" }, // Square\n  { blocks: [[0, 0], [1, 0], [2, 0], [3, 0]], color: \"#00ffff\" }, // Line\n  { blocks: [[0, 0], [1, 0], [2, 0], [2, 1]], color: \"#ffa500\" }, // L\n  { blocks: [[0, 0], [1, 0], [2, 0], [0, 1]], color: \"#0000ff\" }, // J\n  { blocks: [[0, 0], [1, 0], [1, 1], [2, 1]], color: \"#00ff00\" }, // S\n  { blocks: [[0, 0], [1, 0], [0, 1], [1, 1], [2, 1]], color: \"#800080\" }, // T\n  { blocks: [[1, 0], [2, 0], [0, 1], [1, 1]], color: \"#ff0000\" }, // Z\n];\n\nexport default function TetrisGame() {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameState, setGameState] = useState<GameState>({\n    grid: Array(GRID_HEIGHT).fill(null).map(() => Array(GRID_WIDTH).fill(\"\")),\n    currentPiece: null,\n    nextPiece: null,\n    score: 0,\n    level: 1,\n    lines: 0,\n    gameStatus: \"waiting\",\n    dropTime: 1000,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"tetris-best-score\") || \"0\", 10);\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Tetris - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      // Force immediate refetch for live updates\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 25)} points!`,\n      });\n    },\n  });\n\n  const createPiece = useCallback((): Piece => {\n    const pieceTemplate = PIECES[Math.floor(Math.random() * PIECES.length)];\n    return {\n      blocks: pieceTemplate.blocks.map(([x, y]) => ({ x, y })),\n      color: pieceTemplate.color,\n      position: { x: 4, y: 0 },\n    };\n  }, []);\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      grid: Array(GRID_HEIGHT).fill(null).map(() => Array(GRID_WIDTH).fill(\"\")),\n      currentPiece: createPiece(),\n      nextPiece: createPiece(),\n      score: 0,\n      level: 1,\n      lines: 0,\n      gameStatus: \"waiting\",\n      dropTime: 1000,\n    });\n  }, [createPiece]);\n\n  const isValidPosition = useCallback((piece: Piece, grid: string[][]): boolean => {\n    return piece.blocks.every(block => {\n      const x = piece.position.x + block.x;\n      const y = piece.position.y + block.y;\n      \n      return (\n        x >= 0 &&\n        x < GRID_WIDTH &&\n        y >= 0 &&\n        y < GRID_HEIGHT &&\n        grid[y][x] === \"\"\n      );\n    });\n  }, []);\n\n  const rotatePiece = useCallback((piece: Piece): Piece => {\n    const rotated = {\n      ...piece,\n      blocks: piece.blocks.map(block => ({\n        x: -block.y,\n        y: block.x,\n      })),\n    };\n    return rotated;\n  }, []);\n\n  const clearLines = useCallback((grid: string[][]): { newGrid: string[][], clearedLines: number } => {\n    const newGrid = [...grid];\n    let clearedLines = 0;\n    \n    for (let y = GRID_HEIGHT - 1; y >= 0; y--) {\n      if (newGrid[y].every(cell => cell !== \"\")) {\n        newGrid.splice(y, 1);\n        newGrid.unshift(Array(GRID_WIDTH).fill(\"\"));\n        clearedLines++;\n        y++; // Check the same row again\n      }\n    }\n    \n    return { newGrid, clearedLines };\n  }, []);\n\n  const placePiece = useCallback(() => {\n    setGameState(prev => {\n      if (!prev.currentPiece || prev.gameStatus !== \"playing\") return prev;\n\n      const newGrid = [...prev.grid];\n      \n      // Place the piece\n      prev.currentPiece.blocks.forEach(block => {\n        const x = prev.currentPiece!.position.x + block.x;\n        const y = prev.currentPiece!.position.y + block.y;\n        if (y >= 0 && y < GRID_HEIGHT && x >= 0 && x < GRID_WIDTH) {\n          newGrid[y][x] = prev.currentPiece!.color;\n        }\n      });\n\n      // Clear lines\n      const { newGrid: clearedGrid, clearedLines } = clearLines(newGrid);\n      \n      // Calculate score\n      let scoreIncrease = 0;\n      if (clearedLines > 0) {\n        scoreIncrease = clearedLines * clearedLines * 100 * prev.level;\n        toast({\n          title: `${clearedLines} Line${clearedLines > 1 ? 's' : ''} Cleared!`,\n          description: `+${scoreIncrease} points!`,\n        });\n      }\n\n      const newLines = prev.lines + clearedLines;\n      const newLevel = Math.floor(newLines / 10) + 1;\n      const newDropTime = Math.max(50, 1000 - (newLevel - 1) * 50);\n\n      // Check game over\n      const nextPiece = prev.nextPiece || createPiece();\n      const gameOver = !isValidPosition(nextPiece, clearedGrid);\n\n      return {\n        ...prev,\n        grid: clearedGrid,\n        currentPiece: gameOver ? null : nextPiece,\n        nextPiece: gameOver ? null : createPiece(),\n        score: prev.score + scoreIncrease + 10, // 10 points for placing a piece\n        level: newLevel,\n        lines: newLines,\n        gameStatus: gameOver ? \"gameover\" : \"playing\",\n        dropTime: newDropTime,\n      };\n    });\n  }, [clearLines, createPiece, isValidPosition, toast]);\n\n  const movePiece = useCallback((direction: Position) => {\n    setGameState(prev => {\n      if (!prev.currentPiece || prev.gameStatus !== \"playing\") return prev;\n\n      const newPiece = {\n        ...prev.currentPiece,\n        position: {\n          x: prev.currentPiece.position.x + direction.x,\n          y: prev.currentPiece.position.y + direction.y,\n        },\n      };\n\n      if (isValidPosition(newPiece, prev.grid)) {\n        return { ...prev, currentPiece: newPiece };\n      } else if (direction.y > 0) {\n        // Can't move down, place the piece\n        placePiece();\n      }\n\n      return prev;\n    });\n  }, [isValidPosition, placePiece]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.fillStyle = \"#000\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Draw grid\n    ctx.strokeStyle = \"#333\";\n    ctx.lineWidth = 1;\n    for (let x = 0; x <= GRID_WIDTH; x++) {\n      ctx.beginPath();\n      ctx.moveTo(x * CELL_SIZE, 0);\n      ctx.lineTo(x * CELL_SIZE, GRID_HEIGHT * CELL_SIZE);\n      ctx.stroke();\n    }\n    for (let y = 0; y <= GRID_HEIGHT; y++) {\n      ctx.beginPath();\n      ctx.moveTo(0, y * CELL_SIZE);\n      ctx.lineTo(GRID_WIDTH * CELL_SIZE, y * CELL_SIZE);\n      ctx.stroke();\n    }\n\n    // Draw placed blocks\n    gameState.grid.forEach((row, y) => {\n      row.forEach((cell, x) => {\n        if (cell) {\n          ctx.fillStyle = cell;\n          ctx.fillRect(x * CELL_SIZE + 1, y * CELL_SIZE + 1, CELL_SIZE - 2, CELL_SIZE - 2);\n        }\n      });\n    });\n\n    // Draw current piece\n    if (gameState.currentPiece) {\n      ctx.fillStyle = gameState.currentPiece.color;\n      gameState.currentPiece.blocks.forEach(block => {\n        const x = gameState.currentPiece!.position.x + block.x;\n        const y = gameState.currentPiece!.position.y + block.y;\n        if (y >= 0) {\n          ctx.fillRect(x * CELL_SIZE + 1, y * CELL_SIZE + 1, CELL_SIZE - 2, CELL_SIZE - 2);\n        }\n      });\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      const interval = setInterval(() => {\n        movePiece({ x: 0, y: 1 });\n      }, gameState.dropTime);\n\n      return () => clearInterval(interval);\n    }\n  }, [gameState.gameStatus, gameState.dropTime, movePiece]);\n\n  useEffect(() => {\n    draw();\n  }, [gameState, draw]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"tetris-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 25);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (gameState.gameStatus !== \"playing\") return;\n\n      switch (e.key) {\n        case \"ArrowLeft\":\n        case \"a\":\n        case \"A\":\n          e.preventDefault();\n          e.stopPropagation();\n          movePiece({ x: -1, y: 0 });\n          break;\n        case \"ArrowRight\":\n        case \"d\":\n        case \"D\":\n          e.preventDefault();\n          e.stopPropagation();\n          movePiece({ x: 1, y: 0 });\n          break;\n        case \"ArrowDown\":\n        case \"s\":\n        case \"S\":\n          e.preventDefault();\n          e.stopPropagation();\n          movePiece({ x: 0, y: 1 });\n          break;\n        case \"ArrowUp\":\n        case \"w\":\n        case \"W\":\n          e.preventDefault();\n          e.stopPropagation();\n          setGameState(prev => {\n            if (!prev.currentPiece) return prev;\n            const rotated = rotatePiece(prev.currentPiece);\n            if (isValidPosition(rotated, prev.grid)) {\n              return { ...prev, currentPiece: rotated };\n            }\n            return prev;\n          });\n          break;\n        case \" \":\n          e.preventDefault();\n          e.stopPropagation();\n          // Hard drop\n          while (gameState.currentPiece) {\n            movePiece({ x: 0, y: 1 });\n          }\n          break;\n      }\n    };\n\n    if (gameState.gameStatus === \"playing\") {\n      document.addEventListener(\"keydown\", handleKeyDown, { capture: true });\n      return () => document.removeEventListener(\"keydown\", handleKeyDown, { capture: true });\n    }\n  }, [gameState.gameStatus, gameState.currentPiece, movePiece, rotatePiece, isValidPosition]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  const handleMobileMove = (direction: { x: number; y: number }) => {\n    if (gameState.gameStatus !== \"playing\") return;\n    movePiece(direction);\n  };\n\n  const handleMobileRotate = () => {\n    if (gameState.gameStatus !== \"playing\" || !gameState.currentPiece) return;\n    setGameState(prev => {\n      if (!prev.currentPiece) return prev;\n      const rotated = rotatePiece(prev.currentPiece);\n      if (isValidPosition(rotated, prev.grid)) {\n        return { ...prev, currentPiece: rotated };\n      }\n      return prev;\n    });\n  };\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  return (\n    <div ref={gameContainerRef} className={`space-y-4 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 overflow-auto' : ''}`}>\n      <div className=\"text-center\">\n        <div className=\"relative inline-block\">\n          <h2 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text text-transparent\">🧩 Tetris</h2>\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-purple-400 to-pink-600 rounded-lg blur opacity-20 animate-pulse\"></div>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">Clear lines by filling rows and reach new heights!</p>\n      </div>\n\n      <div className=\"flex gap-4 justify-center\">\n        <Card className=\"theme-transition shadow-2xl border-2 border-purple-500/20\">\n          <CardContent className=\"p-2\">\n            <div \n              className=\"relative bg-gradient-to-b from-black via-purple-900/20 to-black rounded-xl overflow-hidden focus:outline-none focus:ring-4 focus:ring-purple-500/50 shadow-inner border border-purple-500/30\"\n              tabIndex={0}\n              data-testid=\"game-container-tetris\"\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-purple-900/10 to-transparent rounded-xl\"></div>\n              <canvas\n                ref={canvasRef}\n                width={GRID_WIDTH * CELL_SIZE}\n                height={GRID_HEIGHT * CELL_SIZE}\n                className=\"border-2 border-purple-500/50 cursor-crosshair relative z-10 rounded-lg shadow-lg\"\n                data-testid=\"canvas-tetris\"\n              />\n              \n              {gameState.gameStatus !== \"playing\" && (\n                <div className=\"absolute inset-0 flex items-center justify-center text-white bg-gradient-to-br from-black/80 via-purple-900/60 to-black/80 backdrop-blur-sm rounded-xl\">\n                  <div className=\"text-center p-6 bg-black/30 rounded-2xl border border-purple-500/30 backdrop-blur-md\">\n                    {gameState.gameStatus === \"waiting\" && (\n                      <>\n                        <div className=\"text-2xl mb-4 animate-bounce\">🧩 Ready to Play Tetris?</div>\n                        <div className=\"text-sm mb-1 text-purple-300\">Arrow keys to move and rotate</div>\n                        <div className=\"text-sm text-pink-300\">Space bar for hard drop</div>\n                      </>\n                    )}\n                    \n                    {gameState.gameStatus === \"gameover\" && (\n                      <>\n                        <div className=\"text-2xl mb-4 text-red-400 animate-pulse\">💀 Game Over!</div>\n                        <div className=\"text-lg mb-2 font-bold text-purple-400\">Final Score: {gameState.score}</div>\n                        <div className=\"text-sm mb-1 text-pink-400\">Level Reached: {gameState.level}</div>\n                        <div className=\"text-sm mb-2 text-cyan-400\">Lines Cleared: {gameState.lines}</div>\n                        {gameState.score > bestScore && (\n                          <div className=\"text-sm text-yellow-300 mt-2 animate-bounce\">🏆 New Best Score! 🎉</div>\n                        )}\n                      </>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next piece and stats */}\n        <div className=\"space-y-4\">\n          <Card className=\"theme-transition\">\n            <CardContent className=\"p-3\">\n              <h3 className=\"text-sm font-semibold mb-2\">Next</h3>\n              <div className=\"w-16 h-16 bg-black rounded border border-gray-600 flex items-center justify-center\">\n                {gameState.nextPiece && (\n                  <div className=\"text-xs\">Next</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"theme-transition\">\n            <CardContent className=\"p-3\">\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Score:</span>\n                  <span className=\"font-bold\">{gameState.score}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Level:</span>\n                  <span className=\"font-bold\">{gameState.level}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Lines:</span>\n                  <span className=\"font-bold\">{gameState.lines}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Best:</span>\n                  <span className=\"font-bold\">{bestScore}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/50 dark:to-pink-950/50\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0 shadow-md\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-blue-500 to-purple-500 text-white border-0 shadow-md\">Level: {gameState.level}</Badge>\n            <Badge variant=\"outline\" className=\"bg-gradient-to-r from-pink-500 to-red-500 text-white border-0 shadow-md\">Lines: {gameState.lines}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"px-2\"\n            >\n              {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Arrow keys to move pieces left/right/down</li>\n            <li>• Up arrow to rotate pieces</li>\n            <li>• Space bar for instant hard drop</li>\n            <li>• Clear full rows to score points</li>\n            <li>• Earn 1 ⭐ for every 25 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n      {/* Mobile Controls */}\n      <div className=\"flex justify-center gap-8 sm:hidden\">\n        {/* Directional Pad */}\n        <div className=\"relative\">\n          <div className=\"grid grid-cols-3 gap-1 w-32 h-32\">\n            {/* Top - Rotate */}\n            <div></div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={handleMobileRotate}\n              onClick={handleMobileRotate}\n            >\n              ↻\n            </Button>\n            <div></div>\n            \n            {/* Middle - Move */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={() => handleMobileMove({ x: -1, y: 0 })}\n              onClick={() => handleMobileMove({ x: -1, y: 0 })}\n            >\n              ←\n            </Button>\n            <div className=\"w-10 h-10\"></div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={() => handleMobileMove({ x: 1, y: 0 })}\n              onClick={() => handleMobileMove({ x: 1, y: 0 })}\n            >\n              →\n            </Button>\n            \n            {/* Bottom - Down */}\n            <div></div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0\"\n              onTouchStart={() => handleMobileMove({ x: 0, y: 1 })}\n              onClick={() => handleMobileMove({ x: 0, y: 1 })}\n            >\n              ↓\n            </Button>\n            <div></div>\n          </div>\n        </div>\n        \n        {/* Drop Button */}\n        <div className=\"flex items-center\">\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"h-16 w-16 rounded-full text-xs bg-purple-500 hover:bg-purple-600 text-white\"\n            onTouchStart={() => {\n              let dropCount = 0;\n              while (gameState.currentPiece && gameState.gameStatus === \"playing\" && dropCount < 20) {\n                movePiece({ x: 0, y: 1 });\n                dropCount++;\n              }\n            }}\n            onClick={() => {\n              let dropCount = 0;\n              while (gameState.currentPiece && gameState.gameStatus === \"playing\" && dropCount < 20) {\n                movePiece({ x: 0, y: 1 });\n                dropCount++;\n              }\n            }}\n          >\n            DROP\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":21711},"client/src/components/WhackAMole.tsx":{"content":"import { useState, useEffect, useCallback, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Maximize, Minimize } from \"lucide-react\";\n\ninterface Mole {\n  id: number;\n  isActive: boolean;\n  timeLeft: number;\n}\n\ninterface GameState {\n  moles: Mole[];\n  score: number;\n  timeLeft: number;\n  gameStatus: \"waiting\" | \"playing\" | \"gameover\";\n  combo: number;\n  maxCombo: number;\n}\n\nconst GAME_TIME = 60; // 1 minute\nconst MOLE_COUNT = 9;\n\nexport default function WhackAMole() {\n  const [gameState, setGameState] = useState<GameState>({\n    moles: Array.from({ length: MOLE_COUNT }, (_, i) => ({\n      id: i,\n      isActive: false,\n      timeLeft: 0,\n    })),\n    score: 0,\n    timeLeft: GAME_TIME,\n    gameStatus: \"waiting\",\n    combo: 0,\n    maxCombo: 0,\n  });\n  \n  const [bestScore, setBestScore] = useState(() => {\n    return parseInt(localStorage.getItem(\"whack-a-mole-best-score\") || \"0\", 10);\n  });\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const gameContainerRef = useRef<HTMLDivElement>(null);\n\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const awardPointsMutation = useMutation({\n    mutationFn: async (points: number) => {\n      return apiRequest(\"POST\", \"/api/user/points\", {\n        points,\n        reason: `Whack-a-Mole - scored ${gameState.score} points`,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Points Earned!\",\n        description: `You earned ${Math.floor(gameState.score / 8)} points!`,\n      });\n    },\n  });\n\n  const resetGame = useCallback(() => {\n    setGameState({\n      moles: Array.from({ length: MOLE_COUNT }, (_, i) => ({\n        id: i,\n        isActive: false,\n        timeLeft: 0,\n      })),\n      score: 0,\n      timeLeft: GAME_TIME,\n      gameStatus: \"waiting\",\n      combo: 0,\n      maxCombo: 0,\n    });\n  }, []);\n\n  const spawnMole = useCallback(() => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      const inactiveMoles = prev.moles.filter(m => !m.isActive);\n      if (inactiveMoles.length === 0) return prev;\n\n      const randomMole = inactiveMoles[Math.floor(Math.random() * inactiveMoles.length)];\n      const moleUpTime = Math.random() * 2000 + 1000; // 1-3 seconds\n\n      return {\n        ...prev,\n        moles: prev.moles.map(m =>\n          m.id === randomMole.id\n            ? { ...m, isActive: true, timeLeft: moleUpTime }\n            : m\n        ),\n      };\n    });\n  }, []);\n\n  const whackMole = useCallback((moleId: number) => {\n    setGameState(prev => {\n      if (prev.gameStatus !== \"playing\") return prev;\n\n      const mole = prev.moles.find(m => m.id === moleId);\n      if (!mole || !mole.isActive) {\n        // Missed or already whacked - reset combo\n        return { ...prev, combo: 0 };\n      }\n\n      const newCombo = prev.combo + 1;\n      const bonusMultiplier = Math.floor(newCombo / 5) + 1; // Bonus every 5 hits\n      const points = 10 * bonusMultiplier;\n\n      if (newCombo > prev.maxCombo && newCombo % 5 === 0) {\n        toast({\n          title: `${newCombo} Hit Combo!`,\n          description: `Score multiplier: x${bonusMultiplier}`,\n        });\n      }\n\n      return {\n        ...prev,\n        moles: prev.moles.map(m =>\n          m.id === moleId ? { ...m, isActive: false, timeLeft: 0 } : m\n        ),\n        score: prev.score + points,\n        combo: newCombo,\n        maxCombo: Math.max(prev.maxCombo, newCombo),\n      };\n    });\n  }, [toast]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"playing\") {\n      // Game timer\n      const gameTimer = setInterval(() => {\n        setGameState(prev => {\n          if (prev.timeLeft <= 1) {\n            return { ...prev, timeLeft: 0, gameStatus: \"gameover\" };\n          }\n          return { ...prev, timeLeft: prev.timeLeft - 1 };\n        });\n      }, 1000);\n\n      // Mole spawn timer\n      const spawnTimer = setInterval(() => {\n        if (Math.random() < 0.6) { // 60% chance to spawn a mole\n          spawnMole();\n        }\n      }, 800);\n\n      // Mole countdown timer\n      const moleTimer = setInterval(() => {\n        setGameState(prev => ({\n          ...prev,\n          moles: prev.moles.map(m => ({\n            ...m,\n            timeLeft: Math.max(0, m.timeLeft - 100),\n            isActive: m.timeLeft > 100 && m.isActive,\n          })),\n          combo: prev.moles.some(m => m.isActive && m.timeLeft <= 100) ? 0 : prev.combo,\n        }));\n      }, 100);\n\n      return () => {\n        clearInterval(gameTimer);\n        clearInterval(spawnTimer);\n        clearInterval(moleTimer);\n      };\n    }\n  }, [gameState.gameStatus, spawnMole]);\n\n  useEffect(() => {\n    if (gameState.gameStatus === \"gameover\") {\n      const newBestScore = Math.max(bestScore, gameState.score);\n      if (newBestScore > bestScore) {\n        setBestScore(newBestScore);\n        localStorage.setItem(\"whack-a-mole-best-score\", newBestScore.toString());\n      }\n      \n      const pointsEarned = Math.floor(gameState.score / 8);\n      if (pointsEarned > 0) {\n        awardPointsMutation.mutate(pointsEarned);\n      }\n    }\n  }, [gameState.gameStatus, gameState.score, bestScore, awardPointsMutation]);\n\n  const startGame = () => {\n    setGameState(prev => ({ ...prev, gameStatus: \"playing\" }));\n  };\n\n  const toggleFullscreen = async () => {\n    if (!gameContainerRef.current) return;\n    \n    try {\n      if (!isFullscreen) {\n        if (gameContainerRef.current.requestFullscreen) {\n          await gameContainerRef.current.requestFullscreen();\n        }\n      } else {\n        if (document.exitFullscreen) {\n          await document.exitFullscreen();\n        }\n      }\n    } catch (error) {\n      console.error('Fullscreen error:', error);\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div ref={gameContainerRef} className={`space-y-4 ${isFullscreen ? 'fixed inset-0 z-50 bg-background p-4 overflow-auto' : ''}`}>\n      <div className=\"text-center\">\n        <h2 className=\"text-lg font-bold mb-2\">🔨 Whack-a-Mole</h2>\n        <p className=\"text-sm text-muted-foreground\">Hit the moles as fast as you can!</p>\n      </div>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-3 gap-4 max-w-lg mx-auto\">\n            {gameState.moles.map((mole) => (\n              <button\n                key={mole.id}\n                onClick={() => whackMole(mole.id)}\n                onTouchStart={(e) => {\n                  e.preventDefault();\n                  if (gameState.gameStatus === \"playing\") {\n                    whackMole(mole.id);\n                  }\n                }}\n                disabled={gameState.gameStatus !== \"playing\"}\n                className={`aspect-square rounded-full text-4xl font-bold transition-all duration-200 relative overflow-hidden touch-none select-none ${\n                  mole.isActive\n                    ? \"bg-brown-500 dark:bg-brown-600 hover:bg-brown-600 dark:hover:bg-brown-700 transform scale-110\"\n                    : \"bg-gray-300 dark:bg-gray-700\"\n                }`}\n                style={{\n                  background: mole.isActive\n                    ? \"linear-gradient(145deg, #8b4513, #654321)\"\n                    : undefined,\n                }}\n                data-testid={`mole-${mole.id}`}\n              >\n                {mole.isActive ? (\n                  <div className=\"relative\">\n                    <span>🦫</span>\n                    <div\n                      className=\"absolute bottom-0 left-0 bg-red-500 opacity-50 transition-all duration-100\"\n                      style={{\n                        width: '100%',\n                        height: `${(mole.timeLeft / 3000) * 100}%`,\n                      }}\n                    />\n                  </div>\n                ) : (\n                  <span className=\"text-gray-600\">🕳️</span>\n                )}\n              </button>\n            ))}\n          </div>\n          \n          {gameState.gameStatus !== \"playing\" && (\n            <div className=\"mt-6 text-center\">\n              {gameState.gameStatus === \"waiting\" && (\n                <>\n                  <div className=\"text-xl mb-2\">🔨 Ready to Whack Some Moles?</div>\n                  <div className=\"text-sm text-muted-foreground\">Click the moles when they pop up!</div>\n                </>\n              )}\n              \n              {gameState.gameStatus === \"gameover\" && (\n                <>\n                  <div className=\"text-xl mb-2\">Time's Up! 🏁</div>\n                  <div className=\"text-sm mb-2\">Final Score: {gameState.score}</div>\n                  <div className=\"text-sm mb-2\">Max Combo: {gameState.maxCombo}</div>\n                  {gameState.score > bestScore && (\n                    <div className=\"text-xs text-yellow-300 mt-1\">New Best Score! 🎉</div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5 flex justify-between items-center\">\n          <div className=\"flex gap-3\">\n            <Badge variant=\"outline\">Time: {formatTime(gameState.timeLeft)}</Badge>\n            <Badge variant=\"outline\">Score: {gameState.score}</Badge>\n            <Badge variant=\"outline\">Combo: {gameState.combo}</Badge>\n            <Badge variant=\"outline\">Best: {bestScore}</Badge>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={toggleFullscreen}\n              className=\"px-2\"\n            >\n              {isFullscreen ? <Minimize className=\"w-4 h-4\" /> : <Maximize className=\"w-4 h-4\" />}\n            </Button>\n            <Button variant=\"outline\" onClick={resetGame}>Reset</Button>\n            <Button\n              onClick={gameState.gameStatus === \"waiting\" ? startGame : resetGame}\n              className=\"bg-pocket-red hover:bg-pocket-red-dark text-white\"\n            >\n              {gameState.gameStatus === \"playing\" ? \"Reset\" : \"Play\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"theme-transition\">\n        <CardContent className=\"p-3.5\">\n          <h3 className=\"text-sm font-semibold mb-2\">How to Play</h3>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            <li>• Click on moles when they pop up from holes</li>\n            <li>• Build combos for score multipliers</li>\n            <li>• Every 5-hit combo increases your multiplier</li>\n            <li>• Earn 1 ⭐ for every 8 points scored</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11546},"client/src/lib/pointsUtils.ts":{"content":"import { queryClient } from \"@/lib/queryClient\";\n\nexport const forcePointsUpdate = () => {\n  // Immediately refetch user data for live updates\n  queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n  queryClient.refetchQueries({ queryKey: [\"/api/auth/user\"] });\n};\n\nexport const usePointsAwarding = () => {\n  return {\n    onPointsEarned: () => {\n      // Force immediate update\n      forcePointsUpdate();\n    }\n  };\n};","size_bytes":430},"client/src/lib/navigation.ts":{"content":"import { Browser } from \"@capacitor/browser\";\nimport { Capacitor } from \"@capacitor/core\";\n\n/**\n * Capacitor-compatible navigation function\n * Uses in-app browser for mobile apps, normal navigation for web\n */\nexport const navigateTo = async (url: string, external = false) => {\n  try {\n    if (Capacitor.isNativePlatform() && external) {\n      // For external URLs in mobile app, open in system browser\n      await Browser.open({ url });\n    } else if (Capacitor.isNativePlatform()) {\n      // For internal navigation in mobile app, use in-app browser with _self\n      await Browser.open({\n        url: window.location.origin + url,\n        windowName: \"_self\"\n      });\n    } else {\n      // For web, use normal navigation\n      window.location.href = url;\n    }\n  } catch (error) {\n    console.error('Navigation error:', error);\n    // Fallback to normal navigation\n    window.location.href = url;\n  }\n};\n\n/**\n * Login navigation helper\n */\nexport const navigateToLogin = () => navigateTo(\"/auth\");\n\n/**\n * Page navigation helper  \n */\nexport const navigateToPage = (path: string) => navigateTo(path);","size_bytes":1104},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\n\ndeclare global {\n  namespace Express {\n    interface User extends User {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string): Promise<boolean> {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  // Session setup\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const PostgresSessionStore = connectPg(session);\n  const sessionStore = new PostgresSessionStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"pocket-bounty-secret-key\",\n    resave: false,\n    saveUninitialized: false,\n    store: sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: process.env.NODE_ENV === \"production\" ? \"none\" : \"lax\", // Allow cross-origin for mobile\n      maxAge: sessionTtl,\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Passport Local Strategy\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !user.password) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n        \n        const isValid = await comparePasswords(password, user.password);\n        if (!isValid) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n        \n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    })\n  );\n\n  passport.serializeUser((user, done) => {\n    done(null, (user as User).id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Auth routes\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { username, email, password, firstName, lastName } = req.body;\n      \n      // Check if username already exists\n      const existingUserByUsername = await storage.getUserByUsername(username);\n      if (existingUserByUsername) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n      \n      // Check if email already exists - if so, this might be a migration case\n      const existingUserByEmail = await storage.getUserByEmail(email);\n      if (existingUserByEmail && existingUserByEmail.password) {\n        return res.status(400).json({ message: \"Email already registered with password. Please login instead.\" });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(password);\n\n      let user;\n      if (existingUserByEmail && !existingUserByEmail.password) {\n        // This is a migration case - update existing user with password and username\n        console.log(`Migrating existing user ${existingUserByEmail.id} with email ${email}`);\n        user = await storage.migrateUserToPasswordAuth(existingUserByEmail.id, {\n          username,\n          password: hashedPassword,\n          firstName,\n          lastName,\n        });\n        console.log(`User migrated successfully:`, { id: user.id, username: user.username, points: user.points, balance: user.balance });\n      } else {\n        // Create new user\n        user = await storage.createUser({\n          username,\n          email,\n          password: hashedPassword,\n          firstName,\n          lastName,\n          handle: username, // Use username as initial handle\n          points: 50, // Welcome bonus\n          balance: \"0.00\",\n          lifetimeEarned: \"0.00\",\n        });\n      }\n\n      // Auto-login after registration\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          handle: user.handle,\n          points: user.points,\n          balance: user.balance,\n          lifetimeEarned: user.lifetimeEarned,\n        });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Failed to create account\" });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: User | false, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Authentication error\" });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      \n      req.login(user, (loginErr) => {\n        if (loginErr) {\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        \n        res.json({\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          handle: user.handle,\n          points: user.points,\n          balance: user.balance,\n          lifetimeEarned: user.lifetimeEarned,\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated() || !req.user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    \n    const user = req.user as User;\n    res.json({\n      id: user.id,\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      handle: user.handle,\n      points: user.points || 0,\n      balance: user.balance || \"0.00\",\n      lifetimeEarned: user.lifetimeEarned || \"0.00\",\n      level: user.level,\n      rating: user.rating,\n      reviewCount: user.reviewCount,\n      profileImageUrl: user.profileImageUrl,\n      bio: user.bio,\n    });\n  });\n}\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n}\n\nexport { hashPassword, comparePasswords };","size_bytes":7211},"client/src/pages/AuthPage.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { Capacitor } from \"@capacitor/core\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLogin, setIsLogin] = useState(true);\n\n  const {\n    register: registerField,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm<LoginForm | RegisterForm>({\n    resolver: zodResolver(isLogin ? loginSchema : registerSchema),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/login\", data);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in to Pocket Bounty.\",\n      });\n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      \n      // Handle navigation for both web and mobile\n      if (Capacitor.isNativePlatform()) {\n        // For mobile apps, use window.location to avoid routing issues\n        window.location.href = \"/\";\n      } else {\n        setLocation(\"/\");\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const response = await apiRequest(\"POST\", \"/api/register\", data);\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Registration failed\");\n      }\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome to Pocket Bounty!\",\n        description: \"Your account has been created successfully. You got 50 welcome bonus points!\",\n      });\n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      \n      // Handle navigation for both web and mobile\n      if (Capacitor.isNativePlatform()) {\n        // For mobile apps, use window.location to avoid routing issues\n        window.location.href = \"/\";\n      } else {\n        setLocation(\"/\");\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm | RegisterForm) => {\n    if (isLogin) {\n      loginMutation.mutate(data as LoginForm);\n    } else {\n      registerMutation.mutate(data as RegisterForm);\n    }\n  };\n\n  const toggleMode = () => {\n    setIsLogin(!isLogin);\n    reset();\n  };\n\n  const isPending = loginMutation.isPending || registerMutation.isPending;\n\n  return (\n    <div className=\"min-h-screen flex\">\n      {/* Left Side - Form */}\n      <div className=\"flex-1 flex items-center justify-center bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">\n              Pocket Bounty\n            </h1>\n            <p className=\"text-blue-200\">\n              Where weird meets wallet-friendly\n            </p>\n          </div>\n\n          <Card className=\"bg-white/10 backdrop-blur-md border-white/20\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-2xl text-white\">\n                {isLogin ? \"Welcome Back!\" : \"Join the Chaos!\"}\n              </CardTitle>\n              <p className=\"text-blue-200\">\n                {isLogin ? \"Sign in to your account\" : \"Create your account and start earning\"}\n              </p>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n                {!isLogin && (\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\" className=\"text-white\">\n                        First Name\n                      </Label>\n                      <Input\n                        id=\"firstName\"\n                        type=\"text\"\n                        {...registerField(\"firstName\")}\n                        className=\"bg-white/20 border-white/30 text-white placeholder:text-gray-300\"\n                        placeholder=\"John\"\n                        data-testid=\"input-first-name\"\n                      />\n                      {!isLogin && errors.firstName && (\n                        <p className=\"text-red-300 text-sm mt-1\">\n                          {errors.firstName.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"lastName\" className=\"text-white\">\n                        Last Name\n                      </Label>\n                      <Input\n                        id=\"lastName\"\n                        type=\"text\"\n                        {...registerField(\"lastName\")}\n                        className=\"bg-white/20 border-white/30 text-white placeholder:text-gray-300\"\n                        placeholder=\"Doe\"\n                        data-testid=\"input-last-name\"\n                      />\n                      {!isLogin && errors.lastName && (\n                        <p className=\"text-red-300 text-sm mt-1\">\n                          {errors.lastName.message}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div>\n                  <Label htmlFor=\"username\" className=\"text-white\">\n                    Username\n                  </Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    {...registerField(\"username\")}\n                    className=\"bg-white/20 border-white/30 text-white placeholder:text-gray-300\"\n                    placeholder={isLogin ? \"Enter your username\" : \"Choose a unique username\"}\n                    data-testid=\"input-username\"\n                  />\n                  {errors.username && (\n                    <p className=\"text-red-300 text-sm mt-1\">\n                      {errors.username.message}\n                    </p>\n                  )}\n                </div>\n\n                {!isLogin && (\n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-white\">\n                      Email\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...registerField(\"email\")}\n                      className=\"bg-white/20 border-white/30 text-white placeholder:text-gray-300\"\n                      placeholder=\"john@example.com\"\n                      data-testid=\"input-email\"\n                    />\n                    {!isLogin && errors.email && (\n                      <p className=\"text-red-300 text-sm mt-1\">\n                        {errors.email.message}\n                      </p>\n                    )}\n                  </div>\n                )}\n\n                <div>\n                  <Label htmlFor=\"password\" className=\"text-white\">\n                    Password\n                  </Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    {...registerField(\"password\")}\n                    className=\"bg-white/20 border-white/30 text-white placeholder:text-gray-300\"\n                    placeholder={isLogin ? \"Enter your password\" : \"Choose a secure password\"}\n                    data-testid=\"input-password\"\n                  />\n                  {errors.password && (\n                    <p className=\"text-red-300 text-sm mt-1\">\n                      {errors.password.message}\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-pocket-red hover:bg-pocket-red-dark text-white\"\n                  disabled={isPending}\n                  data-testid={isLogin ? \"button-login\" : \"button-register\"}\n                >\n                  {isPending \n                    ? (isLogin ? \"Signing in...\" : \"Creating Account...\")\n                    : (isLogin ? \"Sign In\" : \"Create Account\")\n                  }\n                </Button>\n              </form>\n\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-blue-200 text-sm\">\n                  {isLogin ? \"Don't have an account? \" : \"Already have an account? \"}\n                  <button\n                    onClick={toggleMode}\n                    className=\"text-pocket-gold hover:underline font-medium\"\n                    data-testid={isLogin ? \"button-show-register\" : \"button-show-login\"}\n                  >\n                    {isLogin ? \"Create one here\" : \"Sign in here\"}\n                  </button>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Migration Notice */}\n          <div className=\"mt-6 p-4 bg-yellow-500/20 border border-yellow-500/50 rounded-lg\">\n            <h3 className=\"text-yellow-200 font-semibold mb-2\">🔄 Account Migration</h3>\n            <p className=\"text-yellow-100 text-sm\">\n              If you had a previous account with Replit login, please create a new account with the same email. \n              Your account data (points, balance, earnings) will be automatically transferred.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Right Side - Hero Section */}\n      <div className=\"flex-1 bg-gradient-to-br from-indigo-900 to-purple-900 flex items-center justify-center p-8\">\n        <div className=\"text-center text-white max-w-lg\">\n          <div className=\"text-6xl mb-6\">🤪</div>\n          <h2 className=\"text-3xl font-bold mb-4\">\n            Get Paid for Being Weird\n          </h2>\n          <p className=\"text-xl text-blue-200 mb-8\">\n            From rating outfits to naming pet rocks, turn your quirky skills into cold hard cash.\n          </p>\n          \n          <div className=\"grid grid-cols-3 gap-6 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-green-400\">$10K+</div>\n              <div className=\"text-sm text-blue-200\">Paid Out</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-blue-400\">500+</div>\n              <div className=\"text-sm text-blue-200\">Active Users</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-purple-400\">4.9★</div>\n              <div className=\"text-sm text-blue-200\">Rating</div>\n            </div>\n          </div>\n\n          <div className=\"mt-8 p-4 bg-white/10 rounded-lg\">\n            <h4 className=\"font-semibold mb-2\">💡 Real bounties that exist:</h4>\n            <ul className=\"text-sm text-blue-200 space-y-1\">\n              <li>• \"Rate my outfit for a first date 👗 - $8\"</li>\n              <li>• \"Help me name my pet rock 🪨 - $12\"</li>\n              <li>• \"Tell me if this meme is funny 😂 - $5\"</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12618},"build-ios-instructions.md":{"content":"# iOS IPA Build Instructions for Pocket Bounty\n\nYour Capacitor iOS project is ready! Since iOS builds require Xcode (macOS only), here are your options:\n\n## Option 1: Build on Mac with Xcode\n\n### Prerequisites:\n- macOS with Xcode installed\n- Your P12 certificate and provisioning profile\n- Apple Developer account\n\n### Steps:\n\n1. **Copy the project to your Mac:**\n   ```bash\n   # Download the entire ios/ folder to your Mac\n   ```\n\n2. **Open in Xcode:**\n   ```bash\n   open ios/App/App.xcworkspace\n   ```\n\n3. **Configure Signing:**\n   - Select your project in Xcode\n   - Go to \"Signing & Capabilities\" tab\n   - Set your Team and Bundle Identifier: `com.pocketbounty.app`\n   - Import your P12 certificate in Keychain Access\n   - Select your provisioning profile\n\n4. **Build IPA:**\n   ```bash\n   # In Terminal, from the ios/App directory:\n   xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -destination generic/platform=iOS -archivePath App.xcarchive archive\n\n   # Export IPA:\n   xcodebuild -exportArchive -archivePath App.xcarchive -exportPath ./build -exportOptionsPlist ExportOptions.plist\n   ```\n\n## Option 2: Use GitHub Actions (CI/CD)\n\nCreate `.github/workflows/ios-build.yml`:\n\n```yaml\nname: iOS Build\non:\n  workflow_dispatch:\n  \njobs:\n  ios-build:\n    runs-on: macos-latest\n    steps:\n      - uses: actions/checkout@v3\n      \n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n          \n      - name: Install dependencies\n        run: npm ci\n        \n      - name: Build web app\n        run: npm run build\n        \n      - name: Sync Capacitor\n        run: npx cap sync ios\n        \n      - name: Build iOS\n        run: |\n          cd ios/App\n          xcodebuild -workspace App.xcworkspace -scheme App -configuration Release -destination generic/platform=iOS -archivePath App.xcarchive archive\n          \n      - name: Upload IPA\n        uses: actions/upload-artifact@v3\n        with:\n          name: pocket-bounty-ipa\n          path: ios/App/build/*.ipa\n```\n\n## Option 3: Use Codemagic or Similar CI Service\n\n1. Connect your repository to Codemagic\n2. Upload your P12 certificate and provisioning profile\n3. Configure build script to run Capacitor sync and Xcode build\n\n## Required Files for Signing:\n\nYou'll need to create `ExportOptions.plist`:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>method</key>\n    <string>app-store</string>\n    <key>provisioningProfiles</key>\n    <dict>\n        <key>com.pocketbounty.app</key>\n        <string>YOUR_PROVISIONING_PROFILE_NAME</string>\n    </dict>\n    <key>signingCertificate</key>\n    <string>iPhone Distribution</string>\n    <key>teamID</key>\n    <string>YOUR_TEAM_ID</string>\n</dict>\n</plist>\n```\n\n## Project Configuration:\n\n- **App Name:** Pocket Bounty\n- **Bundle ID:** com.pocketbounty.app\n- **Permissions:** Camera, Photo Library, Network Access\n- **Orientation:** Portrait + Landscape\n\nThe iOS project is fully configured and ready for building with your P12 certificate!","size_bytes":3154},"capacitor.config.ts":{"content":"import { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.pocketbounty.app',\n  appName: 'Pocket Bounty',\n  webDir: 'dist/public',\n  server: {\n    androidScheme: 'https'\n  },\n  plugins: {\n    Browser: {\n      presentationStyle: 'popover'\n    }\n  }\n};\n\nexport default config;","size_bytes":314},"codemagic.yaml":{"content":"workflows:\n\n  ios-unsigned-build:\n    name: iOS Unsigned Build (for esign)\n    max_build_duration: 60\n    instance_type: mac_mini_m1\n    environment:\n      vars:\n        BUNDLE_ID: \"com.pocketbounty.app\"\n        XCODE_WORKSPACE: \"ios/App/App.xcworkspace\" \n        XCODE_SCHEME: \"App\"\n      node: 18.17.0\n      xcode: latest\n      cocoapods: default\n    scripts:\n      - name: Install npm dependencies\n        script: |\n          npm ci\n      - name: Build web application  \n        script: |\n          npm run build\n      - name: Update dependencies and copy web assets to native project\n        script: |\n          npx cap sync ios\n      - name: Create export options for unsigned build\n        script: |\n          cd ios/App\n          cat > ExportOptions.plist << EOF\n          <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n          <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n          <plist version=\"1.0\">\n          <dict>\n              <key>method</key>\n              <string>development</string>\n              <key>compileBitcode</key>\n              <false/>\n              <key>signingStyle</key>\n              <string>manual</string>\n              <key>stripSwiftSymbols</key>\n              <true/>\n          </dict>\n          </plist>\n          EOF\n      - name: Disable all code signing in Xcode project\n        script: |\n          cd ios/App\n          # Disable code signing completely\n          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' App.xcodeproj/project.pbxproj\n          sed -i '' 's/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = \"\";/g' App.xcodeproj/project.pbxproj\n          sed -i '' 's/CODE_SIGN_IDENTITY = .*/CODE_SIGN_IDENTITY = \"\";/g' App.xcodeproj/project.pbxproj\n          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = .*/PROVISIONING_PROFILE_SPECIFIER = \"\";/g' App.xcodeproj/project.pbxproj\n      - name: Build unsigned app archive\n        script: |\n          cd ios/App\n          xcodebuild -workspace App.xcworkspace \\\n            -scheme App \\\n            -configuration Release \\\n            -destination generic/platform=iOS \\\n            -archivePath App.xcarchive \\\n            CODE_SIGN_IDENTITY=\"\" \\\n            CODE_SIGNING_REQUIRED=NO \\\n            CODE_SIGNING_ALLOWED=NO \\\n            PROVISIONING_PROFILE=\"\" \\\n            archive\n      - name: Export unsigned IPA\n        script: |\n          cd ios/App\n          xcodebuild -exportArchive \\\n            -archivePath App.xcarchive \\\n            -exportPath ./build \\\n            -exportOptionsPlist ExportOptions.plist\n    artifacts:\n      - build/ios/ipa/*.ipa\n      - /tmp/xcodebuild_logs/*.log\n      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app\n      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM\n    publishing:\n      email:\n        recipients:\n          - user@example.com\n        notify:\n          success: true\n          failure: false","size_bytes":2945},"ios/App/App/AppDelegate.swift":{"content":"import UIKit\nimport Capacitor\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n\n    func applicationWillResignActive(_ application: UIApplication) {\n        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.\n    }\n\n    func applicationDidEnterBackground(_ application: UIApplication) {\n        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.\n        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.\n    }\n\n    func applicationWillEnterForeground(_ application: UIApplication) {\n        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.\n    }\n\n    func applicationDidBecomeActive(_ application: UIApplication) {\n        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.\n    }\n\n    func applicationWillTerminate(_ application: UIApplication) {\n        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.\n    }\n\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        // Called when the app was launched with a url. Feel free to add additional processing here,\n        // but if you want the App API to support tracking app url opens, make sure to keep this call\n        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n    }\n\n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n        // Called when the app was launched with an activity, including Universal Links.\n        // Feel free to add additional processing here, but if you want the App API to support\n        // tracking app url opens, make sure to keep this call\n        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)\n    }\n\n}\n","size_bytes":3031}},"version":1}